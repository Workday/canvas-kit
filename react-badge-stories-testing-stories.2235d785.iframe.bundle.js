"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[5309],{"./modules/react/badge/stories/testing.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.CountBadgeStates=exports.CountBadgeInverseBgTest=void 0;(function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}})(__webpack_require__("./node_modules/react/index.js"));var _testing=__webpack_require__("./modules/react/testing/index.ts"),_index=__webpack_require__("./modules/react/badge/index.ts"),_canvasKitStyling=__webpack_require__("./modules/styling/index.ts"),_canvasTokensWeb=__webpack_require__("./node_modules/@workday/canvas-tokens-web/dist/es6/index.js"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");exports.default={title:"Testing/Indicators/Badge/CountBadge",component:_index.CountBadge,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import React from 'react';\\nimport {ComponentStatesTable} from '@workday/canvas-kit-react/testing';\\nimport {CountBadge} from '../index';\\nimport {cssVar} from '@workday/canvas-kit-styling';\\nimport {base, system} from '@workday/canvas-tokens-web';\\n\\nexport default {\\n  title: 'Testing/Indicators/Badge/CountBadge',\\n  component: CountBadge,\\n  parameters: {\\n    ReadmePath: 'react/badge',\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const CountBadgeStates = {\\n  render: () => {\\n    return (\\n      <ComponentStatesTable\\n        columnProps={[\\n          {label: 'Single Digit', props: {count: 1}},\\n          {label: 'Double Digit', props: {count: 23}},\\n          {label: 'Triple Digit', props: {count: 456}},\\n          {\\n            label: 'Greater than 999',\\n            props: {count: 1000},\\n          },\\n          {label: 'Custom Limit', props: {count: 100, limit: 100}},\\n        ]}\\n        rowProps={[\\n          {label: 'Default High Emphasis', props: {}},\\n          {label: 'Default Low Emphasis', props: {emphasis: 'low'}},\\n          {label: 'Inverse High Emphasis', props: {variant: 'inverse'}},\\n          {label: 'Inverse Low Emphasis', props: {emphasis: 'low', variant: 'inverse'}},\\n        ]}\\n      >\\n        {props => (\\n          <div\\n            style={{\\n              padding: cssVar(system.space.x2),\\n              backgroundColor: cssVar(\\n                props.variant === 'inverse'\\n                  ? system.color.bg.primary.default\\n                  : system.color.bg.alt.soft\\n              ),\\n            }}\\n          >\\n            <CountBadge {...props} />\\n          </div>\\n        )}\\n      </ComponentStatesTable>\\n    );\\n  },\\n};\\n\\nexport const CountBadgeInverseBgTest = {\\n  render: () => {\\n    const colors = [\\n      'amber',\\n      'blue',\\n      'coral',\\n      'green',\\n      'indigo',\\n      'neutral',\\n      'orange',\\n      'magenta',\\n      'purple',\\n      'red',\\n      'slate',\\n      'teal',\\n    ];\\n    const colorScales = ['100', '200', '300', '400', '500', '600', '700', '800', '900'].reverse();\\n    const colorProps = colors.map(color => ({\\n      label: color,\\n      props: {emphasis: 'low', variant: 'inverse', count: 1, color},\\n    }));\\n    const colorScaleProps = colorScales.map(colorScale => ({\\n      label: colorScale,\\n      props: {colorScale},\\n    }));\\n\\n    return (\\n      <ComponentStatesTable columnProps={colorScaleProps} rowProps={colorProps}>\\n        {({color, colorScale, ...props}) => (\\n          <div\\n            style={{\\n              backgroundColor: cssVar(base[`${color}${colorScale}`]),\\n              padding: cssVar(system.space.x4),\\n            }}\\n          >\\n            <CountBadge {...props} />\\n          </div>\\n        )}\\n      </ComponentStatesTable>\\n    );\\n  },\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"CountBadgeStates\": {\n    \"startLoc\": {\n      \"col\": 32,\n      \"line\": 18\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 56\n    },\n    \"startBody\": {\n      \"col\": 32,\n      \"line\": 18\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 56\n    }\n  },\n  \"CountBadgeInverseBgTest\": {\n    \"startLoc\": {\n      \"col\": 39,\n      \"line\": 58\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 99\n    },\n    \"startBody\": {\n      \"col\": 39,\n      \"line\": 58\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 99\n    }\n  }\n};\n    \nimport React from 'react';\nimport {ComponentStatesTable} from '@workday/canvas-kit-react/testing';\nimport {CountBadge} from '../index';\nimport {cssVar} from '@workday/canvas-kit-styling';\nimport {base, system} from '@workday/canvas-tokens-web';\n\nexport default {\n  title: 'Testing/Indicators/Badge/CountBadge',\n  component: CountBadge,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import React from 'react';\\nimport {ComponentStatesTable} from '@workday/canvas-kit-react/testing';\\nimport {CountBadge} from '../index';\\nimport {cssVar} from '@workday/canvas-kit-styling';\\nimport {base, system} from '@workday/canvas-tokens-web';\\n\\nexport default {\\n  title: 'Testing/Indicators/Badge/CountBadge',\\n  component: CountBadge,\\n  parameters: {\\n    ReadmePath: 'react/badge',\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const CountBadgeStates = {\\n  render: () => {\\n    return (\\n      <ComponentStatesTable\\n        columnProps={[\\n          {label: 'Single Digit', props: {count: 1}},\\n          {label: 'Double Digit', props: {count: 23}},\\n          {label: 'Triple Digit', props: {count: 456}},\\n          {\\n            label: 'Greater than 999',\\n            props: {count: 1000},\\n          },\\n          {label: 'Custom Limit', props: {count: 100, limit: 100}},\\n        ]}\\n        rowProps={[\\n          {label: 'Default High Emphasis', props: {}},\\n          {label: 'Default Low Emphasis', props: {emphasis: 'low'}},\\n          {label: 'Inverse High Emphasis', props: {variant: 'inverse'}},\\n          {label: 'Inverse Low Emphasis', props: {emphasis: 'low', variant: 'inverse'}},\\n        ]}\\n      >\\n        {props => (\\n          <div\\n            style={{\\n              padding: cssVar(system.space.x2),\\n              backgroundColor: cssVar(\\n                props.variant === 'inverse'\\n                  ? system.color.bg.primary.default\\n                  : system.color.bg.alt.soft\\n              ),\\n            }}\\n          >\\n            <CountBadge {...props} />\\n          </div>\\n        )}\\n      </ComponentStatesTable>\\n    );\\n  },\\n};\\n\\nexport const CountBadgeInverseBgTest = {\\n  render: () => {\\n    const colors = [\\n      'amber',\\n      'blue',\\n      'coral',\\n      'green',\\n      'indigo',\\n      'neutral',\\n      'orange',\\n      'magenta',\\n      'purple',\\n      'red',\\n      'slate',\\n      'teal',\\n    ];\\n    const colorScales = ['100', '200', '300', '400', '500', '600', '700', '800', '900'].reverse();\\n    const colorProps = colors.map(color => ({\\n      label: color,\\n      props: {emphasis: 'low', variant: 'inverse', count: 1, color},\\n    }));\\n    const colorScaleProps = colorScales.map(colorScale => ({\\n      label: colorScale,\\n      props: {colorScale},\\n    }));\\n\\n    return (\\n      <ComponentStatesTable columnProps={colorScaleProps} rowProps={colorProps}>\\n        {({color, colorScale, ...props}) => (\\n          <div\\n            style={{\\n              backgroundColor: cssVar(base[`${color}${colorScale}`]),\\n              padding: cssVar(system.space.x4),\\n            }}\\n          >\\n            <CountBadge {...props} />\\n          </div>\\n        )}\\n      </ComponentStatesTable>\\n    );\\n  },\\n};\\n\",\n    \"locationsMap\": {\n      \"count-badge-states\": {\n        \"startLoc\": {\n          \"col\": 32,\n          \"line\": 18\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 56\n        },\n        \"startBody\": {\n          \"col\": 32,\n          \"line\": 18\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 56\n        }\n      },\n      \"count-badge-inverse-bg-test\": {\n        \"startLoc\": {\n          \"col\": 39,\n          \"line\": 58\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 99\n        },\n        \"startBody\": {\n          \"col\": 39,\n          \"line\": 58\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 99\n        }\n      }\n    }\n  }\n,\n    ReadmePath: 'react/badge',\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const CountBadgeStates = {\n  render: () => {\n    return (\n      <ComponentStatesTable\n        columnProps={[\n          {label: 'Single Digit', props: {count: 1}},\n          {label: 'Double Digit', props: {count: 23}},\n          {label: 'Triple Digit', props: {count: 456}},\n          {\n            label: 'Greater than 999',\n            props: {count: 1000},\n          },\n          {label: 'Custom Limit', props: {count: 100, limit: 100}},\n        ]}\n        rowProps={[\n          {label: 'Default High Emphasis', props: {}},\n          {label: 'Default Low Emphasis', props: {emphasis: 'low'}},\n          {label: 'Inverse High Emphasis', props: {variant: 'inverse'}},\n          {label: 'Inverse Low Emphasis', props: {emphasis: 'low', variant: 'inverse'}},\n        ]}\n      >\n        {props => (\n          <div\n            style={{\n              padding: cssVar(system.space.x2),\n              backgroundColor: cssVar(\n                props.variant === 'inverse'\n                  ? system.color.bg.primary.default\n                  : system.color.bg.alt.soft\n              ),\n            }}\n          >\n            <CountBadge {...props} />\n          </div>\n        )}\n      </ComponentStatesTable>\n    );\n  },\n};;\n\nexport const CountBadgeInverseBgTest = {\n  render: () => {\n    const colors = [\n      'amber',\n      'blue',\n      'coral',\n      'green',\n      'indigo',\n      'neutral',\n      'orange',\n      'magenta',\n      'purple',\n      'red',\n      'slate',\n      'teal',\n    ];\n    const colorScales = ['100', '200', '300', '400', '500', '600', '700', '800', '900'].reverse();\n    const colorProps = colors.map(color => ({\n      label: color,\n      props: {emphasis: 'low', variant: 'inverse', count: 1, color},\n    }));\n    const colorScaleProps = colorScales.map(colorScale => ({\n      label: colorScale,\n      props: {colorScale},\n    }));\n\n    return (\n      <ComponentStatesTable columnProps={colorScaleProps} rowProps={colorProps}>\n        {({color, colorScale, ...props}) => (\n          <div\n            style={{\n              backgroundColor: cssVar(base[`${color}${colorScale}`]),\n              padding: cssVar(system.space.x4),\n            }}\n          >\n            <CountBadge {...props} />\n          </div>\n        )}\n      </ComponentStatesTable>\n    );\n  },\n};\n",locationsMap:{"count-badge-states":{startLoc:{col:32,line:105},endLoc:{col:1,line:143},startBody:{col:32,line:105},endBody:{col:1,line:143}},"count-badge-inverse-bg-test":{startLoc:{col:39,line:145},endLoc:{col:1,line:186},startBody:{col:39,line:145},endBody:{col:1,line:186}}}},storySource:{source:"import React from 'react';\nimport {ComponentStatesTable} from '@workday/canvas-kit-react/testing';\nimport {CountBadge} from '../index';\nimport {cssVar} from '@workday/canvas-kit-styling';\nimport {base, system} from '@workday/canvas-tokens-web';\n\nexport default {\n  title: 'Testing/Indicators/Badge/CountBadge',\n  component: CountBadge,\n  parameters: {\n    ReadmePath: 'react/badge',\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const CountBadgeStates = {\n  render: () => {\n    return (\n      <ComponentStatesTable\n        columnProps={[\n          {label: 'Single Digit', props: {count: 1}},\n          {label: 'Double Digit', props: {count: 23}},\n          {label: 'Triple Digit', props: {count: 456}},\n          {\n            label: 'Greater than 999',\n            props: {count: 1000},\n          },\n          {label: 'Custom Limit', props: {count: 100, limit: 100}},\n        ]}\n        rowProps={[\n          {label: 'Default High Emphasis', props: {}},\n          {label: 'Default Low Emphasis', props: {emphasis: 'low'}},\n          {label: 'Inverse High Emphasis', props: {variant: 'inverse'}},\n          {label: 'Inverse Low Emphasis', props: {emphasis: 'low', variant: 'inverse'}},\n        ]}\n      >\n        {props => (\n          <div\n            style={{\n              padding: cssVar(system.space.x2),\n              backgroundColor: cssVar(\n                props.variant === 'inverse'\n                  ? system.color.bg.primary.default\n                  : system.color.bg.alt.soft\n              ),\n            }}\n          >\n            <CountBadge {...props} />\n          </div>\n        )}\n      </ComponentStatesTable>\n    );\n  },\n};\n\nexport const CountBadgeInverseBgTest = {\n  render: () => {\n    const colors = [\n      'amber',\n      'blue',\n      'coral',\n      'green',\n      'indigo',\n      'neutral',\n      'orange',\n      'magenta',\n      'purple',\n      'red',\n      'slate',\n      'teal',\n    ];\n    const colorScales = ['100', '200', '300', '400', '500', '600', '700', '800', '900'].reverse();\n    const colorProps = colors.map(color => ({\n      label: color,\n      props: {emphasis: 'low', variant: 'inverse', count: 1, color},\n    }));\n    const colorScaleProps = colorScales.map(colorScale => ({\n      label: colorScale,\n      props: {colorScale},\n    }));\n\n    return (\n      <ComponentStatesTable columnProps={colorScaleProps} rowProps={colorProps}>\n        {({color, colorScale, ...props}) => (\n          <div\n            style={{\n              backgroundColor: cssVar(base[`${color}${colorScale}`]),\n              padding: cssVar(system.space.x4),\n            }}\n          >\n            <CountBadge {...props} />\n          </div>\n        )}\n      </ComponentStatesTable>\n    );\n  },\n};\n",locationsMap:{"count-badge-states":{startLoc:{col:32,line:18},endLoc:{col:1,line:56},startBody:{col:32,line:18},endBody:{col:1,line:56}},"count-badge-inverse-bg-test":{startLoc:{col:39,line:58},endLoc:{col:1,line:99},startBody:{col:39,line:58},endBody:{col:1,line:99}}}},ReadmePath:"react/badge",chromatic:{disable:!1}}};exports.CountBadgeStates={render:()=>(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{columnProps:[{label:"Single Digit",props:{count:1}},{label:"Double Digit",props:{count:23}},{label:"Triple Digit",props:{count:456}},{label:"Greater than 999",props:{count:1e3}},{label:"Custom Limit",props:{count:100,limit:100}}],rowProps:[{label:"Default High Emphasis",props:{}},{label:"Default Low Emphasis",props:{emphasis:"low"}},{label:"Inverse High Emphasis",props:{variant:"inverse"}},{label:"Inverse Low Emphasis",props:{emphasis:"low",variant:"inverse"}}],children:props=>(0,_jsxRuntime.jsx)("div",{style:{padding:(0,_canvasKitStyling.cssVar)(_canvasTokensWeb.system.space.x2),backgroundColor:(0,_canvasKitStyling.cssVar)("inverse"===props.variant?_canvasTokensWeb.system.color.bg.primary.default:_canvasTokensWeb.system.color.bg.alt.soft)},children:(0,_jsxRuntime.jsx)(_index.CountBadge,{...props})})})},exports.CountBadgeInverseBgTest={render:()=>{const colorScales=["100","200","300","400","500","600","700","800","900"].reverse(),colorProps=["amber","blue","coral","green","indigo","neutral","orange","magenta","purple","red","slate","teal"].map((color=>({label:color,props:{emphasis:"low",variant:"inverse",count:1,color}}))),colorScaleProps=colorScales.map((colorScale=>({label:colorScale,props:{colorScale}})));return(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{columnProps:colorScaleProps,rowProps:colorProps,children:({color,colorScale,...props})=>(0,_jsxRuntime.jsx)("div",{style:{backgroundColor:(0,_canvasKitStyling.cssVar)(_canvasTokensWeb.base[`${color}${colorScale}`]),padding:(0,_canvasKitStyling.cssVar)(_canvasTokensWeb.system.space.x4)},children:(0,_jsxRuntime.jsx)(_index.CountBadge,{...props})})})}};module.exports.__namedExportsOrder=["CountBadgeStates","CountBadgeInverseBgTest"]},"./modules/react/badge/index.ts":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"CountBadge",{enumerable:!0,get:function(){return _CountBadge.CountBadge}}),Object.defineProperty(exports,"CountBadgeProps",{enumerable:!0,get:function(){return _CountBadge.CountBadgeProps}});var _CountBadge=__webpack_require__("./modules/react/badge/lib/CountBadge.tsx");const __docs=[];window.__updateDocs?window.__updateDocs?.(__docs):window.__docs=(window.__docs||[]).concat(__docs)},"./modules/react/badge/lib/CountBadge.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.CountBadge=void 0;var _common=__webpack_require__("./modules/react/common/index.ts"),_canvasKitStyling=__webpack_require__("./modules/styling/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");(0,_canvasKitStyling.keyframes)({name:"2bhtrj",styles:"from{transform:scale(0.85);}to{transform:scale(1.0);}"});const countBadgeStencil=(0,_canvasKitStyling.createStencil)({base:{name:"3qnkhk",styles:"box-sizing:border-box;align-items:center;animation:animation-2bhtrj 0.2s ease;border-radius:var(--cnvs-sys-shape-round);display:inline-flex;font-family:var(--cnvs-sys-font-family-default);font-size:var(--cnvs-sys-font-size-subtext-medium);font-weight:var(--cnvs-sys-font-weight-bold);height:1.25rem;justify-content:center;line-height:1.25rem;min-width:1.25rem;padding:0 0.40625rem;background:var(--cnvs-sys-color-fg-critical-default);color:var(--cnvs-sys-color-text-inverse);"},modifiers:{variant:{inverse:{name:"1nr1io",styles:"background:var(--cnvs-sys-color-bg-default);color:var(--cnvs-sys-color-text-primary-default);"}},emphasis:{high:{name:"1jt1yl",styles:""},low:{name:"1dee8s",styles:"background:var(--cnvs-sys-color-bg-info-softer);color:var(--cnvs-sys-color-fg-info-stronger);"}}},compound:[{modifiers:{variant:"inverse",emphasis:"low"},styles:{name:"1zbdy1",styles:"background:var(--cnvs-sys-color-bg-transparent-strong);color:var(--cnvs-sys-color-fg-inverse);"}}]},"count-badge-524876"),__docs=(exports.CountBadge=(0,_common.createComponent)("span")({displayName:"CountBadge",Component:({count=0,limit=1e3,variant,emphasis="high",...elemProps},ref,Element)=>{const formattedCount=count<limit?`${count}`:limit-1+"+";return(0,_jsxRuntime.jsx)(Element,{ref,...(0,_canvasKitStyling.handleCsProp)(elemProps,[countBadgeStencil({variant,emphasis})]),children:formattedCount})}}),[{name:"CountBadgeProps",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/badge/lib/CountBadge.tsx",description:"",declarations:[{name:"CountBadgeProps",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/badge/lib/CountBadge.tsx"}],tags:{},type:{kind:"object",properties:[{kind:"property",name:"count",required:!1,type:{kind:"primitive",value:"number"},description:"Sets the count displayed in the badge",declarations:[{name:"count",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/badge/lib/CountBadge.tsx"}],tags:{default:"0"}},{kind:"property",name:"emphasis",required:!1,type:{kind:"union",value:[{kind:"string",value:"high"},{kind:"string",value:"low"}]},description:"Sets the emphasis of the badge",declarations:[{name:"emphasis",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/badge/lib/CountBadge.tsx"}],tags:{default:"'high'"}},{kind:"property",name:"limit",required:!1,type:{kind:"primitive",value:"number"},description:"Sets the maximum count to display before formatting the number.\nE.g. Given a count of `100` and a limit of `100`, the badge would display `99+`.",declarations:[{name:"limit",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/badge/lib/CountBadge.tsx"}],tags:{default:"1000"}},{kind:"property",name:"variant",required:!1,type:{kind:"string",value:"inverse"},description:"Sets the variant of the Count Badge",declarations:[{name:"variant",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/badge/lib/CountBadge.tsx"}],tags:{}},{kind:"property",name:"cs",required:!1,type:{kind:"symbol",name:"CSToPropsInput",value:"CSToPropsInput"},description:"The `cs` prop takes in a single value or an array of values. You can pass the CSS class name\nreturned by {@link createStyles}, or the result of {@link createVars} and\n{@link createModifiers}. If you're extending a component already using `cs`, you can merge that\nprop in as well. Any style that is passed to the `cs` prop will override style props. If you\nwish to have styles that are overridden by the `css` prop, or styles added via the `styled`\nAPI, use {@link handleCsProp} wherever `elemProps` is used. If your component needs to also\nhandle style props, use {@link mergeStyles } instead.\n\n\n```tsx\nimport {handleCsProp} from '@workday/canvas-kit-styling';\nimport {mergeStyles} from '@workday/canvas-kit-react/layout';\n\n// ...\n\n// `handleCsProp` handles compat mode with Emotion's runtime APIs. `mergeStyles` has the same\n// function signature, but adds support for style props.\n\nreturn (\n <Element\n   {...handleCsProp(elemProps, [\n     myStyles,\n     myModifiers({ size: 'medium' }),\n     myVars({ backgroundColor: 'red' })\n   ])}\n >\n   {children}\n </Element>\n)\n```",declarations:[{name:"cs",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}}]}},{name:"CountBadge",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/badge/lib/CountBadge.tsx",description:"`CountBadge` provides a quantity-based summary with dynamic values.",declarations:[{name:"CountBadge",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/badge/lib/CountBadge.tsx"}],tags:{},type:{kind:"enhancedComponent",componentType:"regular",displayName:"CountBadge",props:[{kind:"property",name:"count",required:!1,type:{kind:"primitive",value:"number"},description:"Sets the count displayed in the badge",declarations:[{name:"count",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/badge/lib/CountBadge.tsx"}],tags:{default:"0"},defaultValue:{kind:"number",value:0}},{kind:"property",name:"emphasis",required:!1,type:{kind:"union",value:[{kind:"string",value:"high"},{kind:"string",value:"low"}]},description:"Sets the emphasis of the badge",declarations:[{name:"emphasis",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/badge/lib/CountBadge.tsx"}],tags:{default:"'high'"},defaultValue:{kind:"string",value:"high"}},{kind:"property",name:"limit",required:!1,type:{kind:"primitive",value:"number"},description:"Sets the maximum count to display before formatting the number.\nE.g. Given a count of `100` and a limit of `100`, the badge would display `99+`.",declarations:[{name:"limit",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/badge/lib/CountBadge.tsx"}],tags:{default:"1000"},defaultValue:{kind:"number",value:1e3}},{kind:"property",name:"variant",required:!1,type:{kind:"string",value:"inverse"},description:"Sets the variant of the Count Badge",declarations:[{name:"variant",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/badge/lib/CountBadge.tsx"}],tags:{}},{kind:"property",name:"cs",required:!1,type:{kind:"symbol",name:"CSToPropsInput",value:"CSToPropsInput"},description:"The `cs` prop takes in a single value or an array of values. You can pass the CSS class name\nreturned by {@link createStyles}, or the result of {@link createVars} and\n{@link createModifiers}. If you're extending a component already using `cs`, you can merge that\nprop in as well. Any style that is passed to the `cs` prop will override style props. If you\nwish to have styles that are overridden by the `css` prop, or styles added via the `styled`\nAPI, use {@link handleCsProp} wherever `elemProps` is used. If your component needs to also\nhandle style props, use {@link mergeStyles } instead.\n\n\n```tsx\nimport {handleCsProp} from '@workday/canvas-kit-styling';\nimport {mergeStyles} from '@workday/canvas-kit-react/layout';\n\n// ...\n\n// `handleCsProp` handles compat mode with Emotion's runtime APIs. `mergeStyles` has the same\n// function signature, but adds support for style props.\n\nreturn (\n <Element\n   {...handleCsProp(elemProps, [\n     myStyles,\n     myModifiers({ size: 'medium' }),\n     myVars({ backgroundColor: 'red' })\n   ])}\n >\n   {children}\n </Element>\n)\n```",declarations:[{name:"cs",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"children",description:"",tags:{},declarations:[],type:{kind:"external",name:"React.ReactNode",url:"https://reactjs.org/docs/rendering-elements.html"}},{kind:"property",name:"as",description:"Optional override of the default element used by the component. Any valid tag or Component. If you provided a Component, this component should forward the ref using `React.forwardRef`and spread extra props to a root element.\n\n**Note:** Not all elements make sense and some elements may cause accessibility issues. Change this value with care.",tags:{},declarations:[],type:{kind:"external",name:"React.ElementType",url:"https://developer.mozilla.org/en-US/docs/Web/API/element"},defaultValue:{kind:"external",name:"span",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span"}},{kind:"property",name:"ref",description:"Optional ref. If the component represents an element, this ref will be a reference to the real DOM element of the component. If `as` is set to an element, it will be that element. If `as` is a component, the reference will be to that component (or element if the component uses `React.forwardRef`).",tags:{},declarations:[],type:{kind:"external",name:"React.Ref",url:"https://reactjs.org/docs/refs-and-the-dom.html",typeParameters:[{kind:"typeParameter",name:"R",required:!0,defaultValue:{kind:"external",name:"span",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span"}}]}}],baseElement:{kind:"external",name:"span",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span"}}}]);window.__updateDocs?window.__updateDocs?.(__docs):window.__docs=(window.__docs||[]).concat(__docs)}}]);