"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[7594],{"./modules/preview-react/radio/stories/testing.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.RadioThemedStates=exports.RadioStates=exports.RadioInverseThemedStates=exports.InverseRadioStates=void 0;(function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}})(__webpack_require__("./node_modules/react/index.js"));var _testing=__webpack_require__("./modules/react/testing/index.ts"),_storybook=__webpack_require__("./utils/storybook/index.ts"),_formField=__webpack_require__("./modules/react/form-field/index.ts"),_radio=__webpack_require__("./modules/preview-react/radio/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");exports.default={title:"Testing/Preview/Radio",component:_radio.RadioGroup,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import React from 'react';\\n\\nimport {\\n  ComponentStatesTable,\\n  StaticStates,\\n  permutateProps,\\n} from '@workday/canvas-kit-react/testing';\\nimport {customColorTheme} from '../../../../utils/storybook';\\nimport {FormFieldGroup} from '@workday/canvas-kit-react/form-field';\\nimport {RadioGroup} from '@workday/canvas-kit-preview-react/radio';\\n\\nconst hintText = 'Helpful text goes here.';\\nconst hintId = 'error-desc-id';\\n\\nexport default {\\n  title: 'Testing/Preview/Radio',\\n  component: RadioGroup,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nconst testGroup = (\\n  <FormFieldGroup.List as={RadioGroup} name=\\\"contact\\\" value={'email'}>\\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\\\"1\\\" value=\\\"email\\\">\\n      Email\\n    </FormFieldGroup.Input>\\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\\\"2\\\" value=\\\"phone\\\">\\n      Phone\\n    </FormFieldGroup.Input>\\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\\\"3\\\" disabled={true} value=\\\"fax\\\">\\n      Fax (disabled)\\n    </FormFieldGroup.Input>\\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\\\"4\\\" value=\\\"mail\\\">\\n      \\\"Mail (US Postal Service aka USPS), a longer than normal label\\\"\\n    </FormFieldGroup.Input>\\n  </FormFieldGroup.List>\\n);\\n\\nexport const RadioStates = {\\n  render: () => {\\n    return (\\n      <div>\\n        <StaticStates>\\n          <ComponentStatesTable\\n            rowProps={permutateProps({\\n              checked: [\\n                {value: true, label: 'Checked'},\\n                {value: false, label: 'Unchecked'},\\n              ],\\n            })}\\n            columnProps={permutateProps(\\n              {\\n                className: [\\n                  {label: 'Default', value: ''},\\n                  {label: 'Hover', value: 'hover'},\\n                  {label: 'Focus', value: 'focus'},\\n                  {label: 'Focus Hover', value: 'focus hover'},\\n                  {label: 'Active', value: 'active'},\\n                  {label: 'Active Hover', value: 'active hover'},\\n                ],\\n                disabled: [\\n                  {label: '', value: false},\\n                  {label: 'Disabled', value: true},\\n                ],\\n              },\\n              props => {\\n                if (props.disabled && !['', 'hover'].includes(props.className)) {\\n                  return false;\\n                }\\n                return true;\\n              }\\n            )}\\n          >\\n            {props => (\\n              <RadioGroup>\\n                <RadioGroup.RadioButton disabled={props.disabled} {...props}>\\n                  Email\\n                </RadioGroup.RadioButton>\\n                <RadioGroup.RadioButton disabled={props.disabled} {...props}>\\n                  Phone\\n                </RadioGroup.RadioButton>\\n              </RadioGroup>\\n            )}\\n          </ComponentStatesTable>\\n        </StaticStates>\\n        <h3>Radio Group</h3>\\n        <StaticStates>\\n          <ComponentStatesTable\\n            rowProps={permutateProps({\\n              error: [\\n                {value: undefined, label: 'No Error'},\\n                {value: 'caution', label: 'Caution'},\\n                {value: 'error', label: 'Error'},\\n              ],\\n            })}\\n            columnProps={[\\n              {\\n                label: 'Horizontal Start',\\n                props: {label: 'Contact', labelPosition: 'horizontalStart'},\\n              },\\n              {\\n                label: 'Top Label',\\n                props: {label: 'Contact', labelPosition: 'vertical'},\\n              },\\n              {\\n                label: 'Horizontal End',\\n                props: {label: 'Contact', labelPosition: 'horizontalEnd'},\\n              },\\n            ]}\\n          >\\n            {props => (\\n              <FormFieldGroup id={hintId} orientation={props.labelPosition} error={props.error}>\\n                <FormFieldGroup.Label>{props.label}</FormFieldGroup.Label>\\n                <FormFieldGroup.Field>\\n                  {testGroup}\\n                  <FormFieldGroup.Hint>\\n                    {typeof props.error !== 'undefined' ? hintText : undefined}\\n                  </FormFieldGroup.Hint>\\n                </FormFieldGroup.Field>\\n              </FormFieldGroup>\\n            )}\\n          </ComponentStatesTable>\\n        </StaticStates>\\n        <h3>Radio Group (grow)</h3>\\n        <StaticStates>\\n          <ComponentStatesTable\\n            rowProps={permutateProps({\\n              error: [\\n                {value: undefined, label: 'No Error'},\\n                {value: 'caution', label: 'Caution'},\\n                {value: 'error', label: 'Error'},\\n              ],\\n            })}\\n            columnProps={[\\n              {\\n                label: 'Grow',\\n                props: {label: 'Contact', grow: true},\\n              },\\n            ]}\\n          >\\n            {props => (\\n              <FormFieldGroup id={hintId} orientation={'vertical'} error={props.error}>\\n                <FormFieldGroup.Label>{props.label}</FormFieldGroup.Label>\\n                <FormFieldGroup.Field>\\n                  {testGroup}\\n                  <FormFieldGroup.Hint>\\n                    {typeof props.error !== 'undefined' ? hintText : undefined}\\n                  </FormFieldGroup.Hint>\\n                </FormFieldGroup.Field>\\n              </FormFieldGroup>\\n            )}\\n          </ComponentStatesTable>\\n        </StaticStates>\\n        <h3>RadioGroup (wrapping)</h3>\\n        <div style={{maxWidth: 480}}>\\n          <FormFieldGroup orientation=\\\"horizontalStart\\\">\\n            <FormFieldGroup.Label>\\n              Really long label. Really long label. Really long label. Really long label. Really\\n              long label. Really long label.\\n            </FormFieldGroup.Label>\\n            <FormFieldGroup.Field>{testGroup}</FormFieldGroup.Field>\\n          </FormFieldGroup>\\n          <FormFieldGroup>\\n            <FormFieldGroup.Label>\\n              Really long label. Really long label. Really long label. Really long label. Really\\n              long label. Really long label. Really long label. Really long label. Really long\\n              label. Really long label. Really long label. Really long label. Really long label.\\n              Really long label. Really long label. Really long label. Really long label. Really\\n              long label. Really long label. Really long label. Really long label. Really long\\n              label. Really long label. Really long label. Really long label. Really long label.\\n            </FormFieldGroup.Label>\\n            <FormFieldGroup.Field>{testGroup}</FormFieldGroup.Field>\\n          </FormFieldGroup>\\n        </div>\\n      </div>\\n    );\\n  },\\n};\\nexport const InverseRadioStates = {\\n  render: () => (\\n    <div>\\n      <StaticStates>\\n        <ComponentStatesTable\\n          rowProps={permutateProps({\\n            checked: [\\n              {value: true, label: 'Checked'},\\n              {value: false, label: 'Unchecked'},\\n            ],\\n          })}\\n          columnProps={permutateProps(\\n            {\\n              className: [\\n                {label: 'Default', value: ''},\\n                {label: 'Hover', value: 'hover'},\\n                {label: 'Focus', value: 'focus'},\\n                {label: 'Focus Hover', value: 'focus hover'},\\n                {label: 'Active', value: 'active'},\\n                {label: 'Active Hover', value: 'active hover'},\\n              ],\\n              disabled: [\\n                {label: '', value: false},\\n                {label: 'Disabled', value: true},\\n              ],\\n            },\\n            props => {\\n              if (props.disabled && !['', 'hover'].includes(props.className)) {\\n                return false;\\n              }\\n              return true;\\n            }\\n          )}\\n        >\\n          {({disabled, ...props}) => (\\n            <div style={{backgroundColor: '#0875e1', padding: '12px', borderRadius: '4px'}}>\\n              <RadioGroup>\\n                <RadioGroup.Label disabled={disabled} variant=\\\"inverse\\\">\\n                  <RadioGroup.Label.Input {...props} />\\n                  <RadioGroup.Label.Text>Email</RadioGroup.Label.Text>\\n                </RadioGroup.Label>\\n                <RadioGroup.Label disabled={disabled} variant=\\\"inverse\\\">\\n                  <RadioGroup.Label.Input {...props} />\\n                  <RadioGroup.Label.Text>Phone</RadioGroup.Label.Text>\\n                </RadioGroup.Label>\\n              </RadioGroup>\\n            </div>\\n          )}\\n        </ComponentStatesTable>\\n      </StaticStates>\\n    </div>\\n  ),\\n};\\n\\nexport const RadioThemedStates = {\\n  parameters: {\\n    canvasProviderDecorator: {\\n      theme: customColorTheme,\\n    },\\n  },\\n  render: RadioStates.render,\\n};\\n\\nexport const RadioInverseThemedStates = {\\n  parameters: {\\n    canvasProviderDecorator: {\\n      theme: customColorTheme,\\n    },\\n  },\\n  render: InverseRadioStates.render,\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"RadioStates\": {\n    \"startLoc\": {\n      \"col\": 27,\n      \"line\": 42\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 181\n    },\n    \"startBody\": {\n      \"col\": 27,\n      \"line\": 42\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 181\n    }\n  },\n  \"InverseRadioStates\": {\n    \"startLoc\": {\n      \"col\": 34,\n      \"line\": 182\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 234\n    },\n    \"startBody\": {\n      \"col\": 34,\n      \"line\": 182\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 234\n    }\n  },\n  \"RadioThemedStates\": {\n    \"startLoc\": {\n      \"col\": 33,\n      \"line\": 236\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 243\n    },\n    \"startBody\": {\n      \"col\": 33,\n      \"line\": 236\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 243\n    }\n  },\n  \"RadioInverseThemedStates\": {\n    \"startLoc\": {\n      \"col\": 40,\n      \"line\": 245\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 252\n    },\n    \"startBody\": {\n      \"col\": 40,\n      \"line\": 245\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 252\n    }\n  }\n};\n    \nimport React from 'react';\n\nimport {\n  ComponentStatesTable,\n  StaticStates,\n  permutateProps,\n} from '@workday/canvas-kit-react/testing';\nimport {customColorTheme} from '../../../../utils/storybook';\nimport {FormFieldGroup} from '@workday/canvas-kit-react/form-field';\nimport {RadioGroup} from '@workday/canvas-kit-preview-react/radio';\n\nconst hintText = 'Helpful text goes here.';\nconst hintId = 'error-desc-id';\n\nexport default {\n  title: 'Testing/Preview/Radio',\n  component: RadioGroup,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import React from 'react';\\n\\nimport {\\n  ComponentStatesTable,\\n  StaticStates,\\n  permutateProps,\\n} from '@workday/canvas-kit-react/testing';\\nimport {customColorTheme} from '../../../../utils/storybook';\\nimport {FormFieldGroup} from '@workday/canvas-kit-react/form-field';\\nimport {RadioGroup} from '@workday/canvas-kit-preview-react/radio';\\n\\nconst hintText = 'Helpful text goes here.';\\nconst hintId = 'error-desc-id';\\n\\nexport default {\\n  title: 'Testing/Preview/Radio',\\n  component: RadioGroup,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nconst testGroup = (\\n  <FormFieldGroup.List as={RadioGroup} name=\\\"contact\\\" value={'email'}>\\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\\\"1\\\" value=\\\"email\\\">\\n      Email\\n    </FormFieldGroup.Input>\\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\\\"2\\\" value=\\\"phone\\\">\\n      Phone\\n    </FormFieldGroup.Input>\\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\\\"3\\\" disabled={true} value=\\\"fax\\\">\\n      Fax (disabled)\\n    </FormFieldGroup.Input>\\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\\\"4\\\" value=\\\"mail\\\">\\n      \\\"Mail (US Postal Service aka USPS), a longer than normal label\\\"\\n    </FormFieldGroup.Input>\\n  </FormFieldGroup.List>\\n);\\n\\nexport const RadioStates = {\\n  render: () => {\\n    return (\\n      <div>\\n        <StaticStates>\\n          <ComponentStatesTable\\n            rowProps={permutateProps({\\n              checked: [\\n                {value: true, label: 'Checked'},\\n                {value: false, label: 'Unchecked'},\\n              ],\\n            })}\\n            columnProps={permutateProps(\\n              {\\n                className: [\\n                  {label: 'Default', value: ''},\\n                  {label: 'Hover', value: 'hover'},\\n                  {label: 'Focus', value: 'focus'},\\n                  {label: 'Focus Hover', value: 'focus hover'},\\n                  {label: 'Active', value: 'active'},\\n                  {label: 'Active Hover', value: 'active hover'},\\n                ],\\n                disabled: [\\n                  {label: '', value: false},\\n                  {label: 'Disabled', value: true},\\n                ],\\n              },\\n              props => {\\n                if (props.disabled && !['', 'hover'].includes(props.className)) {\\n                  return false;\\n                }\\n                return true;\\n              }\\n            )}\\n          >\\n            {props => (\\n              <RadioGroup>\\n                <RadioGroup.RadioButton disabled={props.disabled} {...props}>\\n                  Email\\n                </RadioGroup.RadioButton>\\n                <RadioGroup.RadioButton disabled={props.disabled} {...props}>\\n                  Phone\\n                </RadioGroup.RadioButton>\\n              </RadioGroup>\\n            )}\\n          </ComponentStatesTable>\\n        </StaticStates>\\n        <h3>Radio Group</h3>\\n        <StaticStates>\\n          <ComponentStatesTable\\n            rowProps={permutateProps({\\n              error: [\\n                {value: undefined, label: 'No Error'},\\n                {value: 'caution', label: 'Caution'},\\n                {value: 'error', label: 'Error'},\\n              ],\\n            })}\\n            columnProps={[\\n              {\\n                label: 'Horizontal Start',\\n                props: {label: 'Contact', labelPosition: 'horizontalStart'},\\n              },\\n              {\\n                label: 'Top Label',\\n                props: {label: 'Contact', labelPosition: 'vertical'},\\n              },\\n              {\\n                label: 'Horizontal End',\\n                props: {label: 'Contact', labelPosition: 'horizontalEnd'},\\n              },\\n            ]}\\n          >\\n            {props => (\\n              <FormFieldGroup id={hintId} orientation={props.labelPosition} error={props.error}>\\n                <FormFieldGroup.Label>{props.label}</FormFieldGroup.Label>\\n                <FormFieldGroup.Field>\\n                  {testGroup}\\n                  <FormFieldGroup.Hint>\\n                    {typeof props.error !== 'undefined' ? hintText : undefined}\\n                  </FormFieldGroup.Hint>\\n                </FormFieldGroup.Field>\\n              </FormFieldGroup>\\n            )}\\n          </ComponentStatesTable>\\n        </StaticStates>\\n        <h3>Radio Group (grow)</h3>\\n        <StaticStates>\\n          <ComponentStatesTable\\n            rowProps={permutateProps({\\n              error: [\\n                {value: undefined, label: 'No Error'},\\n                {value: 'caution', label: 'Caution'},\\n                {value: 'error', label: 'Error'},\\n              ],\\n            })}\\n            columnProps={[\\n              {\\n                label: 'Grow',\\n                props: {label: 'Contact', grow: true},\\n              },\\n            ]}\\n          >\\n            {props => (\\n              <FormFieldGroup id={hintId} orientation={'vertical'} error={props.error}>\\n                <FormFieldGroup.Label>{props.label}</FormFieldGroup.Label>\\n                <FormFieldGroup.Field>\\n                  {testGroup}\\n                  <FormFieldGroup.Hint>\\n                    {typeof props.error !== 'undefined' ? hintText : undefined}\\n                  </FormFieldGroup.Hint>\\n                </FormFieldGroup.Field>\\n              </FormFieldGroup>\\n            )}\\n          </ComponentStatesTable>\\n        </StaticStates>\\n        <h3>RadioGroup (wrapping)</h3>\\n        <div style={{maxWidth: 480}}>\\n          <FormFieldGroup orientation=\\\"horizontalStart\\\">\\n            <FormFieldGroup.Label>\\n              Really long label. Really long label. Really long label. Really long label. Really\\n              long label. Really long label.\\n            </FormFieldGroup.Label>\\n            <FormFieldGroup.Field>{testGroup}</FormFieldGroup.Field>\\n          </FormFieldGroup>\\n          <FormFieldGroup>\\n            <FormFieldGroup.Label>\\n              Really long label. Really long label. Really long label. Really long label. Really\\n              long label. Really long label. Really long label. Really long label. Really long\\n              label. Really long label. Really long label. Really long label. Really long label.\\n              Really long label. Really long label. Really long label. Really long label. Really\\n              long label. Really long label. Really long label. Really long label. Really long\\n              label. Really long label. Really long label. Really long label. Really long label.\\n            </FormFieldGroup.Label>\\n            <FormFieldGroup.Field>{testGroup}</FormFieldGroup.Field>\\n          </FormFieldGroup>\\n        </div>\\n      </div>\\n    );\\n  },\\n};\\nexport const InverseRadioStates = {\\n  render: () => (\\n    <div>\\n      <StaticStates>\\n        <ComponentStatesTable\\n          rowProps={permutateProps({\\n            checked: [\\n              {value: true, label: 'Checked'},\\n              {value: false, label: 'Unchecked'},\\n            ],\\n          })}\\n          columnProps={permutateProps(\\n            {\\n              className: [\\n                {label: 'Default', value: ''},\\n                {label: 'Hover', value: 'hover'},\\n                {label: 'Focus', value: 'focus'},\\n                {label: 'Focus Hover', value: 'focus hover'},\\n                {label: 'Active', value: 'active'},\\n                {label: 'Active Hover', value: 'active hover'},\\n              ],\\n              disabled: [\\n                {label: '', value: false},\\n                {label: 'Disabled', value: true},\\n              ],\\n            },\\n            props => {\\n              if (props.disabled && !['', 'hover'].includes(props.className)) {\\n                return false;\\n              }\\n              return true;\\n            }\\n          )}\\n        >\\n          {({disabled, ...props}) => (\\n            <div style={{backgroundColor: '#0875e1', padding: '12px', borderRadius: '4px'}}>\\n              <RadioGroup>\\n                <RadioGroup.Label disabled={disabled} variant=\\\"inverse\\\">\\n                  <RadioGroup.Label.Input {...props} />\\n                  <RadioGroup.Label.Text>Email</RadioGroup.Label.Text>\\n                </RadioGroup.Label>\\n                <RadioGroup.Label disabled={disabled} variant=\\\"inverse\\\">\\n                  <RadioGroup.Label.Input {...props} />\\n                  <RadioGroup.Label.Text>Phone</RadioGroup.Label.Text>\\n                </RadioGroup.Label>\\n              </RadioGroup>\\n            </div>\\n          )}\\n        </ComponentStatesTable>\\n      </StaticStates>\\n    </div>\\n  ),\\n};\\n\\nexport const RadioThemedStates = {\\n  parameters: {\\n    canvasProviderDecorator: {\\n      theme: customColorTheme,\\n    },\\n  },\\n  render: RadioStates.render,\\n};\\n\\nexport const RadioInverseThemedStates = {\\n  parameters: {\\n    canvasProviderDecorator: {\\n      theme: customColorTheme,\\n    },\\n  },\\n  render: InverseRadioStates.render,\\n};\\n\",\n    \"locationsMap\": {\n      \"radio-states\": {\n        \"startLoc\": {\n          \"col\": 27,\n          \"line\": 42\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 181\n        },\n        \"startBody\": {\n          \"col\": 27,\n          \"line\": 42\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 181\n        }\n      },\n      \"inverse-radio-states\": {\n        \"startLoc\": {\n          \"col\": 34,\n          \"line\": 182\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 234\n        },\n        \"startBody\": {\n          \"col\": 34,\n          \"line\": 182\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 234\n        }\n      },\n      \"radio-themed-states\": {\n        \"startLoc\": {\n          \"col\": 33,\n          \"line\": 236\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 243\n        },\n        \"startBody\": {\n          \"col\": 33,\n          \"line\": 236\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 243\n        }\n      },\n      \"radio-inverse-themed-states\": {\n        \"startLoc\": {\n          \"col\": 40,\n          \"line\": 245\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 252\n        },\n        \"startBody\": {\n          \"col\": 40,\n          \"line\": 245\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 252\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nconst testGroup = (\n  <FormFieldGroup.List as={RadioGroup} name=\"contact\" value={'email'}>\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\"1\" value=\"email\">\n      Email\n    </FormFieldGroup.Input>\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\"2\" value=\"phone\">\n      Phone\n    </FormFieldGroup.Input>\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\"3\" disabled={true} value=\"fax\">\n      Fax (disabled)\n    </FormFieldGroup.Input>\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\"4\" value=\"mail\">\n      \"Mail (US Postal Service aka USPS), a longer than normal label\"\n    </FormFieldGroup.Input>\n  </FormFieldGroup.List>\n);\n\nexport const RadioStates = {\n  render: () => {\n    return (\n      <div>\n        <StaticStates>\n          <ComponentStatesTable\n            rowProps={permutateProps({\n              checked: [\n                {value: true, label: 'Checked'},\n                {value: false, label: 'Unchecked'},\n              ],\n            })}\n            columnProps={permutateProps(\n              {\n                className: [\n                  {label: 'Default', value: ''},\n                  {label: 'Hover', value: 'hover'},\n                  {label: 'Focus', value: 'focus'},\n                  {label: 'Focus Hover', value: 'focus hover'},\n                  {label: 'Active', value: 'active'},\n                  {label: 'Active Hover', value: 'active hover'},\n                ],\n                disabled: [\n                  {label: '', value: false},\n                  {label: 'Disabled', value: true},\n                ],\n              },\n              props => {\n                if (props.disabled && !['', 'hover'].includes(props.className)) {\n                  return false;\n                }\n                return true;\n              }\n            )}\n          >\n            {props => (\n              <RadioGroup>\n                <RadioGroup.RadioButton disabled={props.disabled} {...props}>\n                  Email\n                </RadioGroup.RadioButton>\n                <RadioGroup.RadioButton disabled={props.disabled} {...props}>\n                  Phone\n                </RadioGroup.RadioButton>\n              </RadioGroup>\n            )}\n          </ComponentStatesTable>\n        </StaticStates>\n        <h3>Radio Group</h3>\n        <StaticStates>\n          <ComponentStatesTable\n            rowProps={permutateProps({\n              error: [\n                {value: undefined, label: 'No Error'},\n                {value: 'caution', label: 'Caution'},\n                {value: 'error', label: 'Error'},\n              ],\n            })}\n            columnProps={[\n              {\n                label: 'Horizontal Start',\n                props: {label: 'Contact', labelPosition: 'horizontalStart'},\n              },\n              {\n                label: 'Top Label',\n                props: {label: 'Contact', labelPosition: 'vertical'},\n              },\n              {\n                label: 'Horizontal End',\n                props: {label: 'Contact', labelPosition: 'horizontalEnd'},\n              },\n            ]}\n          >\n            {props => (\n              <FormFieldGroup id={hintId} orientation={props.labelPosition} error={props.error}>\n                <FormFieldGroup.Label>{props.label}</FormFieldGroup.Label>\n                <FormFieldGroup.Field>\n                  {testGroup}\n                  <FormFieldGroup.Hint>\n                    {typeof props.error !== 'undefined' ? hintText : undefined}\n                  </FormFieldGroup.Hint>\n                </FormFieldGroup.Field>\n              </FormFieldGroup>\n            )}\n          </ComponentStatesTable>\n        </StaticStates>\n        <h3>Radio Group (grow)</h3>\n        <StaticStates>\n          <ComponentStatesTable\n            rowProps={permutateProps({\n              error: [\n                {value: undefined, label: 'No Error'},\n                {value: 'caution', label: 'Caution'},\n                {value: 'error', label: 'Error'},\n              ],\n            })}\n            columnProps={[\n              {\n                label: 'Grow',\n                props: {label: 'Contact', grow: true},\n              },\n            ]}\n          >\n            {props => (\n              <FormFieldGroup id={hintId} orientation={'vertical'} error={props.error}>\n                <FormFieldGroup.Label>{props.label}</FormFieldGroup.Label>\n                <FormFieldGroup.Field>\n                  {testGroup}\n                  <FormFieldGroup.Hint>\n                    {typeof props.error !== 'undefined' ? hintText : undefined}\n                  </FormFieldGroup.Hint>\n                </FormFieldGroup.Field>\n              </FormFieldGroup>\n            )}\n          </ComponentStatesTable>\n        </StaticStates>\n        <h3>RadioGroup (wrapping)</h3>\n        <div style={{maxWidth: 480}}>\n          <FormFieldGroup orientation=\"horizontalStart\">\n            <FormFieldGroup.Label>\n              Really long label. Really long label. Really long label. Really long label. Really\n              long label. Really long label.\n            </FormFieldGroup.Label>\n            <FormFieldGroup.Field>{testGroup}</FormFieldGroup.Field>\n          </FormFieldGroup>\n          <FormFieldGroup>\n            <FormFieldGroup.Label>\n              Really long label. Really long label. Really long label. Really long label. Really\n              long label. Really long label. Really long label. Really long label. Really long\n              label. Really long label. Really long label. Really long label. Really long label.\n              Really long label. Really long label. Really long label. Really long label. Really\n              long label. Really long label. Really long label. Really long label. Really long\n              label. Really long label. Really long label. Really long label. Really long label.\n            </FormFieldGroup.Label>\n            <FormFieldGroup.Field>{testGroup}</FormFieldGroup.Field>\n          </FormFieldGroup>\n        </div>\n      </div>\n    );\n  },\n};;\nexport const InverseRadioStates = {\n  render: () => (\n    <div>\n      <StaticStates>\n        <ComponentStatesTable\n          rowProps={permutateProps({\n            checked: [\n              {value: true, label: 'Checked'},\n              {value: false, label: 'Unchecked'},\n            ],\n          })}\n          columnProps={permutateProps(\n            {\n              className: [\n                {label: 'Default', value: ''},\n                {label: 'Hover', value: 'hover'},\n                {label: 'Focus', value: 'focus'},\n                {label: 'Focus Hover', value: 'focus hover'},\n                {label: 'Active', value: 'active'},\n                {label: 'Active Hover', value: 'active hover'},\n              ],\n              disabled: [\n                {label: '', value: false},\n                {label: 'Disabled', value: true},\n              ],\n            },\n            props => {\n              if (props.disabled && !['', 'hover'].includes(props.className)) {\n                return false;\n              }\n              return true;\n            }\n          )}\n        >\n          {({disabled, ...props}) => (\n            <div style={{backgroundColor: '#0875e1', padding: '12px', borderRadius: '4px'}}>\n              <RadioGroup>\n                <RadioGroup.Label disabled={disabled} variant=\"inverse\">\n                  <RadioGroup.Label.Input {...props} />\n                  <RadioGroup.Label.Text>Email</RadioGroup.Label.Text>\n                </RadioGroup.Label>\n                <RadioGroup.Label disabled={disabled} variant=\"inverse\">\n                  <RadioGroup.Label.Input {...props} />\n                  <RadioGroup.Label.Text>Phone</RadioGroup.Label.Text>\n                </RadioGroup.Label>\n              </RadioGroup>\n            </div>\n          )}\n        </ComponentStatesTable>\n      </StaticStates>\n    </div>\n  ),\n};;\n\nexport const RadioThemedStates = {\n  parameters: {\n    canvasProviderDecorator: {\n      theme: customColorTheme,\n    },\n  },\n  render: RadioStates.render,\n};;\n\nexport const RadioInverseThemedStates = {\n  parameters: {\n    canvasProviderDecorator: {\n      theme: customColorTheme,\n    },\n  },\n  render: InverseRadioStates.render,\n};\n",locationsMap:{"radio-states":{startLoc:{col:27,line:201},endLoc:{col:1,line:340},startBody:{col:27,line:201},endBody:{col:1,line:340}},"inverse-radio-states":{startLoc:{col:34,line:341},endLoc:{col:1,line:393},startBody:{col:34,line:341},endBody:{col:1,line:393}},"radio-themed-states":{startLoc:{col:33,line:395},endLoc:{col:1,line:402},startBody:{col:33,line:395},endBody:{col:1,line:402}},"radio-inverse-themed-states":{startLoc:{col:40,line:404},endLoc:{col:1,line:411},startBody:{col:40,line:404},endBody:{col:1,line:411}}}},storySource:{source:"import React from 'react';\n\nimport {\n  ComponentStatesTable,\n  StaticStates,\n  permutateProps,\n} from '@workday/canvas-kit-react/testing';\nimport {customColorTheme} from '../../../../utils/storybook';\nimport {FormFieldGroup} from '@workday/canvas-kit-react/form-field';\nimport {RadioGroup} from '@workday/canvas-kit-preview-react/radio';\n\nconst hintText = 'Helpful text goes here.';\nconst hintId = 'error-desc-id';\n\nexport default {\n  title: 'Testing/Preview/Radio',\n  component: RadioGroup,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nconst testGroup = (\n  <FormFieldGroup.List as={RadioGroup} name=\"contact\" value={'email'}>\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\"1\" value=\"email\">\n      Email\n    </FormFieldGroup.Input>\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\"2\" value=\"phone\">\n      Phone\n    </FormFieldGroup.Input>\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\"3\" disabled={true} value=\"fax\">\n      Fax (disabled)\n    </FormFieldGroup.Input>\n    <FormFieldGroup.Input as={RadioGroup.RadioButton} id=\"4\" value=\"mail\">\n      \"Mail (US Postal Service aka USPS), a longer than normal label\"\n    </FormFieldGroup.Input>\n  </FormFieldGroup.List>\n);\n\nexport const RadioStates = {\n  render: () => {\n    return (\n      <div>\n        <StaticStates>\n          <ComponentStatesTable\n            rowProps={permutateProps({\n              checked: [\n                {value: true, label: 'Checked'},\n                {value: false, label: 'Unchecked'},\n              ],\n            })}\n            columnProps={permutateProps(\n              {\n                className: [\n                  {label: 'Default', value: ''},\n                  {label: 'Hover', value: 'hover'},\n                  {label: 'Focus', value: 'focus'},\n                  {label: 'Focus Hover', value: 'focus hover'},\n                  {label: 'Active', value: 'active'},\n                  {label: 'Active Hover', value: 'active hover'},\n                ],\n                disabled: [\n                  {label: '', value: false},\n                  {label: 'Disabled', value: true},\n                ],\n              },\n              props => {\n                if (props.disabled && !['', 'hover'].includes(props.className)) {\n                  return false;\n                }\n                return true;\n              }\n            )}\n          >\n            {props => (\n              <RadioGroup>\n                <RadioGroup.RadioButton disabled={props.disabled} {...props}>\n                  Email\n                </RadioGroup.RadioButton>\n                <RadioGroup.RadioButton disabled={props.disabled} {...props}>\n                  Phone\n                </RadioGroup.RadioButton>\n              </RadioGroup>\n            )}\n          </ComponentStatesTable>\n        </StaticStates>\n        <h3>Radio Group</h3>\n        <StaticStates>\n          <ComponentStatesTable\n            rowProps={permutateProps({\n              error: [\n                {value: undefined, label: 'No Error'},\n                {value: 'caution', label: 'Caution'},\n                {value: 'error', label: 'Error'},\n              ],\n            })}\n            columnProps={[\n              {\n                label: 'Horizontal Start',\n                props: {label: 'Contact', labelPosition: 'horizontalStart'},\n              },\n              {\n                label: 'Top Label',\n                props: {label: 'Contact', labelPosition: 'vertical'},\n              },\n              {\n                label: 'Horizontal End',\n                props: {label: 'Contact', labelPosition: 'horizontalEnd'},\n              },\n            ]}\n          >\n            {props => (\n              <FormFieldGroup id={hintId} orientation={props.labelPosition} error={props.error}>\n                <FormFieldGroup.Label>{props.label}</FormFieldGroup.Label>\n                <FormFieldGroup.Field>\n                  {testGroup}\n                  <FormFieldGroup.Hint>\n                    {typeof props.error !== 'undefined' ? hintText : undefined}\n                  </FormFieldGroup.Hint>\n                </FormFieldGroup.Field>\n              </FormFieldGroup>\n            )}\n          </ComponentStatesTable>\n        </StaticStates>\n        <h3>Radio Group (grow)</h3>\n        <StaticStates>\n          <ComponentStatesTable\n            rowProps={permutateProps({\n              error: [\n                {value: undefined, label: 'No Error'},\n                {value: 'caution', label: 'Caution'},\n                {value: 'error', label: 'Error'},\n              ],\n            })}\n            columnProps={[\n              {\n                label: 'Grow',\n                props: {label: 'Contact', grow: true},\n              },\n            ]}\n          >\n            {props => (\n              <FormFieldGroup id={hintId} orientation={'vertical'} error={props.error}>\n                <FormFieldGroup.Label>{props.label}</FormFieldGroup.Label>\n                <FormFieldGroup.Field>\n                  {testGroup}\n                  <FormFieldGroup.Hint>\n                    {typeof props.error !== 'undefined' ? hintText : undefined}\n                  </FormFieldGroup.Hint>\n                </FormFieldGroup.Field>\n              </FormFieldGroup>\n            )}\n          </ComponentStatesTable>\n        </StaticStates>\n        <h3>RadioGroup (wrapping)</h3>\n        <div style={{maxWidth: 480}}>\n          <FormFieldGroup orientation=\"horizontalStart\">\n            <FormFieldGroup.Label>\n              Really long label. Really long label. Really long label. Really long label. Really\n              long label. Really long label.\n            </FormFieldGroup.Label>\n            <FormFieldGroup.Field>{testGroup}</FormFieldGroup.Field>\n          </FormFieldGroup>\n          <FormFieldGroup>\n            <FormFieldGroup.Label>\n              Really long label. Really long label. Really long label. Really long label. Really\n              long label. Really long label. Really long label. Really long label. Really long\n              label. Really long label. Really long label. Really long label. Really long label.\n              Really long label. Really long label. Really long label. Really long label. Really\n              long label. Really long label. Really long label. Really long label. Really long\n              label. Really long label. Really long label. Really long label. Really long label.\n            </FormFieldGroup.Label>\n            <FormFieldGroup.Field>{testGroup}</FormFieldGroup.Field>\n          </FormFieldGroup>\n        </div>\n      </div>\n    );\n  },\n};\nexport const InverseRadioStates = {\n  render: () => (\n    <div>\n      <StaticStates>\n        <ComponentStatesTable\n          rowProps={permutateProps({\n            checked: [\n              {value: true, label: 'Checked'},\n              {value: false, label: 'Unchecked'},\n            ],\n          })}\n          columnProps={permutateProps(\n            {\n              className: [\n                {label: 'Default', value: ''},\n                {label: 'Hover', value: 'hover'},\n                {label: 'Focus', value: 'focus'},\n                {label: 'Focus Hover', value: 'focus hover'},\n                {label: 'Active', value: 'active'},\n                {label: 'Active Hover', value: 'active hover'},\n              ],\n              disabled: [\n                {label: '', value: false},\n                {label: 'Disabled', value: true},\n              ],\n            },\n            props => {\n              if (props.disabled && !['', 'hover'].includes(props.className)) {\n                return false;\n              }\n              return true;\n            }\n          )}\n        >\n          {({disabled, ...props}) => (\n            <div style={{backgroundColor: '#0875e1', padding: '12px', borderRadius: '4px'}}>\n              <RadioGroup>\n                <RadioGroup.Label disabled={disabled} variant=\"inverse\">\n                  <RadioGroup.Label.Input {...props} />\n                  <RadioGroup.Label.Text>Email</RadioGroup.Label.Text>\n                </RadioGroup.Label>\n                <RadioGroup.Label disabled={disabled} variant=\"inverse\">\n                  <RadioGroup.Label.Input {...props} />\n                  <RadioGroup.Label.Text>Phone</RadioGroup.Label.Text>\n                </RadioGroup.Label>\n              </RadioGroup>\n            </div>\n          )}\n        </ComponentStatesTable>\n      </StaticStates>\n    </div>\n  ),\n};\n\nexport const RadioThemedStates = {\n  parameters: {\n    canvasProviderDecorator: {\n      theme: customColorTheme,\n    },\n  },\n  render: RadioStates.render,\n};\n\nexport const RadioInverseThemedStates = {\n  parameters: {\n    canvasProviderDecorator: {\n      theme: customColorTheme,\n    },\n  },\n  render: InverseRadioStates.render,\n};\n",locationsMap:{"radio-states":{startLoc:{col:27,line:42},endLoc:{col:1,line:181},startBody:{col:27,line:42},endBody:{col:1,line:181}},"inverse-radio-states":{startLoc:{col:34,line:182},endLoc:{col:1,line:234},startBody:{col:34,line:182},endBody:{col:1,line:234}},"radio-themed-states":{startLoc:{col:33,line:236},endLoc:{col:1,line:243},startBody:{col:33,line:236},endBody:{col:1,line:243}},"radio-inverse-themed-states":{startLoc:{col:40,line:245},endLoc:{col:1,line:252},startBody:{col:40,line:245},endBody:{col:1,line:252}}}},chromatic:{disable:!1}}};const testGroup=(0,_jsxRuntime.jsxs)(_formField.FormFieldGroup.List,{as:_radio.RadioGroup,name:"contact",value:"email",children:[(0,_jsxRuntime.jsx)(_formField.FormFieldGroup.Input,{as:_radio.RadioGroup.RadioButton,id:"1",value:"email",children:"Email"}),(0,_jsxRuntime.jsx)(_formField.FormFieldGroup.Input,{as:_radio.RadioGroup.RadioButton,id:"2",value:"phone",children:"Phone"}),(0,_jsxRuntime.jsx)(_formField.FormFieldGroup.Input,{as:_radio.RadioGroup.RadioButton,id:"3",disabled:!0,value:"fax",children:"Fax (disabled)"}),(0,_jsxRuntime.jsx)(_formField.FormFieldGroup.Input,{as:_radio.RadioGroup.RadioButton,id:"4",value:"mail",children:'"Mail (US Postal Service aka USPS), a longer than normal label"'})]}),RadioStates=exports.RadioStates={render:()=>(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({checked:[{value:!0,label:"Checked"},{value:!1,label:"Unchecked"}]}),columnProps:(0,_testing.permutateProps)({className:[{label:"Default",value:""},{label:"Hover",value:"hover"},{label:"Focus",value:"focus"},{label:"Focus Hover",value:"focus hover"},{label:"Active",value:"active"},{label:"Active Hover",value:"active hover"}],disabled:[{label:"",value:!1},{label:"Disabled",value:!0}]},(props=>!(props.disabled&&!["","hover"].includes(props.className)))),children:props=>(0,_jsxRuntime.jsxs)(_radio.RadioGroup,{children:[(0,_jsxRuntime.jsx)(_radio.RadioGroup.RadioButton,{disabled:props.disabled,...props,children:"Email"}),(0,_jsxRuntime.jsx)(_radio.RadioGroup.RadioButton,{disabled:props.disabled,...props,children:"Phone"})]})})}),(0,_jsxRuntime.jsx)("h3",{children:"Radio Group"}),(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({error:[{value:void 0,label:"No Error"},{value:"caution",label:"Caution"},{value:"error",label:"Error"}]}),columnProps:[{label:"Horizontal Start",props:{label:"Contact",labelPosition:"horizontalStart"}},{label:"Top Label",props:{label:"Contact",labelPosition:"vertical"}},{label:"Horizontal End",props:{label:"Contact",labelPosition:"horizontalEnd"}}],children:props=>(0,_jsxRuntime.jsxs)(_formField.FormFieldGroup,{id:"error-desc-id",orientation:props.labelPosition,error:props.error,children:[(0,_jsxRuntime.jsx)(_formField.FormFieldGroup.Label,{children:props.label}),(0,_jsxRuntime.jsxs)(_formField.FormFieldGroup.Field,{children:[testGroup,(0,_jsxRuntime.jsx)(_formField.FormFieldGroup.Hint,{children:void 0!==props.error?"Helpful text goes here.":void 0})]})]})})}),(0,_jsxRuntime.jsx)("h3",{children:"Radio Group (grow)"}),(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({error:[{value:void 0,label:"No Error"},{value:"caution",label:"Caution"},{value:"error",label:"Error"}]}),columnProps:[{label:"Grow",props:{label:"Contact",grow:!0}}],children:props=>(0,_jsxRuntime.jsxs)(_formField.FormFieldGroup,{id:"error-desc-id",orientation:"vertical",error:props.error,children:[(0,_jsxRuntime.jsx)(_formField.FormFieldGroup.Label,{children:props.label}),(0,_jsxRuntime.jsxs)(_formField.FormFieldGroup.Field,{children:[testGroup,(0,_jsxRuntime.jsx)(_formField.FormFieldGroup.Hint,{children:void 0!==props.error?"Helpful text goes here.":void 0})]})]})})}),(0,_jsxRuntime.jsx)("h3",{children:"RadioGroup (wrapping)"}),(0,_jsxRuntime.jsxs)("div",{style:{maxWidth:480},children:[(0,_jsxRuntime.jsxs)(_formField.FormFieldGroup,{orientation:"horizontalStart",children:[(0,_jsxRuntime.jsx)(_formField.FormFieldGroup.Label,{children:"Really long label. Really long label. Really long label. Really long label. Really long label. Really long label."}),(0,_jsxRuntime.jsx)(_formField.FormFieldGroup.Field,{children:testGroup})]}),(0,_jsxRuntime.jsxs)(_formField.FormFieldGroup,{children:[(0,_jsxRuntime.jsx)(_formField.FormFieldGroup.Label,{children:"Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label."}),(0,_jsxRuntime.jsx)(_formField.FormFieldGroup.Field,{children:testGroup})]})]})]})},InverseRadioStates=exports.InverseRadioStates={render:()=>(0,_jsxRuntime.jsx)("div",{children:(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({checked:[{value:!0,label:"Checked"},{value:!1,label:"Unchecked"}]}),columnProps:(0,_testing.permutateProps)({className:[{label:"Default",value:""},{label:"Hover",value:"hover"},{label:"Focus",value:"focus"},{label:"Focus Hover",value:"focus hover"},{label:"Active",value:"active"},{label:"Active Hover",value:"active hover"}],disabled:[{label:"",value:!1},{label:"Disabled",value:!0}]},(props=>!(props.disabled&&!["","hover"].includes(props.className)))),children:({disabled,...props})=>(0,_jsxRuntime.jsx)("div",{style:{backgroundColor:"#0875e1",padding:"12px",borderRadius:"4px"},children:(0,_jsxRuntime.jsxs)(_radio.RadioGroup,{children:[(0,_jsxRuntime.jsxs)(_radio.RadioGroup.Label,{disabled,variant:"inverse",children:[(0,_jsxRuntime.jsx)(_radio.RadioGroup.Label.Input,{...props}),(0,_jsxRuntime.jsx)(_radio.RadioGroup.Label.Text,{children:"Email"})]}),(0,_jsxRuntime.jsxs)(_radio.RadioGroup.Label,{disabled,variant:"inverse",children:[(0,_jsxRuntime.jsx)(_radio.RadioGroup.Label.Input,{...props}),(0,_jsxRuntime.jsx)(_radio.RadioGroup.Label.Text,{children:"Phone"})]})]})})})})})};exports.RadioThemedStates={parameters:{canvasProviderDecorator:{theme:_storybook.customColorTheme}},render:RadioStates.render},exports.RadioInverseThemedStates={parameters:{canvasProviderDecorator:{theme:_storybook.customColorTheme}},render:InverseRadioStates.render};module.exports.__namedExportsOrder=["RadioThemedStates","RadioStates","RadioInverseThemedStates","InverseRadioStates"]}}]);