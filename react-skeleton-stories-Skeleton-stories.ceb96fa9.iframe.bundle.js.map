{"version":3,"file":"react-skeleton-stories-Skeleton-stories.ceb96fa9.iframe.bundle.js","mappings":";;;;;;;;AA0BA","sources":["webpack://canvas-kit/./modules/react/skeleton/stories/examples/Simulation.tsx"],"sourcesContent":["import React from 'react';\nimport {keyframes} from '@emotion/react';\n\nimport {Card} from '@workday/canvas-kit-react/card';\nimport {Checkbox} from '@workday/canvas-kit-react/checkbox';\nimport {FormField} from '@workday/canvas-kit-react/form-field';\nimport {SecondaryButton} from '@workday/canvas-kit-react/button';\nimport {SystemIconCircle} from '@workday/canvas-kit-react/icon';\nimport {TextInput} from '@workday/canvas-kit-react/text-input';\nimport {Box, Flex} from '@workday/canvas-kit-react/layout';\nimport {Skeleton} from '@workday/canvas-kit-react/skeleton';\nimport {borderRadius, space} from '@workday/canvas-kit-react/tokens';\nimport {patternIcon} from '@workday/canvas-system-icons-web';\nimport {styled, StyledType} from '@workday/canvas-kit-react/common';\nimport {Heading} from '@workday/canvas-kit-react/text';\n\nconst fadeOut = keyframes`\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n`;\n\nconst StyledSimulation = styled(Box)<StyledType>({\n  pointerEvents: 'none',\n});\n\nexport const Simulation = () => {\n  const [loading, setLoading] = React.useState(true);\n  const [loadTime, setLoadTime] = React.useState('3000');\n  const timer = React.useRef(0);\n  const loadTimeValue = React.useRef(parseFloat(loadTime));\n\n  const resetTimeout = () => {\n    setLoading(true);\n    window.clearTimeout(timer.current);\n    timer.current = window.setTimeout(() => {\n      setLoading(false);\n    }, loadTimeValue.current);\n    return () => {\n      window.clearTimeout(timer.current);\n    };\n  };\n\n  const onChangeLoading = (event: React.ChangeEvent<HTMLInputElement>) => {\n    window.clearTimeout(timer.current);\n    setLoading(event.target.checked);\n  };\n\n  const onChangeLoadTime = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setLoadTime(event.currentTarget.value);\n    const value = parseInt(event.currentTarget.value, 10);\n\n    if (value) {\n      loadTimeValue.current = value;\n    }\n  };\n\n  React.useEffect(resetTimeout, []);\n\n  return (\n    <Box>\n      <Box marginBottom=\"l\">\n        <FormField orientation=\"horizontalStart\">\n          <FormField.Label>Load Time</FormField.Label>\n          <FormField.Input as={TextInput} onChange={onChangeLoadTime} value={loadTime} />\n        </FormField>\n        <FormField orientation=\"horizontalStart\">\n          <FormField.Label>Loading</FormField.Label>\n          <FormField.Input as={Checkbox} checked={loading} onChange={onChangeLoading} />\n        </FormField>\n        <SecondaryButton onClick={resetTimeout}>Simulate Loading</SecondaryButton>\n      </Box>\n      <Card>\n        <Card.Body>\n          <Box minHeight={180} position=\"relative\">\n            {loading ? (\n              <StyledSimulation\n                position=\"absolute\"\n                top={0}\n                left={0}\n                width=\"100%\"\n                animation={!loading ? `${fadeOut} 150ms ease-out forwards` : undefined}\n              >\n                <Skeleton>\n                  <Flex alignItems=\"center\">\n                    <Skeleton.Shape\n                      width={space.xl}\n                      height={space.xl}\n                      borderRadius={borderRadius.circle}\n                    />\n                    <Box flex={1} marginLeft=\"xs\">\n                      <Skeleton.Header />\n                    </Box>\n                  </Flex>\n                  <Skeleton.Text lineCount={3} />\n                </Skeleton>\n              </StyledSimulation>\n            ) : (\n              <Box>\n                <Flex alignItems=\"center\" display=\"inline-flex\" marginBottom=\"s\">\n                  <SystemIconCircle icon={patternIcon} />\n                  <Heading as=\"h3\" size=\"small\" margin={`0 0 0 ${space.xxs}`}>\n                    Patterns\n                  </Heading>\n                </Flex>\n                <p>\n                  Canvas Patterns classify and document reusable solutions built to respond to\n                  common user scenarios. Following these guidelines allows us to design experiences\n                  that feel consistent and natural for users as they move between applications and\n                  ensures that our approach aligns with industry standards.\n                </p>\n              </Box>\n            )}\n          </Box>\n        </Card.Body>\n      </Card>\n    </Box>\n  );\n};\n\nSimulation.__RAW__ = \"import React from 'react';\\nimport {keyframes} from '@emotion/react';\\n\\nimport {Card} from '@workday/canvas-kit-react/card';\\nimport {Checkbox} from '@workday/canvas-kit-react/checkbox';\\nimport {FormField} from '@workday/canvas-kit-react/form-field';\\nimport {SecondaryButton} from '@workday/canvas-kit-react/button';\\nimport {SystemIconCircle} from '@workday/canvas-kit-react/icon';\\nimport {TextInput} from '@workday/canvas-kit-react/text-input';\\nimport {Box, Flex} from '@workday/canvas-kit-react/layout';\\nimport {Skeleton} from '@workday/canvas-kit-react/skeleton';\\nimport {borderRadius, space} from '@workday/canvas-kit-react/tokens';\\nimport {patternIcon} from '@workday/canvas-system-icons-web';\\nimport {styled, StyledType} from '@workday/canvas-kit-react/common';\\nimport {Heading} from '@workday/canvas-kit-react/text';\\n\\nconst fadeOut = keyframes`\\n  from {\\n    opacity: 1;\\n  }\\n\\n  to {\\n    opacity: 0;\\n  }\\n`;\\n\\nconst StyledSimulation = styled(Box)<StyledType>({\\n  pointerEvents: 'none',\\n});\\n\\nexport const Simulation = () => {\\n  const [loading, setLoading] = React.useState(true);\\n  const [loadTime, setLoadTime] = React.useState('3000');\\n  const timer = React.useRef(0);\\n  const loadTimeValue = React.useRef(parseFloat(loadTime));\\n\\n  const resetTimeout = () => {\\n    setLoading(true);\\n    window.clearTimeout(timer.current);\\n    timer.current = window.setTimeout(() => {\\n      setLoading(false);\\n    }, loadTimeValue.current);\\n    return () => {\\n      window.clearTimeout(timer.current);\\n    };\\n  };\\n\\n  const onChangeLoading = (event: React.ChangeEvent<HTMLInputElement>) => {\\n    window.clearTimeout(timer.current);\\n    setLoading(event.target.checked);\\n  };\\n\\n  const onChangeLoadTime = (event: React.ChangeEvent<HTMLInputElement>) => {\\n    setLoadTime(event.currentTarget.value);\\n    const value = parseInt(event.currentTarget.value, 10);\\n\\n    if (value) {\\n      loadTimeValue.current = value;\\n    }\\n  };\\n\\n  React.useEffect(resetTimeout, []);\\n\\n  return (\\n    <Box>\\n      <Box marginBottom=\\\"l\\\">\\n        <FormField orientation=\\\"horizontalStart\\\">\\n          <FormField.Label>Load Time</FormField.Label>\\n          <FormField.Input as={TextInput} onChange={onChangeLoadTime} value={loadTime} />\\n        </FormField>\\n        <FormField orientation=\\\"horizontalStart\\\">\\n          <FormField.Label>Loading</FormField.Label>\\n          <FormField.Input as={Checkbox} checked={loading} onChange={onChangeLoading} />\\n        </FormField>\\n        <SecondaryButton onClick={resetTimeout}>Simulate Loading</SecondaryButton>\\n      </Box>\\n      <Card>\\n        <Card.Body>\\n          <Box minHeight={180} position=\\\"relative\\\">\\n            {loading ? (\\n              <StyledSimulation\\n                position=\\\"absolute\\\"\\n                top={0}\\n                left={0}\\n                width=\\\"100%\\\"\\n                animation={!loading ? `${fadeOut} 150ms ease-out forwards` : undefined}\\n              >\\n                <Skeleton>\\n                  <Flex alignItems=\\\"center\\\">\\n                    <Skeleton.Shape\\n                      width={space.xl}\\n                      height={space.xl}\\n                      borderRadius={borderRadius.circle}\\n                    />\\n                    <Box flex={1} marginLeft=\\\"xs\\\">\\n                      <Skeleton.Header />\\n                    </Box>\\n                  </Flex>\\n                  <Skeleton.Text lineCount={3} />\\n                </Skeleton>\\n              </StyledSimulation>\\n            ) : (\\n              <Box>\\n                <Flex alignItems=\\\"center\\\" display=\\\"inline-flex\\\" marginBottom=\\\"s\\\">\\n                  <SystemIconCircle icon={patternIcon} />\\n                  <Heading as=\\\"h3\\\" size=\\\"small\\\" margin={`0 0 0 ${space.xxs}`}>\\n                    Patterns\\n                  </Heading>\\n                </Flex>\\n                <p>\\n                  Canvas Patterns classify and document reusable solutions built to respond to\\n                  common user scenarios. Following these guidelines allows us to design experiences\\n                  that feel consistent and natural for users as they move between applications and\\n                  ensures that our approach aligns with industry standards.\\n                </p>\\n              </Box>\\n            )}\\n          </Box>\\n        </Card.Body>\\n      </Card>\\n    </Box>\\n  );\\n};\\n\";\n"],"names":[],"sourceRoot":""}