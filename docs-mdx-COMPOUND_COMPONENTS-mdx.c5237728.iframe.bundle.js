/*! For license information please see docs-mdx-COMPOUND_COMPONENTS-mdx.c5237728.iframe.bundle.js.LICENSE.txt */
"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[8339],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{BN:()=>MDXContext,RP:()=>useMDXComponents,gz:()=>withMDXComponents,xA:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./node_modules/@storybook/addon-docs/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W8:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.W8});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./modules/docs/mdx/COMPOUND_COMPONENTS.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs");function _createMdxContent(props){const _components=Object.assign({h1:"h1",h2:"h2",blockquote:"blockquote",p:"p",ul:"ul",li:"li",a:"a",pre:"pre",code:"code",h3:"h3",h4:"h4",em:"em"},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__.RP)(),props.components);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.W8,{title:"Guides/Compound Components"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"compound-components",children:"Compound Components"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"what-is-a-compound-component",children:"What is a compound component?"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.blockquote,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Compound components is a pattern where higher level components are composed using smaller\ncomponents, and you retain access to all the semantic elements of the higher level component."}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#container-components",children:"Container component"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#subcomponents",children:"Subcomponents"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#models",children:"Shared model (optional, advanced)"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#behavior-hooks",children:"Behavior hooks (optional, advanced)"})}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"A compound component contrasts with a configuration component which instead configures from a single\ninterface, like a configuration object or multiple props in React. A configuration component might\nbe like choosing a desktop computer based on stats - how much RAM or how fast the CPU should be or\nbased on what you want to use it for. A compound component is more like buying the parts\nindividually and assembling yourself."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Configuration component:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"<Tabs\n  items={[\n    {title: 'First Tab', content: 'First Tab Contents'},\n    {title: 'Second Tab', content: 'Second Tab Contents'},\n  ]}\n/>\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Compound component:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"<Tabs>\n  <Tabs.List>\n    <Tabs.Item>First Tab</Tabs.Item>\n    <Tabs.Item>Second Tab</Tabs.Item>\n  </Tabs.List>\n  <Tabs.Panel>First Tab Contents</Tabs.Panel>\n  <Tabs.Panel>Second Tab Contents</Tabs.Panel>\n</Tabs>\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["In this example, ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tabs"})," is the container component and ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tabs.List"})," is a subcomponent."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Some compound components might not contain state or behavior. An example might be an ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"IconButton"}),"\nwhich is a button that contains an icon. It might be a compound component only for styling purposes,\nbut doesn't contain any special state or behaviors:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"<IconButton onClick={onClick}>\n  <IconButton.Icon icon={icon} />\n  <IconButton.Text>Button Text</IconButton.Text>\n</IconButton>\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"container-components",children:"Container Components"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["A container component is the entry point to a compound component. A container component could\nrepresent a real DOM element, or be a non-element container. For example, the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Pagination"})," component\nhas a container component that represents a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"role=nav"})," element. The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tabs"})," container component,\nhowever, does not contain a semantic element."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["If a compound component contains any state or behavior, it will also provide a shared model to\nsubcomponents via ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://reactjs.org/docs/context.html",target:"_blank",rel:"nofollow noopener noreferrer",children:"React context"}),". A container component\ntakes props for either the model or configuration for the model. In the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tabs"})," compound component\nexample, it might look like this:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"export const TabsModelContext = React.createContext({});\n\nconst Tabs = ({children, model, ...config}) => {\n  // either a model is passed in, or we create one\n  const value = model || useTabsModel(config);\n\n  return <TabsModelContext.Provider value={value}>{children}</TabsModelContext.Provider>;\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"subcomponents",children:"Subcomponents"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["A subcomponent typically follows ARIA roles. For the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tabs"})," example, these are the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"tablist"}),", ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"tab"}),",\nand ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"tabpanel"})," roles. A subcomponent provides direct access to semantic or key elements of a\ncompound component. In the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"IconButton"})," example, the icon is not semantic and might be hidden from\nscreen readers while the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"IconButton.Text"})," content is instead used for a tooltip and as the\naccessible name while being visibly hidden."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"why-compound-components",children:"Why Compound Components?"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Configurable components have a more terse implementation and tightly control component structure,\nwhich make it a popular pattern. However, the trade-off of their rigid structure is losing direct\naccess to the markup. This is problematic for adding attributes to underlying elements, customizing\nstyles, and modifying the component's markup structure. Providing additional props can bypass those\nissues, but that often leads to a bloated component API. And because these additional props are\noften component-specific, it creates a less intuitive API for developers implementing the component.\nFor example, the Tabs interface might look like:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"interface Tab {\n  title: string;\n  contents: React.ReactNode;\n  tabProps: React.HTMLAttributes<HTMLElement>;\n  tabPanelProps: React.HTMLAttributes<HTMLElement>;\n}\n\ninterface TabsProps {\n  tabListProps: React.HTMLAttributes<HTMLElement>;\n  items: Tab[];\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Conversely, compound components have a more verbose implementation and loose control over structure.\nThis flexibility allows developers to have direct access to underlying elements which makes\nmanipulating attributes, styles, and markup structure much more natural and intuitive. From the\nabove example:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"<Tabs>\n  <Tabs.List>\n    <Tabs.Item>First Tab</Tabs.Item>\n    <Tabs.Item>Second Tab</Tabs.Item>\n  </Tabs.List>\n  <Tabs.Panel>First Tab Contents</Tabs.Panel>\n  <Tabs.Panel>Second Tab Contents</Tabs.Panel>\n</Tabs>\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"The pattern provides an additional benefit as well: maintainability. An active client-side\napplication is constantly changing over the course of its lifecycle. However, not all parts change\nat the same rate. The application-level business logic (authentication, authorization, data\nfetching, et al) likely remains fairly intact over time. The UI logic layer (checkout flow steps,\nmodal logic, etc) will change more frequently as features evolves or are deprecated. The most\nfrequent changes happen at the markup structure and styling level. Configurable components are great\nat meeting the needs of your application today, but are more difficult to update. Changing the\nmarkup will often require changes to the component's code which will require library updates. These\nlibrary updates mean more UI logic and complexity or complete rewrite to support more use-cases."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"For these reasons, we much prefer the compound component pattern. It allows our components to adapt\nto your application's needs and evolve with it over time, often without changes to our code."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"configuring-components",children:"Configuring Components"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Components that directly wrap an element (most of them) will have the following properties:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ref"}),": This allows direct access to the underlying element."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"<Tabs.Item ref={myRef}>\n"})}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"as"}),": This allows overriding of the default element. The override can be a string representation\nof a tag (i.e. ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"section"}),", ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"div"}),", ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"nav"}),", etc), or a Component that forwards attributes to an\nelement. If you use a component, you should forward the React ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ref"})," and spread all extra props to\nthe element to ensure the API still works."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:'// tag\n<Tabs.List as="section" />\n\n// Component\nconst Section = React.forwardRef(({children, ...elemProps}, ref) => (\n  <section ref={ref} {...elemProps}>{children}</section>\n))\n\n<Tabs.List as={Section}/>\n'})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Both will look like the following in the DOM:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-html",children:'<section role="tablist"></section>\n'})}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Any extra props will be passed as HTML attributes to the underlying element."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:'<Tabs.Item aria-label="Foobar" data-testid="tab1">\n'})}),"\n"]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Compound components are also made up of ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#models",children:"models"})," that accept ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#guards",children:"guards"})," to\nconditionally prevent state changes and ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#callbacks",children:"callbacks"})," to attach listeners. For example, in\nour Tabs component clicking a Tab will select that tab. The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tabs"})," container component will accept a\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"shouldSelect"})," and a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"onSelect"})," for the event called ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"select"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"const MyComponent = () => {\n  // `data` is all event data from the `select` event\n\n  // `state` is the current state of the `Tabs` component\n  const shouldSelect = ({data, state}) => {\n    // for some reason, we only want to allow selection the 'first' tab\n    // Clicking on the first tab will select it, but clicking on the\n    // second tab will do nothing\n    return data.tab === 'first' ? true : false;\n\n    // returning true allows the event to trigger a state change and will\n    // also call the `onSelect` callback\n  };\n\n  // `prevState` is the previous state of the model. Callbacks are called _before_ state has resolved.\n  // This means the passed state hasn't updated yet. It also means it is safe to call `setState` without\n  // triggering extra renders. `setState` calls will add to React's batching system before a state changes\n  // are flushed and render functions are called.\n  const onSelect = ({data, prevState}) => {\n    // called any time the `select` event is triggered\n    console.log('onSelect', data, prevState);\n  };\n\n  return (\n    <Tabs shouldSelect={shouldSelect} onSelect={onSelect}>\n      <Tabs.List>\n        <Tabs.Item data-id=\"first\">First</Tabs.Item>\n        <Tabs.Item data-id=\"second\">Second</Tabs.Item>\n      </Tabs.List>\n    </Tabs>\n  );\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"This concludes basic compound components. If you'd like to know more about models, behavior hooks,\nand more advanced composition techniques, read on."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"models",children:"Models"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"what-is-a-model",children:"What is a Model?"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["If a compound component was stripped of all its markup, attributes, and styling, what would remain\nis the model. The model is how we describe the state and supported state transitions. You could\ncompletely swap out the underlying elements, attributes, and styles, and the model would remain the\nsame. The model is an object that is composed of two parts: ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"state"})," and a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"events"}),". The model's\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"state"})," describes the current snapshot in time of the component, and the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"events"})," describes events\nthat can be sent to the model."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"why-models",children:"Why Models?"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Advantages of models:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"A common API structure to group state and behavior of components"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"Atomic responsibilities"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"Composable and shareable functionality"}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"We use React Hooks to return models. An empty model would look like this:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-ts",children:"const useEmptyModel = (config = {}) => {\n  const state = {};\n  const events = {};\n\n  return {state, events};\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"A model hooks takes in a configuration object. This object can contain anything like initial values,\nconfiguration of behavior, etc. This is also where event behavior can be configured. Many model\nevents will have 2 optional configurable functions:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"Callbacks"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"Guards"}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4,{id:"callbacks",children:"Callbacks"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["A callback of an event is similar to native event callbacks like ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"onClick"}),". Callbacks are a place to\nhandle events and by convention start with ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"on"}),". If the event is called ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"click"}),", the callback would\nbe called ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"onClick"}),". Callbacks can be used to handle side effects or used to produce additional\nstate changes. Callbacks are called synchronously which batches state changes, so any additional\nstate changes will not produce additional renders. This means callbacks are called with the previous\nstate since state has not resolved yet."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4,{id:"guards",children:"Guards"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Guards are special functions that determine if an event should trigger a state change and a\ncallback. The function should return ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"true"})," or ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"false"}),". A ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"false"})," return value will effectively\ncancel the event and state changes will not occur and callbacks will not be invoked. A guard allows\nfor a model's behavior to be modified without needing to produce a new model. Guard functions should\nbe pure functions. Side effects should be performed in callbacks. The convention of a guard function\nis to start with a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"should"}),". If an event is called ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"open"}),", the guard of the event would be called\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"shouldOpen"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:['Both guards and callbacks receive an object of event data (i.e. mouse position of a "click" event)\nand the current ',(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"state"})," of the model."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Here's an example of a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureModel"}),' that has an "open" event with a guard called "shouldOpen"\nand a callback called "onOpen":']}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-ts",children:"const useDisclosureModel = (config = {}) => {\n  const [opened, setOpened] = React.useState(false);\n\n  const state = {opened};\n  const events = {\n    open(data) {\n      if (config.shouldOpen?.({data, state}) === false) {\n        return;\n      }\n      setOpened(true);\n      config.onOpen?.({data, prevState: state});\n    },\n  };\n\n  return {state, events};\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["You can see the guard is called first, if defined, and the output is checked. If ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"false"})," is\nreturned, the event is canceled. If the guard is not defined or returns ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"true"}),", the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"setOpened"}),"\nsetter is called. Finally, if a callback is defined, it is called."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Guards allow configuration of state changes. A concrete example might be an ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"EllipsisTooltip"})," where\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"mouseover"})," or ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"focus"})," DOM events call the model's ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"open"})," event. The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"shouldOpen"})," guard would allow\nconditional opening of the tooltip based on overflow (ellipsis) detection. For example:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"const useEllipsisTooltipModel = (config = {}) => {\n  return useTooltipModel({\n    ...config,\n    shouldOpen({data}) {\n      // data has an `element` property\n      // `findOverflowElement` returns the element with an overflow style applied\n      const element = findOverflowElement(data.element);\n\n      // if the scrollWidth is greater than the clientWidth,\n      // then the content must be overflowed\n      return element.scrollWidth > element.clientWidth;\n    },\n  });\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Models are meant to be composable. For example, a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"TabsModel"})," uses a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"CursorModel"})," (which itself\nuses ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ListModel"}),") and a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ListModel"})," for a list of panels. ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"TabsModel"})," also keeps track of which tab\nis currently selected. This might look like the following:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-ts",children:"const useTabsModel = (config = {}) => {\n  // id is used for ARIA attributes\n  const id = useUniqueId(config.id);\n  const [selectedTab, setSelectedTab] = React.useState('');\n  const cursor = useCursorModel(config);\n  const panels = useListModel(config);\n\n  const state = {\n    ...cursor.state, // extend the CursorModel state\n    id,\n    selectedTab,\n    panels: panels.state.items, // we only care about\n  };\n\n  const events = {\n    ...cursor.events, // extend the CursorModel events\n    registerPanel: panels.events.registerItem,\n    unregisterPanel: panels.events.unregisterItem,\n\n    select(data) {\n      if (config.shouldSelect?.({data, prevState: state}) === false) {\n        return;\n      }\n      setSelectedTab(data.tab);\n      config.onSelect?.({data, prevState: state});\n    },\n  };\n\n  return {state, events};\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Model composition allows for components to share functionality with other components. In the Tabs\nexample, ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ListModel"})," is in charge of maintaining a list of tab elements. The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"CursorModel"})," is in\ncharge of maintaining a current cursor position of the tab list. The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tabs.List"})," component uses the\ncursor to allow keyboard navigation of the tabs. The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"TabsModel"})," also maintains the currently\nselected tab to ensure the correct ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"TabPanel"})," is visible. The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"TabsModel"})," is also using a\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ListModel"})," to maintain a list of tab panels. The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"TabsModel"})," is in charge of composing all this and\nproviding data and events to the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tabs"})," compound component - coordination state between\nsubcomponents."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Many other components like ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Select"}),", ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Breadcrumbs"}),", or dropdown menus can also use the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ListModel"}),"\nand/or the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"CursorModel"}),". These models could be thought of as abstract models where they do not\ndirectly map to a compound component, but are instead used to create concrete models that do map to\ncompound components."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"The Typescript interface of a model looks like this:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-ts",children:"interface Model<\n  S extends Record<string, any>,\n  E extends Record<string, (...args: any[]) => void\n> {\n  state: S\n  events: E\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"The Typescript interface of Callbacks and Guards looks like this:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-ts",children:"type Callback<EventData, State> = ({data: EventData, prevState: State}) => void;\ntype Guard<EventData, State> = ({data: EventData, state: State}) => boolean;\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"behavior-hooks",children:"Behavior Hooks"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"what-is-a-behavior-hook",children:"What is a Behavior Hook?"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["A behavior hook usually applies to a subcomponent and describes attributes that are applied to a\nsubcomponent's element (i.e. ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"aria-labelledby"}),", or ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"onClick"}),"). A behavior hook takes in the model\nand developer-defined DOM attributes and return a merged object of attributes.\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"(Model, HTMLAttributs) => HTMLAttributes"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"why-behavior-hooks",children:"Why Behavior Hooks?"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"A behavior hook allows us to more easily reuse functionality between components with similar\nsubcomponents. They also provide another layer of composition to compound components."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["For example, the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"CursorModel"})," contains the model's internal state and events, but doesn't handle\nexternal DOM events directly. The behavior hook is the glue between the model and DOM elements. A\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"useKeyboardCursor"})," behavior hook might look like this:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-ts",children:"const useKeyboardCursor = ({state, events}, elemProps = {}) => {\n  const focus = () => {\n    const items = state.items.find;\n  };\n\n  // effects on state changes\n  React.useEffect(() => {\n    const item = state.items.find(({id}) => state.currentId === id);\n    item.ref.current?.focus();\n  }, [state.currentId, state.items]);\n\n  return {\n    onKeyDown(event) {\n      // if onKeyDown was provided, call it first\n      elemProps.onKeyDown?.(event);\n\n      if (event.key === 'ArrowLeft' || event.key === 'Left') {\n        events.goToPrevious();\n      }\n      if (event.key === 'ArrowRight' || event.key === 'Right') {\n        events.goToNext();\n      }\n    },\n    ...elemProps,\n  };\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"putting-it-all-together",children:"Putting it all together"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["In the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tabs"})," component example, there isn't a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Cursor"})," component. The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tab.List"})," subcomponent uses\nthe ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"CursorModel"})," and the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"useRovingFocus"})," behavior hook to produce the desired subcomponent. It\nlooks something like this:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:'const TabList = ({children, ...elemProps}) => {\n  const model = React.useContext(TabsModelContext);\n  const props = useRovingFocus(model, elemProps);\n\n  // we could use other behavior hooks to further build `props`\n\n  return (\n    <div role="tablist" {...props}>\n      {children}\n    </div>\n  );\n};\n'})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"configuring-a-model",children:"Configuring a model"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["A container component can either accept model configuration ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em,{children:"or"})," a model. Passing model\nconfiguration allows for simpler model configuration of guards, callbacks, or any other model\nconfiguration. The following example provides an ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"onSelect"})," callback that fetches some data from the\nserver:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"<Tabs onSelect={({data}) => fetch('/api/selectTab' + data.id)}>...</Tabs>\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["If you need direct access to a model's state or events, you can hoist the model into your component\nand pass the whole model to the container component. This allows you to use the model's state in\nyour render method or provide the model's events to other callbacks. In the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tabs"})," example, it might\nlook like this:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"const MyTabs = () => {\n  const model = useTabsModel({\n    // we can still load data from the server\n    onSelect: ({data}) => fetch('/api/selectTab' + data.id),\n  });\n\n  return (\n    <>\n      <Tabs model={model}>...</Tabs>\n      // direct access to the model's state Currently selected tab: {model.state.selectedTab}\n      // Now we can send events directly to the model\n      <button onClick={() => model.events.select({tab: 'third'})}>Select third tab</button>\n    </>\n  );\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"composing-a-model",children:"Composing a model"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Models allow for very powerful composition without changing the UI at all. For example, if we have a\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Disclosure"})," component, but want to change the operating paradigm to be fully controlled by a parent\ncomponent, we can compose a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureModel"})," to do so. Normally a disclosure model has it's own\nstate, but we can override that behavior and make a controlled Disclosure component instead:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:'const useControlledDisclosureModel = ({opened, onChange, ...config}) => {\n  const model = useDisclosureModel(config);\n\n  const state = {\n    ...model.state,\n    opened,\n  };\n\n  const events = {\n    ...model.events,\n    open(data) {\n      onChange(true);\n    },\n    close(data) {\n      onChange(false);\n    },\n  };\n\n  return {state, events};\n};\n\nconst ControlledDisclosure = ({buttonText, children, opened, onChange}) => {\n  const model = useControlledDisclosureModel({opened, onChange});\n\n  return (\n    <Disclosure model={model}>\n      <Disclosure.Target>{buttonText}</Disclosure.Target>\n      <Disclosure.Content>{children}</Disclosure.Content>\n    </Disclosure>\n  );\n};\n\nconst App = () => {\n  const [opened, setOpened] = React.useState(false);\n\n  return (\n    <ControlledDisclosure buttonText="Toggle" opened={opened} onChange={setOpened}>\n      Disclosed Content\n    </ControlledDisclosure>\n  );\n};\n'})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The compound component API is a powerful, incrementally composable way to create UI. The component\nAPI is the highest level and offers a lot of functionality out of the box. But using models and\nbehavior hooks allow for creation of new components that share some functionality with other\ncomponents. An example of this is tabs and a dropdown menu both use a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"CursorModel"})," and the\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"useKeyboardCursor"})," to enable keyboard navigation even though the UI looks very different."]})]})}const __WEBPACK_DEFAULT_EXPORT__=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__.RP)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,Object.assign({},props,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,props)})):_createMdxContent(props)}},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{var f=__webpack_require__("./node_modules/react/index.js"),k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,g){var b,d={},e=null,h=null;for(b in void 0!==g&&(e=""+g),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(h=a.ref),a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l,exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")}}]);