"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[104],{"./modules/react/button/stories/visual-testing/ToolbarDropdownButton.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.ToolbarDropdownButtonThemedStates=exports.ToolbarDropdownButtonStates=void 0;var React=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_storybook=__webpack_require__("./utils/storybook/index.ts"),_canvasSystemIconsWeb=__webpack_require__("./node_modules/@workday/canvas-system-icons-web/dist/es6/index.js"),_button=__webpack_require__("./modules/react/button/index.ts"),_utils=__webpack_require__("./modules/react/button/stories/visual-testing/utils.tsx"),_testing=__webpack_require__("./modules/react/testing/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}exports.default={title:"Testing/Buttons/Button/Toolbar Dropdown Button",component:_button.ToolbarDropdownButton,parameters:{storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = "import * as React from \'react\';\\nimport {customColorTheme} from \'../../../../../utils/storybook\';\\nimport {playCircleIcon} from \'@workday/canvas-system-icons-web\';\\nimport {ToolbarDropdownButton} from \'@workday/canvas-kit-react/button\';\\nimport {Container, stateTableColumnProps} from \'./utils\';\\nimport {PartialEmotionCanvasTheme} from \'@workday/canvas-kit-react/common\';\\nimport {ComponentStatesTable, StaticStates} from \'@workday/canvas-kit-react/testing\';\\n\\nexport default {\\n  title: \'Testing/Buttons/Button/Toolbar Dropdown Button\',\\n  component: ToolbarDropdownButton,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nconst columnProps = [\\n  ...stateTableColumnProps,\\n  {label: \'Mirrored Icon \', props: {shouldMirrorIcon: true, disabled: false}},\\n];\\n\\nconst ToolbarDropdownButtonTest = (props: {theme?: PartialEmotionCanvasTheme}) => (\\n  <React.Fragment>\\n    <div>\\n      <h3>Default</h3>\\n      <StaticStates theme={props.theme}>\\n        <ComponentStatesTable rowProps={[{label: \'Default\', props: {}}]} columnProps={columnProps}>\\n          {props => (\\n            <Container>\\n              <ToolbarDropdownButton\\n                icon={playCircleIcon}\\n                aria-label=\\"Play\\"\\n                {...props}\\n                onChange={() => {}} // eslint-disable-line no-empty-function\\n              />\\n            </Container>\\n          )}\\n        </ComponentStatesTable>\\n      </StaticStates>\\n    </div>\\n  </React.Fragment>\\n);\\n\\nexport const ToolbarDropdownButtonStates = {render: () => <ToolbarDropdownButtonTest />};\\n\\nexport const ToolbarDropdownButtonThemedStates = {\\n  render: () => <ToolbarDropdownButtonTest theme={{canvas: customColorTheme}} />,\\n};\\n";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  "ToolbarDropdownButtonStates": {\n    "startLoc": {\n      "col": 43,\n      "line": 46\n    },\n    "endLoc": {\n      "col": 88,\n      "line": 46\n    },\n    "startBody": {\n      "col": 43,\n      "line": 46\n    },\n    "endBody": {\n      "col": 88,\n      "line": 46\n    }\n  },\n  "ToolbarDropdownButtonThemedStates": {\n    "startLoc": {\n      "col": 49,\n      "line": 48\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 50\n    },\n    "startBody": {\n      "col": 49,\n      "line": 48\n    },\n    "endBody": {\n      "col": 1,\n      "line": 50\n    }\n  }\n};\n    \nimport * as React from \'react\';\nimport {customColorTheme} from \'../../../../../utils/storybook\';\nimport {playCircleIcon} from \'@workday/canvas-system-icons-web\';\nimport {ToolbarDropdownButton} from \'@workday/canvas-kit-react/button\';\nimport {Container, stateTableColumnProps} from \'./utils\';\nimport {PartialEmotionCanvasTheme} from \'@workday/canvas-kit-react/common\';\nimport {ComponentStatesTable, StaticStates} from \'@workday/canvas-kit-react/testing\';\n\nexport default {\n  title: \'Testing/Buttons/Button/Toolbar Dropdown Button\',\n  component: ToolbarDropdownButton,\n  parameters: {\n  "storySource": {\n    "source": "import * as React from \'react\';\\nimport {customColorTheme} from \'../../../../../utils/storybook\';\\nimport {playCircleIcon} from \'@workday/canvas-system-icons-web\';\\nimport {ToolbarDropdownButton} from \'@workday/canvas-kit-react/button\';\\nimport {Container, stateTableColumnProps} from \'./utils\';\\nimport {PartialEmotionCanvasTheme} from \'@workday/canvas-kit-react/common\';\\nimport {ComponentStatesTable, StaticStates} from \'@workday/canvas-kit-react/testing\';\\n\\nexport default {\\n  title: \'Testing/Buttons/Button/Toolbar Dropdown Button\',\\n  component: ToolbarDropdownButton,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nconst columnProps = [\\n  ...stateTableColumnProps,\\n  {label: \'Mirrored Icon \', props: {shouldMirrorIcon: true, disabled: false}},\\n];\\n\\nconst ToolbarDropdownButtonTest = (props: {theme?: PartialEmotionCanvasTheme}) => (\\n  <React.Fragment>\\n    <div>\\n      <h3>Default</h3>\\n      <StaticStates theme={props.theme}>\\n        <ComponentStatesTable rowProps={[{label: \'Default\', props: {}}]} columnProps={columnProps}>\\n          {props => (\\n            <Container>\\n              <ToolbarDropdownButton\\n                icon={playCircleIcon}\\n                aria-label=\\"Play\\"\\n                {...props}\\n                onChange={() => {}} \\n              />\\n            </Container>\\n          )}\\n        </ComponentStatesTable>\\n      </StaticStates>\\n    </div>\\n  </React.Fragment>\\n);\\n\\nexport const ToolbarDropdownButtonStates = {render: () => <ToolbarDropdownButtonTest />};\\n\\nexport const ToolbarDropdownButtonThemedStates = {\\n  render: () => <ToolbarDropdownButtonTest theme={{canvas: customColorTheme}} />,\\n};\\n",\n    "locationsMap": {\n      "toolbar-dropdown-button-states": {\n        "startLoc": {\n          "col": 43,\n          "line": 46\n        },\n        "endLoc": {\n          "col": 88,\n          "line": 46\n        },\n        "startBody": {\n          "col": 43,\n          "line": 46\n        },\n        "endBody": {\n          "col": 88,\n          "line": 46\n        }\n      },\n      "toolbar-dropdown-button-themed-states": {\n        "startLoc": {\n          "col": 49,\n          "line": 48\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 50\n        },\n        "startBody": {\n          "col": 49,\n          "line": 48\n        },\n        "endBody": {\n          "col": 1,\n          "line": 50\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nconst columnProps = [\n  ...stateTableColumnProps,\n  {label: \'Mirrored Icon \', props: {shouldMirrorIcon: true, disabled: false}},\n];\n\nconst ToolbarDropdownButtonTest = (props: {theme?: PartialEmotionCanvasTheme}) => (\n  <React.Fragment>\n    <div>\n      <h3>Default</h3>\n      <StaticStates theme={props.theme}>\n        <ComponentStatesTable rowProps={[{label: \'Default\', props: {}}]} columnProps={columnProps}>\n          {props => (\n            <Container>\n              <ToolbarDropdownButton\n                icon={playCircleIcon}\n                aria-label="Play"\n                {...props}\n                onChange={() => {}} \n              />\n            </Container>\n          )}\n        </ComponentStatesTable>\n      </StaticStates>\n    </div>\n  </React.Fragment>\n);\n\nexport const ToolbarDropdownButtonStates = {render: () => <ToolbarDropdownButtonTest />};;\n\nexport const ToolbarDropdownButtonThemedStates = {\n  render: () => <ToolbarDropdownButtonTest theme={{canvas: customColorTheme}} />,\n};\n',locationsMap:{"toolbar-dropdown-button-states":{startLoc:{col:43,line:133},endLoc:{col:88,line:133},startBody:{col:43,line:133},endBody:{col:88,line:133}},"toolbar-dropdown-button-themed-states":{startLoc:{col:49,line:135},endLoc:{col:1,line:137},startBody:{col:49,line:135},endBody:{col:1,line:137}}}},storySource:{source:"import * as React from 'react';\nimport {customColorTheme} from '../../../../../utils/storybook';\nimport {playCircleIcon} from '@workday/canvas-system-icons-web';\nimport {ToolbarDropdownButton} from '@workday/canvas-kit-react/button';\nimport {Container, stateTableColumnProps} from './utils';\nimport {PartialEmotionCanvasTheme} from '@workday/canvas-kit-react/common';\nimport {ComponentStatesTable, StaticStates} from '@workday/canvas-kit-react/testing';\n\nexport default {\n  title: 'Testing/Buttons/Button/Toolbar Dropdown Button',\n  component: ToolbarDropdownButton,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nconst columnProps = [\n  ...stateTableColumnProps,\n  {label: 'Mirrored Icon ', props: {shouldMirrorIcon: true, disabled: false}},\n];\n\nconst ToolbarDropdownButtonTest = (props: {theme?: PartialEmotionCanvasTheme}) => (\n  <React.Fragment>\n    <div>\n      <h3>Default</h3>\n      <StaticStates theme={props.theme}>\n        <ComponentStatesTable rowProps={[{label: 'Default', props: {}}]} columnProps={columnProps}>\n          {props => (\n            <Container>\n              <ToolbarDropdownButton\n                icon={playCircleIcon}\n                aria-label=\"Play\"\n                {...props}\n                onChange={() => {}} \n              />\n            </Container>\n          )}\n        </ComponentStatesTable>\n      </StaticStates>\n    </div>\n  </React.Fragment>\n);\n\nexport const ToolbarDropdownButtonStates = {render: () => <ToolbarDropdownButtonTest />};\n\nexport const ToolbarDropdownButtonThemedStates = {\n  render: () => <ToolbarDropdownButtonTest theme={{canvas: customColorTheme}} />,\n};\n",locationsMap:{"toolbar-dropdown-button-states":{startLoc:{col:43,line:46},endLoc:{col:88,line:46},startBody:{col:43,line:46},endBody:{col:88,line:46}},"toolbar-dropdown-button-themed-states":{startLoc:{col:49,line:48},endLoc:{col:1,line:50},startBody:{col:49,line:48},endBody:{col:1,line:50}}}},chromatic:{disable:!1}}};const columnProps=[..._utils.stateTableColumnProps,{label:"Mirrored Icon ",props:{shouldMirrorIcon:!0,disabled:!1}}],ToolbarDropdownButtonTest=props=>(0,_jsxRuntime.jsx)(React.Fragment,{children:(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("h3",{children:"Default"}),(0,_jsxRuntime.jsx)(_testing.StaticStates,{theme:props.theme,children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"Default",props:{}}],columnProps,children:props=>(0,_jsxRuntime.jsx)(_utils.Container,{children:(0,_jsxRuntime.jsx)(_button.ToolbarDropdownButton,{icon:_canvasSystemIconsWeb.playCircleIcon,"aria-label":"Play",...props,onChange:()=>{}})})})})]})});ToolbarDropdownButtonTest.displayName="ToolbarDropdownButtonTest";exports.ToolbarDropdownButtonStates={render:()=>(0,_jsxRuntime.jsx)(ToolbarDropdownButtonTest,{})},exports.ToolbarDropdownButtonThemedStates={render:()=>(0,_jsxRuntime.jsx)(ToolbarDropdownButtonTest,{theme:{canvas:_storybook.customColorTheme}})};module.exports.__namedExportsOrder=["ToolbarDropdownButtonThemedStates","ToolbarDropdownButtonStates"]},"./modules/react/button/stories/visual-testing/utils.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.stateTableColumnProps=exports.Container=void 0;var _canvasKitStyling=__webpack_require__("./modules/styling/index.ts"),systemIcons=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/@workday/canvas-system-icons-web/dist/es6/index.js")),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}const buttonLayout=(0,_canvasKitStyling.createStyles)({display:"flex",alignItems:"center",justifyContent:"center"}),blueBackground=(0,_canvasKitStyling.createStyles)({display:"flex",alignItems:"center",justifyContent:"center",backgroundColor:"#0875e1",padding:"12px",borderRadius:"4px"}),Container=props=>(0,_jsxRuntime.jsx)("div",{className:props.blue?blueBackground:buttonLayout,children:props.children});exports.Container=Container,Container.displayName="Container";exports.stateTableColumnProps=[{label:"Default ",props:{className:"",disabled:!1}},{label:"Default Disabled",props:{className:"",disabled:!0}},{label:"Hover ",props:{className:"hover",disabled:!1}},{label:"Hover Disabled",props:{className:"hover",disabled:!0}},{label:"Focus ",props:{className:"focus",disabled:!1}},{label:"Focus Hover ",props:{className:"focus hover",disabled:!1}},{label:"Active ",props:{className:"active",disabled:!1}},{label:"Active Hover ",props:{className:"active hover",disabled:!1}}];const systemIconArray=[];for(const icon in systemIcons)systemIcons[icon].filename&&systemIconArray.push(systemIcons[icon])}}]);