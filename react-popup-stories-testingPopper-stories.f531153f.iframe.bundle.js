"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[7088],{"./modules/react/popup/stories/testingPopper.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.UpdateOptions=exports.default=void 0;var React=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_button=__webpack_require__("./modules/react/button/index.ts"),_popup=__webpack_require__("./modules/react/popup/index.ts");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}var _default={parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import * as React from 'react';\\n\\nimport {SecondaryButton, PrimaryButton} from '@workday/canvas-kit-react/button';\\nimport {Popup, Popper, Placement} from '@workday/canvas-kit-react/popup';\\n\\nexport default {\\n  title: 'Testing/Popups/Popper',\\n  component: Popper,\\n};\\n\\nexport const UpdateOptions = {\\n  render: () => {\\n    const [placement, setPlacement] = React.useState<Placement>('bottom');\\n    const [open, setOpen] = React.useState(false);\\n    const buttonRef = React.useRef<HTMLButtonElement>(null);\\n    const popupRef = React.useRef<HTMLDivElement>(null);\\n\\n    React.useLayoutEffect(() => {\\n      setOpen(true);\\n    }, []);\\n\\n    return (\\n      <>\\n        <div>\\n          <p>\\n            Changing the placement should update the popper, but not recreate the PopperJS instance\\n          </p>\\n          <SecondaryButton onClick={() => setPlacement('top')}>Top</SecondaryButton>\\n          <SecondaryButton onClick={() => setPlacement('bottom')}>Bottom</SecondaryButton>\\n          <SecondaryButton onClick={() => setPlacement('left')}>Left</SecondaryButton>\\n          <div>Placement: {placement}</div>\\n        </div>\\n        <div\\n          style={{\\n            display: 'flex',\\n            justifyContent: 'center',\\n            height: 400,\\n            width: 400,\\n            alignItems: 'center',\\n          }}\\n        >\\n          <PrimaryButton ref={buttonRef}>Target element</PrimaryButton>\\n          <Popper\\n            placement={placement}\\n            open={open}\\n            anchorElement={buttonRef.current!}\\n            ref={popupRef}\\n          >\\n            {({placement}) => {\\n              return (\\n                <Popup.Card width={400}>\\n                  <Popup.Heading>{'Positioned Popper element'}</Popup.Heading>\\n                  <Popup.Body>Placement:{placement}</Popup.Body>\\n                </Popup.Card>\\n              );\\n            }}\\n          </Popper>\\n        </div>\\n      </>\\n    );\\n  },\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"UpdateOptions\": {\n    \"startLoc\": {\n      \"col\": 29,\n      \"line\": 11\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 62\n    },\n    \"startBody\": {\n      \"col\": 29,\n      \"line\": 11\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 62\n    }\n  }\n};\n    \nimport * as React from 'react';\n\nimport {SecondaryButton, PrimaryButton} from '@workday/canvas-kit-react/button';\nimport {Popup, Popper, Placement} from '@workday/canvas-kit-react/popup';\n\nexport default {parameters: {\n  \"storySource\": {\n    \"source\": \"import * as React from 'react';\\n\\nimport {SecondaryButton, PrimaryButton} from '@workday/canvas-kit-react/button';\\nimport {Popup, Popper, Placement} from '@workday/canvas-kit-react/popup';\\n\\nexport default {\\n  title: 'Testing/Popups/Popper',\\n  component: Popper,\\n};\\n\\nexport const UpdateOptions = {\\n  render: () => {\\n    const [placement, setPlacement] = React.useState<Placement>('bottom');\\n    const [open, setOpen] = React.useState(false);\\n    const buttonRef = React.useRef<HTMLButtonElement>(null);\\n    const popupRef = React.useRef<HTMLDivElement>(null);\\n\\n    React.useLayoutEffect(() => {\\n      setOpen(true);\\n    }, []);\\n\\n    return (\\n      <>\\n        <div>\\n          <p>\\n            Changing the placement should update the popper, but not recreate the PopperJS instance\\n          </p>\\n          <SecondaryButton onClick={() => setPlacement('top')}>Top</SecondaryButton>\\n          <SecondaryButton onClick={() => setPlacement('bottom')}>Bottom</SecondaryButton>\\n          <SecondaryButton onClick={() => setPlacement('left')}>Left</SecondaryButton>\\n          <div>Placement: {placement}</div>\\n        </div>\\n        <div\\n          style={{\\n            display: 'flex',\\n            justifyContent: 'center',\\n            height: 400,\\n            width: 400,\\n            alignItems: 'center',\\n          }}\\n        >\\n          <PrimaryButton ref={buttonRef}>Target element</PrimaryButton>\\n          <Popper\\n            placement={placement}\\n            open={open}\\n            anchorElement={buttonRef.current!}\\n            ref={popupRef}\\n          >\\n            {({placement}) => {\\n              return (\\n                <Popup.Card width={400}>\\n                  <Popup.Heading>{'Positioned Popper element'}</Popup.Heading>\\n                  <Popup.Body>Placement:{placement}</Popup.Body>\\n                </Popup.Card>\\n              );\\n            }}\\n          </Popper>\\n        </div>\\n      </>\\n    );\\n  },\\n};\\n\",\n    \"locationsMap\": {\n      \"update-options\": {\n        \"startLoc\": {\n          \"col\": 29,\n          \"line\": 11\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 62\n        },\n        \"startBody\": {\n          \"col\": 29,\n          \"line\": 11\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 62\n        }\n      }\n    }\n  }\n,},\n  title: 'Testing/Popups/Popper',\n  component: Popper,\n};\n\nexport const UpdateOptions = {\n  render: () => {\n    const [placement, setPlacement] = React.useState<Placement>('bottom');\n    const [open, setOpen] = React.useState(false);\n    const buttonRef = React.useRef<HTMLButtonElement>(null);\n    const popupRef = React.useRef<HTMLDivElement>(null);\n\n    React.useLayoutEffect(() => {\n      setOpen(true);\n    }, []);\n\n    return (\n      <>\n        <div>\n          <p>\n            Changing the placement should update the popper, but not recreate the PopperJS instance\n          </p>\n          <SecondaryButton onClick={() => setPlacement('top')}>Top</SecondaryButton>\n          <SecondaryButton onClick={() => setPlacement('bottom')}>Bottom</SecondaryButton>\n          <SecondaryButton onClick={() => setPlacement('left')}>Left</SecondaryButton>\n          <div>Placement: {placement}</div>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            height: 400,\n            width: 400,\n            alignItems: 'center',\n          }}\n        >\n          <PrimaryButton ref={buttonRef}>Target element</PrimaryButton>\n          <Popper\n            placement={placement}\n            open={open}\n            anchorElement={buttonRef.current!}\n            ref={popupRef}\n          >\n            {({placement}) => {\n              return (\n                <Popup.Card width={400}>\n                  <Popup.Heading>{'Positioned Popper element'}</Popup.Heading>\n                  <Popup.Body>Placement:{placement}</Popup.Body>\n                </Popup.Card>\n              );\n            }}\n          </Popper>\n        </div>\n      </>\n    );\n  },\n};\n",locationsMap:{"update-options":{startLoc:{col:29,line:62},endLoc:{col:1,line:113},startBody:{col:29,line:62},endBody:{col:1,line:113}}}},storySource:{source:"import * as React from 'react';\n\nimport {SecondaryButton, PrimaryButton} from '@workday/canvas-kit-react/button';\nimport {Popup, Popper, Placement} from '@workday/canvas-kit-react/popup';\n\nexport default {\n  title: 'Testing/Popups/Popper',\n  component: Popper,\n};\n\nexport const UpdateOptions = {\n  render: () => {\n    const [placement, setPlacement] = React.useState<Placement>('bottom');\n    const [open, setOpen] = React.useState(false);\n    const buttonRef = React.useRef<HTMLButtonElement>(null);\n    const popupRef = React.useRef<HTMLDivElement>(null);\n\n    React.useLayoutEffect(() => {\n      setOpen(true);\n    }, []);\n\n    return (\n      <>\n        <div>\n          <p>\n            Changing the placement should update the popper, but not recreate the PopperJS instance\n          </p>\n          <SecondaryButton onClick={() => setPlacement('top')}>Top</SecondaryButton>\n          <SecondaryButton onClick={() => setPlacement('bottom')}>Bottom</SecondaryButton>\n          <SecondaryButton onClick={() => setPlacement('left')}>Left</SecondaryButton>\n          <div>Placement: {placement}</div>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            height: 400,\n            width: 400,\n            alignItems: 'center',\n          }}\n        >\n          <PrimaryButton ref={buttonRef}>Target element</PrimaryButton>\n          <Popper\n            placement={placement}\n            open={open}\n            anchorElement={buttonRef.current!}\n            ref={popupRef}\n          >\n            {({placement}) => {\n              return (\n                <Popup.Card width={400}>\n                  <Popup.Heading>{'Positioned Popper element'}</Popup.Heading>\n                  <Popup.Body>Placement:{placement}</Popup.Body>\n                </Popup.Card>\n              );\n            }}\n          </Popper>\n        </div>\n      </>\n    );\n  },\n};\n",locationsMap:{"update-options":{startLoc:{col:29,line:11},endLoc:{col:1,line:62},startBody:{col:29,line:11},endBody:{col:1,line:62}}}}},title:"Testing/Popups/Popper",component:_popup.Popper};exports.default=_default;const UpdateOptions={render:()=>{const[placement,setPlacement]=React.useState("bottom"),[open,setOpen]=React.useState(!1),buttonRef=React.useRef(null),popupRef=React.useRef(null);return React.useLayoutEffect((()=>{setOpen(!0)}),[]),React.createElement(React.Fragment,null,React.createElement("div",null,React.createElement("p",null,"Changing the placement should update the popper, but not recreate the PopperJS instance"),React.createElement(_button.SecondaryButton,{onClick:()=>setPlacement("top")},"Top"),React.createElement(_button.SecondaryButton,{onClick:()=>setPlacement("bottom")},"Bottom"),React.createElement(_button.SecondaryButton,{onClick:()=>setPlacement("left")},"Left"),React.createElement("div",null,"Placement: ",placement)),React.createElement("div",{style:{display:"flex",justifyContent:"center",height:400,width:400,alignItems:"center"}},React.createElement(_button.PrimaryButton,{ref:buttonRef},"Target element"),React.createElement(_popup.Popper,{placement,open,anchorElement:buttonRef.current,ref:popupRef},(({placement})=>React.createElement(_popup.Popup.Card,{width:400},React.createElement(_popup.Popup.Heading,null,"Positioned Popper element"),React.createElement(_popup.Popup.Body,null,"Placement:",placement))))))}};exports.UpdateOptions=UpdateOptions,module.exports.__namedExportsOrder=["UpdateOptions"]}}]);