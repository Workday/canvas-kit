/*! For license information please see docs-mdx-CREATING_COMPOUND_COMPONENTS-mdx.60f13cf9.iframe.bundle.js.LICENSE.txt */
"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[933],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{BN:()=>MDXContext,RP:()=>useMDXComponents,gz:()=>withMDXComponents,xA:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./node_modules/@storybook/addon-docs/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W8:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.W8});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./modules/docs/mdx/CREATING_COMPOUND_COMPONENTS.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs");function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",a:"a",ul:"ul",li:"li",h2:"h2",code:"code",h3:"h3",em:"em",pre:"pre"},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__.RP)(),props.components);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.W8,{title:"Guides/Creating Compound Components"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"building-a-compound-component",children:"Building a Compound Component"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Refer to the\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"?path=/docs/guides-compound-components--docs",children:"Compound Component documentation"}),"\ndocument to learn about what a compound component is."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"This document will go through building a simplified Disclosure component to help solidify the\nconcepts. We will cover:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#non-coordinated-components",children:"Non Coordinated Components"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#models",children:"Models"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#disclosure-component",children:"Container Components"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#disclosuretarget-component",children:"Sub-components"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#model-composition",children:"Model Composition"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#behavior-hooks",children:"Behavior hooks"})}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"non-coordinated-components",children:"Non Coordinated Components"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["In most cases you'll create compound components that have a model and share information across subcomponents. However, in the case where information doesn't need to be shared, you can create a non\ncoordinated component. These components often represent some styled element with no associated role\nor behavior and don't rely on state and events such as a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Card"}),", ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Flex"})," or ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Button"})," components. Use\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createComponent"})," factory function in these scenarios."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"createcomponent",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createComponent"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Use ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createComponent"})," when you want to create a rendered element with ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em,{children:"no behavior"}),". This is useful\nfor elements that you want to use for styling purposes like container elements, or subcomponents\nthat are simple rendered elements. This utility function will wrap your component in a\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"React.ForwardRef"})," and allow you to add subcomponents as well."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"export const Card = createComponent('div')({\n  displayName: 'Card',\n  subComponents: {\n    Heading: CardHeading, // this is also using createComponent\n  },\n  Component: ({children, ...elemProps}: CardProps, ref, Element) => {\n    return (\n      <Box as={Element} {...elemProps} ref={ref}>\n        {children}\n      </Box>\n    );\n  },\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"models",children:"Models"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"A model is composed of state and events. The shape of the model used by components looks like this:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"type Model = {\n  state: Record<string, any>;\n  events: Record<string, (data?: any) => void>;\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Our model hook will take a config for ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"initialVisible"})," and return a model."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// useDisclosureModel.ts\ntype DisclosureConfig = {\n  initialVisible?: boolean;\n};\n\nexport const useDisclosureModel = (config: DisclosureConfig = {}) => {\n  const [visible, setVisible] = React.useState(config.initialVisible || false);\n\n  const state = {\n    visible,\n  };\n\n  const events = {\n    show() {\n      setVisible(true);\n    },\n    hide() {\n      setVisible(false);\n    },\n  };\n\n  return {state, events};\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The model has a single ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"visible"})," state property and ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"show"})," and ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"hide"})," events we can send to the\nmodel. So far using the model might look like this:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-jsx",children:"const Test = () => {\n  const model = useDisclosureModel();\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          if (model.state.visible) {\n            model.events.hide();\n          } else {\n            model.events.show();\n          }\n        }}\n      >\n        Toggle\n      </button>\n      <div hidden={model.state.visible ? undefined : true}>Content</div>\n    </>\n  );\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["You can find a working example here: ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://codesandbox.io/s/basic-disclosure-model-5gold",target:"_blank",rel:"nofollow noopener noreferrer",children:"https://codesandbox.io/s/basic-disclosure-model-5gold"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"It would be nice to add guards and callbacks to our events. Let's add configuration to our model:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"type DisclosureConfig = {\n  initialVisible?: boolean;\n  // guards\n  shouldShow?(data: void, state: DisclosureState): boolean;\n  shouldHide?(data: void, state: DisclosureState): boolean;\n  // callbacks\n  onShow?(data: void, prevState: DisclosureState): void;\n  onHide?(data: void, prevState: DisclosureState): void;\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"We'll also have to add the runtime of the guards and actions:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"const events = {\n  show() {\n    if (config.shouldShow?.(undefined, state) === false) {\n      return;\n    }\n    setVisible(true);\n    config.onShow?.(undefined, state);\n  },\n  hide() {\n    if (config.shouldHide?.(undefined, state) === false) {\n      return;\n    }\n    setVisible(false);\n    config.onHide?.(undefined, state);\n  },\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Now we should be able to configure the model via the guards and do something in the callbacks:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-jsx",children:"const Test = () => {\n  const [should, setShould] = React.useState(true);\n  const model = useDisclosureModel({\n    shouldShow(data, state) {\n      console.log('shouldShow', data, state, should);\n      return should;\n    },\n    shouldHide(data, state) {\n      console.log('shouldHide', data, state, should);\n      return should;\n    },\n    onShow(data, prevState) {\n      console.log('onShow', data, prevState);\n    },\n    onHide(data, prevState) {\n      console.log('onHide', data, prevState);\n    },\n  });\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          setShould(!should);\n        }}\n      >\n        Toggle \"should\"\n      </button>{' '}\n      Buttons below should {should ? '' : 'NOT'} work\n      <br />\n      <button\n        onClick={() => {\n          model.events.show();\n        }}\n      >\n        Show\n      </button>\n      <button\n        onClick={() => {\n          model.events.hide();\n        }}\n      >\n        Hide\n      </button>\n      <div hidden={model.state.visible ? undefined : true}>Content</div>\n      <br />\n      Check the console output\n    </>\n  );\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["You can see it in action here: ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://codesandbox.io/s/basic-configurable-disclosure-model-nuteg",target:"_blank",rel:"nofollow noopener noreferrer",children:"https://codesandbox.io/s/basic-configurable-disclosure-model-nuteg"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["That's a lot of extra boilerplate code for actions and callbacks. Our events don't have any data,\nbut if they did, we'd have to keep the event + guard and callback data types in sync. We are also\ncreating the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"events"})," object every render. We could use React refs and ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"React.useMemo"})," to decrease\nextra object creation. Luckily, the common module has the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createModelHook"})," factory function to help\nus reduce boilerplate and reduce the possibility of making mistakes."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createModelHook"})," creates a model and infers the config, state, and events. The callbacks and guard\ntypes will automatically be inferred."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// useDisclosureModel.ts\nimport {createModelHook} from '@workday/canvas-kit-react/common';\n\nexport const useDisclosureModel = createModelHook({\n  defaultConfig: {\n    initialVisible: false,\n  },\n})(config => {\n  const [visible, setVisible] = React.useState(config.initialVisible || false);\n\n  const state = {\n    visible,\n  };\n\n  const events = {\n    show() {\n      setVisible(true);\n    },\n    hide() {\n      setVisible(false);\n    },\n  };\n\n  return {state, events};\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createModelHook"})," takes a config object to determine the default config and the required config. We\nonly need default config. This function returns a function with a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"config"})," object with all config\ndefaults applied. This is the body of the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"useDisclosureModel"})," hook from earlier. Notice we don't\nneed to implement guards and callbacks directly inside our event implementations. ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createModelHook"}),"\nwill return an object that has that functionality built right in! Neat!"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The full working implementation is here:\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://codesandbox.io/s/configurable-disclosure-model-3y5qh",target:"_blank",rel:"nofollow noopener noreferrer",children:"https://codesandbox.io/s/configurable-disclosure-model-3y5qh"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"components",children:"Components"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Now that our model is figured out, we can work on the container component and sub-components. An\nexternal API might look something like this:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"<Disclosure>\n  <Disclosure.Target>Toggle</Disclosure.Target>\n  <Disclosure.Content>Content</Disclosure.Content>\n</Disclosure>\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<Disclosure>"})," is our container component and will be responsible for creating a\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureModel"})," if a model isn't passed in. The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<Disclosure.Target>"})," and ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<Disclosure.Content>"}),"\ncomponents are sub-components with specific functionality built into them. The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Target"})," controls the\nvisibility of the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Content"}),". We already created a simplified render function for our model, now\nlet's create the real components."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"disclosure-component",children:"Disclosure Component"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["First, let's create the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<Disclosure>"})," container component:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// Disclosure.tsx\nimport React from 'react';\n\nimport {DisclosureTarget} from './DisclosureTarget';\nimport {DisclosureContent} from './DisclosureContent';\nimport {useDisclosureModel} from './useDisclosureModel';\n\ntype DisclosureConfig = typeof useDisclosureModel.TConfig;\n\nexport interface DisclosureProps extends DisclosureConfig {\n  children: React.ReactNode;\n}\n\nconst DisclosureModelContext = useDisclosureModel.Context;\n\nexport const Disclosure = ({children, ...config}: DisclosureProps) => {\n  const model = useDisclosureModel(config);\n\n  return (\n    <DisclosureModelContext.Provider value={model}>{children}</DisclosureModelContext.Provider>\n  );\n};\n\nDisclosure.Target = DisclosureTarget;\nDisclosure.Content = DisclosureContent;\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["We can see that the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureProps"})," interface extends the config of ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"useDisclosureModel"}),".\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createModelHook"})," exposes a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"TConfig"})," property to capture the config type. This allows us to pass\nthe model config directly to the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<Disclosure>"})," component. A user of this ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<Disclosure>"})," component\nmight want to register a callback when the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"show"})," event is called, for instance."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createModelHook"})," creates a React Context that can be used by the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Disclosure"})," component to\nexpose the disclosure model to subcomponents without having to pass it via props. This allows our\ncompound component API to remain clean for consumers of compound components."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["In this particular compound component, the container component doesn't have a real element.\nAccessibility specifications have no ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"role"})," for this component, so an element is not required."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Let's go ahead and finish out our sub-components."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"disclosuretarget-component",children:"DisclosureTarget Component"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// DisclosureTarget.tsx\nimport React from 'react';\nimport React from 'react';\n\nimport {useDisclosureModel} from './useDisclosureModel';\n\nexport interface DisclosureTargetProps {\n  children: React.ReactNode;\n}\n\nexport const DisclosureTarget = ({children}: DisclosureTargetProps) => {\n  const model = React.useContext(useDisclosureModel.Context);\n\n  return (\n    <button\n      onClick={() => {\n        if (model.state.visible) {\n          model.events.hide();\n        } else {\n          model.events.show();\n        }\n      }}\n    >\n      {children}\n    </button>\n  );\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureTarget"})," component is in charge of the toggle button and it calls the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"show"})," or ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"hide"}),"\nevent on the model."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"disclosurecontent-component",children:"DisclosureContent Component"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// DisclosureContent.tsx\nimport React from 'react';\n\nimport {useDisclosureModel} from './useDisclosureModel';\n\nexport interface DisclosureContentProps {\n  children: React.ReactNode;\n}\n\nexport const DisclosureContent = ({children}: DisclosureContentProps) => {\n  const model = React.useContext(useDisclosureModel.Context);\n\n  return <div hidden={model.state.visible ? undefined : true}>{children}</div>;\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureContent"})," component is in charge of the content. It uses the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"visible"})," state value to\nset a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"hidden"})," attribute."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The working example can be found here:\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://codesandbox.io/s/configurable-disclosure-model-components-nvhtv",target:"_blank",rel:"nofollow noopener noreferrer",children:"https://codesandbox.io/s/configurable-disclosure-model-components-nvhtv"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["These components are not fully compliant yet. They do not support ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"model"}),", ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ref"}),", ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"as"}),", or extra\nprops as HTML attributes. Also, we have to use ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"typeof"})," to create types and a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureContext"}),"\nvariable (capitalized for JSX). We also have to worry about the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"model"})," prop. The boilerplate for\nsupporting all of this gets very complicated. For this reason, ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createContainer"})," and\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createSubcomponent"})," were created to handle this boilerplate for you out of the box. Both functions\ntake a default ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"React.ElementType"})," which can be an element string like ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"div"})," or ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"button"})," or a\ncomponent like ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Button"}),". It also takes a config object containing the following:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"displayName"}),": This will be the name of the component when shown by the React Dev tools. By\nconvention, we make that name be the same as typed in a render function. For example\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Disclosure.Target"})," vs ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureTarget"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"modelHook"}),": This is the model hook used by the compound component (",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"useDisclosureModel"})," in our\ncase). This model hook is used to determine proper prop types and seamlessly handle the option\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"model"})," prop. For ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createContainer"}),", if a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"model"})," is not passed, a model is created and added to\nReact Context. For ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createSubcomponent"}),", if a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"model"})," is not passed, the model comes from React\nContext."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"elemPropsHook"}),": This is the elemPropsHook that takes a model and elemProps and returns elemProps."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"subComponents"}),": For container components. A list of sub components to add to the returned\ncomponent. For example, a sub component called ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureTarget"})," will be added to the export of\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Disclosure"})," so that the user can import only ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Disclosure"})," and use ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Disclosure.Target"}),".\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"subComponents"})," is needed for Typescript because static properties cannot be added to predefined\ninterfaces. ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Disclosure.Target = DisclosureTarget"})," will caused a type error. This property allows\nthe ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createComponent"})," factory function to infer the final interface of the returned component."]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Finally, a generic function is returned that takes the component configuration. The first argument\nis ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"elemProps"})," with ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ref"})," and hook props already merged in with props handed to the component. The\nmodel config props will already be filtered out. We'll worry about ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"elemPropsHook"})," later. The second\nis an ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Element"})," property. ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Element"})," is the value passed to the Component's ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"as"})," prop. It will\ndefault to the provided element. The last parameter is an optional ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"model"})," reference. Ideally, the\nmodel is used in ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"elemPropsHook"})," and therefore not normally needed inside the render function."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Let's convert the Disclosure example to use the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createContainer"})," utility function to get this extra\nfunctionality:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// Disclosure.tsx\nimport React from 'react';\nimport {createContainer} from '@workday/canvas-kit-react/common';\n\nimport {DisclosureTarget} from './DisclosureTarget';\nimport {DisclosureContent} from './DisclosureContent';\nimport {useDisclosureModel} from './useDisclosureModel';\n\nexport interface DisclosureProps {}\n\nexport const Disclosure = createContainer()({\n  displayName: 'Disclosure',\n  modelHook: useDisclosureModel,\n  subComponents: {\n    Target: DisclosureTarget,\n    Content: DisclosureContent,\n  },\n})<DisclosureProps>(({children}) => {\n  return <>{children}</>;\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Notice we do not need to add ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"children"})," or ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"model"})," to our prop definition. ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createContainer"})," is\nadding those prop types for us. The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"displayName"})," helps identify the component in React developer\ntools. This is only needed by container components. The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"subComponents"})," automatically adds a\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"displayName"})," to subcomponents using the property key. For example, our ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureTarget"})," will have\na ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"displayName"})," of ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Disclosure.Target"}),". You can still provide a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"displayName"})," to override this\nnaming convention."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// DisclosureTarget.tsx\nimport React from 'react';\nimport {createSubcomponent} from '@workday/canvas-kit-react/common';\n\nimport {useDisclosureModel} from './useDisclosureModel';\n\nexport interface DisclosureTargetProps {}\n\nexport const DisclosureTarget = createSubcomponent('button')({\n  modelHook: useDisclosureModel,\n})<DisclosureTargetProps>((elemProps, Element, model) => {\n  return (\n    <Element\n      onClick={() => {\n        if (model.state.visible) {\n          model.events.hide();\n        } else {\n          model.events.show();\n        }\n      }}\n      {...elemProps}\n    />\n  );\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// DisclosureContent.tsx\nimport React from 'react';\nimport {createSubcomponent} from '@workday/canvas-kit-react/common';\n\nimport {useDisclosureModel} from './useDisclosureModel';\n\nexport interface DisclosureContentProps {}\n\nexport const DisclosureContent = createSubcomponent('div')({\n  modelHook: useDisclosureModel,\n})<DisclosureContentProps>(({children, ...elemProps}, Element, model) => {\n  return (\n    <Element hidden={model.state.visible ? undefined : true} {...elemProps}>\n      {children}\n    </Element>\n  );\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"as"})," prop is being passed to the second argument in the and we're calling it ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Element"}),". The\nvariable is passed to JSX as ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<Element>"}),". ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Element"})," is capitalized because the JSX parser treats\ncapitalized elements as variables and lower case elements as strings:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"() => <Div />;\n() => <div />;\n\n// transpiled output:\n() => React.createElement(Div, null);\n() => React.createElement('div', null);\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://www.typescriptlang.org/play?ssl=2&ssc=14&pln=1&pc=1#code/BQSgBAvAfGA8AiBLAbmA9FAUKSNYBMV0og",target:"_blank",rel:"nofollow noopener noreferrer",children:"Typescript Playground"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["In our example, there are no styles associated with ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Target"})," or ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Content"})," sub-components, so we\nrender ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"as"})," as an element. If we were using Emotion's ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"styled"})," components, we'd pass the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"as"})," like\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<StyledElement as={Element}>"}),". Using the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"as"})," prop this way retains styles while ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<Element>"})," does\nnot. Use ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<Element>"})," when styling should come from the passed in element and use\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<StyledElement as={Element}>"})," when the component handles styling."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createContainer"})," and ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createSubcomponent"})," return a component with a type interface that includes\nref forwarding, the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"as"})," prop for changing the underlying element, the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"model"})," prop, and additional\nattributes/props the element type normally takes."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"For example, we can now do the following:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:'<Disclosure>\n  <Disclosure.Target ref={targetRef} data-testid="target-button">\n    Toggle\n  </Disclosure.Target>\n  <Disclosure.Content as="section">Content</Disclosure.Content>\n</Disclosure>\n'})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["In this example, we added a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"data-testid"})," to the Disclosure ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Target"})," element and rendered the\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Content"})," element as a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"section"})," tag."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The full code can be found here:\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://codesandbox.io/s/configurable-disclosure-model-components-utility-pk9s6",target:"_blank",rel:"nofollow noopener noreferrer",children:"https://codesandbox.io/s/configurable-disclosure-model-components-utility-pk9s6"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"model-composition",children:"Model Composition"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Our example isn't fully accessible yet. The Disclosure target needs a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"aria-controls"})," attribute to\ntie the target and content in the accessibility tree. This is done by the use of id references\n(string IDs that starts with a letter). We could add an ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"id"})," to our model, but it is extremely\ncommon so let's make a new model and compose from it instead. We'll later use this model in a\nreusable behavioral hook."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// useIDModel.ts\nimport {Model, useUniqueId} from '@workday/canvas-kit-react/common';\n\nexport type IDState = {\n  id: string;\n};\n\nexport type IDEvents = {};\n\nexport type IDModel = Model<IDState, IDEvents>;\n\nexport type IDConfig = {\n  id?: string;\n};\n\nexport const useIDModel = (config: IDConfig = {}) => {\n  const id = useUniqueId(config.id);\n\n  const state = {\n    id,\n  };\n\n  const events = {};\n\n  return {state, events};\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["This model only provides an ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"id"})," since that's all that is needed for id reference functionality.\nAlso later we'll add behavioral hook that will require this model."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Let's update the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureModel"})," to compose the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"IDModel"}),":"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// useDisclosureModel.ts\nimport React from 'react';\n\nimport {createModelHook} from '@workday/canvas-kit-react/common';\n\nimport {useIDModel} from './useIDModel';\n\nexport const useDisclosureModel = createModelHook({\n  defaultConfig: {\n    ...useIDModel.defaultConfig,\n    initialVisible: false,\n  },\n})(config => {\n  const [visible, setVisible] = React.useState(config.initialVisible || false);\n  const idModel = useIDModel(config);\n\n  const state = {\n    ...idModel.state,\n    visible,\n  };\n\n  const events = {\n    ...idModel.events,\n    show() {\n      setVisible(true);\n    },\n    hide() {\n      setVisible(false);\n    },\n  };\n\n  return {state, events};\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["We can now add ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"aria-controls"})," to ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureTarget"})," and ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"id"})," to ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureContent"}),". We'll also add\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"aria-expanded"})," to ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureTarget"})," to finish off the accessibility specifications:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// DisclosureTarget.tsx\n\n// ...\n\nreturn (\n  <Element\n    aria-controls={model.state.id}\n    aria-expanded={model.state.visible}\n    onClick={() => {\n      if (model.state.visible) {\n        model.events.hide();\n      } else {\n        model.events.show();\n      }\n    }}\n    {...elemProps}\n  >\n    {children}\n  </Element>\n);\n\n// ...\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// DisclosureContent.tsx\n\n// ...\n\nreturn (\n  <Element id={model.state.id} hidden={model.state.visible ? undefined : true} {...elemProps}>\n    {children}\n  </Element>\n);\n\n// ...\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Here's the working example now: ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://codesandbox.io/s/disclosure-composable-model-9shjn",target:"_blank",rel:"nofollow noopener noreferrer",children:"https://codesandbox.io/s/disclosure-composable-model-9shjn"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"At this point, we have an accessible disclosure compound component that composes 2 models. But the\ndisclosure pattern is more than just the component level. For example, a tooltip uses the disclosure\npattern as well. Let's extract out some behaviors into hooks."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"behavior-hooks",children:"Behavior Hooks"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Behavior hooks allow us to reuse pieces of functionality in difference components. For example, the\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tabs"})," component utilizes a cursor hook for keyboard navigation even though the UI of tabs and the\nUI of a dropdown menu look very different!"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["We'll build a behavior hook for the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureTarget"})," component:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// useExpandableControls.ts\nimport {useDisclosureModel} from './useDisclosureModel';\n\nexport const useExpandableControls = (\n  {state}: ReturnType<typeof useDisclosureModel>,\n  elemProps = {},\n  ref?: React.Ref<any>\n) => {\n  return {\n    'aria-controls': state.id,\n    'aria-expanded': state.visible,\n    ...elemProps,\n  };\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["At this point, we should reiterate that compound components should always merge passed in props\nproperly. If the prop is a primitive prop, it should ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em,{children:"override"})," the props of the component. If the\nprop is a callback function like ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"onClick"}),", the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"style"})," tag or the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"css"})," prop, they should be merged\nproperly. Luckily, the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"common"})," package has a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"mergeProps"})," utility function that takes care of this\nfor us. Hooks can use an optional 3rd parameter that is a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ref"})," if they need to fork the ref. We\nwon't get into that here, but it is useful and works with ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"composeHooks"})," that is available via the\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"common"})," module. Let's refactor the above to use that function:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// useExpandableControls.ts\nimport {mergeProps} from '@workday/canvas-kit-react/common';\nimport {useDisclosureModel} from './useDisclosureModel';\n\nexport const useExpandableControls = (\n  {state}: ReturnType<typeof useDisclosureModel>,\n  elemProps = {},\n  ref?: React.Ref<any>\n) => {\n  return mergeProps(\n    {\n      'aria-controls': state.id,\n      'aria-expanded': state.visible,\n    },\n    elemProps\n  );\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Even though the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"useExpandableControls"})," did not use any special props that need special merging, it\nis a good habit to use ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"mergeProps"})," anytime you define props."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["This is still a lot of boilerplate. We need the return type of the model hook, we need to specify\nthat our hook can optionally accept ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"elemProps"})," and a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ref"}),", and we need to call ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"mergeProps"}),".\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createElemPropsHook"})," helps with a lot of this boilerplate:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"import {createElemPropsHook} from '@workday/canvas-kit-react/common';\nimport {useDisclosureModel} from './useDisclosureModel';\n\nexport const useExpandableControls = createElemPropsHook(useDisclosureModel)(({state}) => {\n  return {\n    'aria-controls': state.id,\n    'aria-expanded': state.visible,\n  };\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createElemPropsHook"})," takes the model hook and an elem props hook body as arguments. The hook\nfunction body doesn't need to call ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"mergeProps"})," since ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createElemPropsHook"})," takes care of that for\nus. Our logic can focus only on the props we need to add to an element!"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:['Now we have a reusable elemProps hook that can be composed into other hooks or used on its own.\n"expandable controls" could be used on a select component, a popup component, or any other type of\ndisclosure target component. We don\'t add the ',(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"onClick"})," because how the disclosure is revealed\ndepends on the disclosure target type. In a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Select"})," component, that could be by clicking on the\ntarget, or using the down arrow. On a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tooltip"})," component, it could be revealed by a mouse hover or\nfocus event. Lets create a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"useDisclosureTarget"})," elemProps hook that merges in an ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"onClick"})," with\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"useExpandableControls"}),":"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// useDisclosureTarget.ts\nimport {createElemPropsHook, mergeProps} from '@workday/canvas-kit-react/common';\nimport {useDisclosureModel} from './useDisclosureModel';\nimport {useExpandableControls} from './useExpandableControls';\n\nexport const useDisclosureTarget = createElemPropsHook(useDisclosureModel)(\n  (model, ref, elemProps) => {\n    const props = useExpandableControls(model, elemProps, ref);\n\n    return mergeProps(\n      {\n        onClick() {\n          if (model.state.visible) {\n            model.events.hide();\n          } else {\n            model.events.show();\n          }\n        },\n      },\n      props\n    );\n  }\n);\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Notice we still need to use ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"mergeProps"})," to compose the behavior of our two elemProps hooks?\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"composeHooks"})," was created to handle this common composition use case. ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"composeHooks"})," takes two or\nmore elemProps hooks and returns a new hook with all props merged for us:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// useDisclosureTarget.ts\nimport {createElemPropsHook, composeHooks} from '@workday/canvas-kit-react/common';\nimport {useDisclosureModel} from './useDisclosureModel';\nimport {useExpandableControls} from './useExpandableControls';\n\nexport const useDisclosureTarget = composeHooks(\n  createElemPropsHook(useDisclosureModel)(model => {\n    return {\n      onClick() {\n        if (model.state.visible) {\n          model.events.hide();\n        } else {\n          model.events.show();\n        }\n      },\n    };\n  }),\n  useExpandableControls\n);\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["We don't even need to declare ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"elemProps"})," or ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ref"})," parameters if we don't use them!"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Now we can use the behavior hook in the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DiscloseTarget"})," component:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// DisclosureTarget.tsx\nimport React from 'react';\nimport {createSubcomponent} from '@workday/canvas-kit-react/common';\n\nimport {useDisclosureModel} from './useDisclosureModel';\nimport {useDisclosureTarget} from './useDisclosureTarget';\n\nexport interface DisclosureTargetProps {}\n\nexport const DisclosureTarget = createSubcomponent('button')({\n  modelHook: useDisclosureModel,\n})<DisclosureTargetProps>((elemProps, Element, model) => {\n  const props = useDisclosureTarget(model, elemProps);\n  return <Element {...props} />;\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Note: We should never use ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createElemPropsHook"})," or ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"composeHooks"})," inside a render function as that\nwould be slower. Always hoist the hook definition outside a render function."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["It is very common to use an elemProps hook with a compound component, so ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createContainer"})," and\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createSubcomponent"})," both take an ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"elemPropsHook"})," configuration option. This way we don't have to\nworry about the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"model"})," or using ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"mergeProps"})," in our component definition. Here's the final code."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// DisclosureTarget.tsx\nimport React from 'react';\nimport {createSubcomponent} from '@workday/canvas-kit-react/common';\n\nimport {useDisclosureModel} from './useDisclosureModel';\nimport {useDisclosureTarget} from './useDisclosureTarget';\n\nexport interface DisclosureTargetProps {}\n\nexport const DisclosureTarget = createSubcomponent('button')({\n  modelHook: useDisclosureModel,\n  elemPropsHook: useDisclosureTarget,\n})<DisclosureTargetProps>((elemProps, Element) => {\n  return <Element {...elemProps} />;\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["We'll also make a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"useDisclosureContent"})," behavior hook for the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"hidden"})," attribute on the\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Disclosure.Content"})," element:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// useDisclosureContent.ts\nimport {createElemPropsHook} from '@workday/canvas-kit-react/common';\nimport {useDisclosureModel} from './useDisclosureModel';\n\nexport const useDisclosureContent = createElemPropsHook(useDisclosureModel)(model => {\n  return {\n    id: model.state.id,\n    hidden: model.state.visible ? undefined : true,\n  };\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Disclosure.Content"})," subcomponent can now be updated to use this hook:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// DisclosureContent.tsx\nimport React from 'react';\nimport {createSubcomponent} from '@workday/canvas-kit-react/common';\n\nimport {useDisclosureModel} from './useDisclosureModel';\nimport {useDisclosureContent} from './useDisclosureContent';\n\nexport interface DisclosureContentProps {}\n\nexport const DisclosureContent = createSubcomponent('div')({\n  modelHook: useDisclosureModel,\n  elemPropsHook: useDisclosureContent,\n})<DisclosureContentProps>(({children, ...elemProps}, Element) => {\n  return <Element {...elemProps}>{children}</Element>;\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The full code can be found here:\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://codesandbox.io/s/disclosure-composable-model-behavior-hooks-iwzl8",target:"_blank",rel:"nofollow noopener noreferrer",children:"https://codesandbox.io/s/disclosure-composable-model-behavior-hooks-iwzl8"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"composing-compound-components",children:"Composing Compound Components"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Having composable models, behaviors, and components means we can reuse parts of other compound\ncomponents. For example, let's make a simple tooltip component that has a target and content,\nsimilar to the disclosure component, but behaves differently. A tooltip shows and hides based on\nmouse and focus events."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Here's a tooltip model composing the disclosure model:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// useTooltipModel.ts\nimport {createModelHook} from '@workday/canvas-kit-react/common';\n\nimport {useDisclosureModel} from './useDisclosureModel';\n\nconst {\n  initialVisible, // tooltips are never initially visible, so remove the option\n  ...defaultConfig\n} = useDisclosureModel.defaultConfig;\n\nexport const useTooltipModel = createModelHook({\n  defaultConfig,\n  requiredConfig: useDisclosureModel.requiredConfig,\n})(config => {\n  return useDisclosureModel(config);\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Not much interesting is happening here. We're not adding additional state or events, but we're\nremoving the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"initialVisible"})," config option from the model."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"The final Tooltip compound component API will look something like this when we're done:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"<Tooltip>\n  <Tooltip.Target>Target</Tooltip.Target>\n  <Tooltip.Content>The content of the Tooltip</Tooltip>\n</Tooltip>\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tooltip"})," container component looks almost exactly like the Disclosure component:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// Tooltip.tsx\nimport React from 'react';\nimport {createContainer} from '@workday/canvas-kit-react/common';\n\nimport {useTooltipModel} from './useTooltipModel';\nimport {TooltipTarget} from './TooltipTarget';\nimport {TooltipContent} from './TooltipContent';\n\nexport interface TooltipProps {\n  children?: React.ReactNode;\n}\n\nexport const Tooltip = createContainer()({\n  displayName: 'Tooltip',\n  modelHook: useTooltipModel,\n  subComponents: {\n    Target: TooltipTarget,\n    Content: TooltipContent,\n  },\n})(({children}: TooltipProps) => {\n  return <>{children}</>;\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tooltip.Target"})," component is similar to the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DisclosureTarget"})," component, but has different\nbehavior. The tooltip triggers on different events. Here's the code:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// TooltipTarget.tsx\nimport React from 'react';\nimport {createSubcomponent, createElemPropsHook} from '@workday/canvas-kit-react/common';\n\nimport {useTooltipModel} from './useTooltipModel';\n\nexport interface TooltipTargetProps {\n  children: React.ReactNode;\n}\n\nexport const useTooltipTarget = createElemPropsHook(useTooltipModel)(({state, events}) => {\n  return {\n    onFocus(event: any) {\n      events.show();\n    },\n    onBlur() {\n      events.hide();\n    },\n    onMouseEnter() {\n      events.show();\n    },\n    onMouseLeave() {\n      events.hide();\n    },\n    'aria-describedby': state.id,\n  };\n});\n\nexport const TooltipTarget = createSubcomponent('button')({\n  displayName: 'Tooltip.Target',\n  modelHook: useTooltipModel,\n  elemPropsHook: useTooltipTarget,\n})<TooltipTargetProps>(({children, ...elemProps}, Element) => {\n  return <Element {...elemProps}>{children}</Element>;\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tooltip.Target"})," component also uses the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"aria-described"})," for accessibility. The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"state.id"}),"\ncomes from the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"IDModel"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tooltip.Content"})," component is similar to the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Disclosure.Content"})," component, except that it\nuses a ReactDOM portal to ensure the content appears on top of other content. This example doesn't\ninclude a positional library and instead hard-codes positional values. Notice we can reuse our\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"useDisclosureContent"})," behavior hook in this component!"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  createSubcomponent,\n  createElemPropsHook,\n  composeHooks,\n} from '@workday/canvas-kit-react/common';\n\nimport {useDisclosureContent} from './useDisclosureContent';\nimport {useTooltipModel} from './useTooltipModel';\n\nexport interface TooltipContentProps {}\n\nconst useTooltipContent = composeHooks(\n  createElemPropsHook(useTooltipModel)(model => {\n    return {\n      style: {position: 'absolute', left: 80, top: 10},\n    };\n  }),\n  useDisclosureContent\n);\n\nexport const TooltipContent = createSubcomponent('div')({\n  modelHook: useTooltipModel,\n  elemPropsHook: useTooltipContent,\n})<TooltipContentProps>(({children, ...elemProps}, Element, model) => {\n  return ReactDOM.createPortal(\n    model.state.id ? <Element {...elemProps}>{children}</Element> : null,\n    document.body\n  );\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The tooltip target could be anything. By default it is a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"button"})," element since tooltips need to\nreceive focus. What if we want a tooltip around the disclosure target element without introducing\nanother ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"button"})," element? This is where the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"as"})," prop comes in handy:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"<Disclosure>\n  <Tooltip>\n    <Tooltip.Target as={Disclosure.Target}>Toggle</Tooltip.Target>\n    <Tooltip.Content>Tooltip!</Tooltip.Content>\n  </Tooltip>\n  <Disclosure.Content>Content</Disclosure.Content>\n</Disclosure>\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["In the example, we can see the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Tooltip.Target"})," element will be the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Disclosure.Target"})," element."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Here's the working example:\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://codesandbox.io/s/disclosure-composable-model-behavior-hooks-tooltip-df7ht",target:"_blank",rel:"nofollow noopener noreferrer",children:"https://codesandbox.io/s/disclosure-composable-model-behavior-hooks-tooltip-df7ht"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"wrap-it-up",children:"Wrap it up"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Hopefully, by now, you have a much better idea how compound components work internally and how to\ncreate your own. Model composition is a powerful way to create more complex models out of smaller\nparts. Compound components can be composed to make much more complicated UIs."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"This API seems more verbose, but it is extremely flexible. The nice thing about a compound component\nAPI is we can create more terse components out of them. We expect applications to create wrapper\ncomponents the have a more tightly controlled interface. For example, if we wanted an expandable\ncomponent with a tooltip baked in, we could create a component API like this:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:'<Expandable tooltipText="Tooltip!" targetText="Toggle">\n  Content\n</Expandable>\n'})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["We'll make an ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Expandable"})," component that abstracts the compound component API for re-use in\napplications (expandable components are so in these days!):"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// Expandable.tsx\nimport React from 'react';\n\nimport {Disclosure} from './Disclosure';\nimport {Tooltip} from './Tooltip';\n\nexport interface ExpandableProps {\n  tooltipText: string;\n  targetText: string;\n  children: React.ReactNode;\n}\n\nexport const Expandable = ({tooltipText, targetText, children}: ExpandableProps) => {\n  return (\n    <Disclosure>\n      <Tooltip>\n        <Tooltip.Target as={Disclosure.Target}>{targetText}</Tooltip.Target>\n        <Tooltip.Content>{tooltipText}</Tooltip.Content>\n      </Tooltip>\n      <Disclosure.Content>{children}</Disclosure.Content>\n    </Disclosure>\n  );\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"This configuration API has lost the flexibility of the compound component API, but it is simpler to\nuse. Applications can create these APIs for internal components since they know more about the\ncontext that a component will live in. Things like how to do translations, if there's any additional\nattributes to add (test ids or analytics metadata)."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The full working code can be found here:\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://codesandbox.io/s/disclosure-composable-model-behavior-hooks-tooltip-wrapped-2u8mk",target:"_blank",rel:"nofollow noopener noreferrer",children:"https://codesandbox.io/s/disclosure-composable-model-behavior-hooks-tooltip-wrapped-2u8mk"})]})]})}const __WEBPACK_DEFAULT_EXPORT__=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__.RP)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,Object.assign({},props,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,props)})):_createMdxContent(props)}},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{var f=__webpack_require__("./node_modules/react/index.js"),k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,g){var b,d={},e=null,h=null;for(b in void 0!==g&&(e=""+g),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(h=a.ref),a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l,exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")}}]);