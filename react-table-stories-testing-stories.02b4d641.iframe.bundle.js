"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[3688],{"./modules/react/table/stories/testing.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.TableStates=void 0;(function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}})(__webpack_require__("./node_modules/react/index.js"));var _testing=__webpack_require__("./modules/react/testing/index.ts"),_table=__webpack_require__("./modules/react/table/index.ts"),_layout=__webpack_require__("./modules/react/layout/index.ts"),_text=__webpack_require__("./modules/react/text/index.ts"),_canvasTokensWeb=__webpack_require__("./node_modules/@workday/canvas-tokens-web/dist/es6/index.js"),_canvasKitStyling=__webpack_require__("./modules/styling/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");exports.default={title:"Testing/Containers/Table",component:_table.Table,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import React from 'react';\\n\\nimport {StaticStates} from '@workday/canvas-kit-react/testing';\\n\\n// unreleased path\\nimport {Table} from '@workday/canvas-kit-react/table';\\nimport {Flex} from '@workday/canvas-kit-react/layout';\\nimport {Heading} from '@workday/canvas-kit-react/text';\\nimport {system} from '@workday/canvas-tokens-web';\\nimport {createStencil, px2rem} from '@workday/canvas-kit-styling';\\n\\nexport default {\\n  title: 'Testing/Containers/Table',\\n  component: Table,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nconst Standard = () => (\\n  <Table>\\n    <Table.Caption>Table Caption</Table.Caption>\\n    <Table.Head>\\n      <Table.Row>\\n        <Table.Header>Table Header</Table.Header>\\n        <Table.Header>Table Header</Table.Header>\\n      </Table.Row>\\n    </Table.Head>\\n    <Table.Body>\\n      <Table.Row>\\n        <Table.Header>Table Header</Table.Header>\\n        <Table.Header>Table Header</Table.Header>\\n      </Table.Row>\\n      <Table.Row>\\n        <Table.Header>Table Header</Table.Header>\\n        <Table.Cell>Table Data Cell</Table.Cell>\\n      </Table.Row>\\n      <Table.Row>\\n        <Table.Header>Table Header</Table.Header>\\n        <Table.Cell>Table Data Cell</Table.Cell>\\n      </Table.Row>\\n    </Table.Body>\\n    <Table.Footer>\\n      <Table.Row>\\n        <Table.Header>Table Header</Table.Header>\\n        <Table.Cell>Table Data Cell</Table.Cell>\\n      </Table.Row>\\n    </Table.Footer>\\n  </Table>\\n);\\n\\nconst exampleData = [\\n  {\\n    header: 'Example Header',\\n    cell: 'Example Cell',\\n  },\\n  {\\n    header: 'Example Header',\\n    cell: 'Example Cell',\\n  },\\n  {\\n    header: 'Example Header',\\n    cell: 'Example Cell',\\n  },\\n  {\\n    header: 'Example Header',\\n    cell: 'Example Cell',\\n  },\\n];\\n\\nconst tableHeaderStencil = createStencil({\\n  base: {\\n    backgroundColor: system.color.bg.alt.softer,\\n    borderRight: `${px2rem(1)} solid ${system.color.border.divider}`,\\n  },\\n  modifiers: {\\n    variant: {\\n      sticky: {\\n        position: 'sticky',\\n        left: system.space.zero,\\n        zIndex: 2,\\n      },\\n    },\\n  },\\n});\\n\\nconst FixedColumn = () => (\\n  <>\\n    <Heading size=\\\"small\\\">Table Heading</Heading>\\n    <Table>\\n      <Table.Head>\\n        <Table.Row>\\n          <Table.Header {...tableHeaderStencil({variant: 'sticky'})}>Header</Table.Header>\\n          {Array.from({length: 7}).map((_, i) => (\\n            <Table.Header key={i} {...tableHeaderStencil()}>\\n              Header\\n            </Table.Header>\\n          ))}\\n        </Table.Row>\\n      </Table.Head>\\n      <Table.Body>\\n        {exampleData.map(item => (\\n          <>\\n            <Table.Row>\\n              <Table.Header {...tableHeaderStencil({variant: 'sticky'})}>\\n                {item.header}\\n              </Table.Header>\\n              {Array.from({length: 7}).map((_, i) => (\\n                <Table.Cell key={i} {...tableHeaderStencil()}>\\n                  {item.cell}\\n                </Table.Cell>\\n              ))}\\n            </Table.Row>\\n          </>\\n        ))}\\n      </Table.Body>\\n    </Table>\\n  </>\\n);\\n\\nexport const TableStates = {\\n  render: () => {\\n    return (\\n      <StaticStates>\\n        <Flex gap=\\\"xs\\\" flexDirection=\\\"column\\\">\\n          <div>\\n            <h3>Standard</h3>\\n            <Standard />\\n          </div>\\n          <div>\\n            <h3>Fixed Column with Heading</h3>\\n            <FixedColumn />\\n          </div>\\n        </Flex>\\n      </StaticStates>\\n    );\\n  },\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"TableStates\": {\n    \"startLoc\": {\n      \"col\": 27,\n      \"line\": 123\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 140\n    },\n    \"startBody\": {\n      \"col\": 27,\n      \"line\": 123\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 140\n    }\n  }\n};\n    \nimport React from 'react';\n\nimport {StaticStates} from '@workday/canvas-kit-react/testing';\n\n// unreleased path\nimport {Table} from '@workday/canvas-kit-react/table';\nimport {Flex} from '@workday/canvas-kit-react/layout';\nimport {Heading} from '@workday/canvas-kit-react/text';\nimport {system} from '@workday/canvas-tokens-web';\nimport {createStencil, px2rem} from '@workday/canvas-kit-styling';\n\nexport default {\n  title: 'Testing/Containers/Table',\n  component: Table,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import React from 'react';\\n\\nimport {StaticStates} from '@workday/canvas-kit-react/testing';\\n\\n// unreleased path\\nimport {Table} from '@workday/canvas-kit-react/table';\\nimport {Flex} from '@workday/canvas-kit-react/layout';\\nimport {Heading} from '@workday/canvas-kit-react/text';\\nimport {system} from '@workday/canvas-tokens-web';\\nimport {createStencil, px2rem} from '@workday/canvas-kit-styling';\\n\\nexport default {\\n  title: 'Testing/Containers/Table',\\n  component: Table,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nconst Standard = () => (\\n  <Table>\\n    <Table.Caption>Table Caption</Table.Caption>\\n    <Table.Head>\\n      <Table.Row>\\n        <Table.Header>Table Header</Table.Header>\\n        <Table.Header>Table Header</Table.Header>\\n      </Table.Row>\\n    </Table.Head>\\n    <Table.Body>\\n      <Table.Row>\\n        <Table.Header>Table Header</Table.Header>\\n        <Table.Header>Table Header</Table.Header>\\n      </Table.Row>\\n      <Table.Row>\\n        <Table.Header>Table Header</Table.Header>\\n        <Table.Cell>Table Data Cell</Table.Cell>\\n      </Table.Row>\\n      <Table.Row>\\n        <Table.Header>Table Header</Table.Header>\\n        <Table.Cell>Table Data Cell</Table.Cell>\\n      </Table.Row>\\n    </Table.Body>\\n    <Table.Footer>\\n      <Table.Row>\\n        <Table.Header>Table Header</Table.Header>\\n        <Table.Cell>Table Data Cell</Table.Cell>\\n      </Table.Row>\\n    </Table.Footer>\\n  </Table>\\n);\\n\\nconst exampleData = [\\n  {\\n    header: 'Example Header',\\n    cell: 'Example Cell',\\n  },\\n  {\\n    header: 'Example Header',\\n    cell: 'Example Cell',\\n  },\\n  {\\n    header: 'Example Header',\\n    cell: 'Example Cell',\\n  },\\n  {\\n    header: 'Example Header',\\n    cell: 'Example Cell',\\n  },\\n];\\n\\nconst tableHeaderStencil = createStencil({\\n  base: {\\n    backgroundColor: system.color.bg.alt.softer,\\n    borderRight: `${px2rem(1)} solid ${system.color.border.divider}`,\\n  },\\n  modifiers: {\\n    variant: {\\n      sticky: {\\n        position: 'sticky',\\n        left: system.space.zero,\\n        zIndex: 2,\\n      },\\n    },\\n  },\\n});\\n\\nconst FixedColumn = () => (\\n  <>\\n    <Heading size=\\\"small\\\">Table Heading</Heading>\\n    <Table>\\n      <Table.Head>\\n        <Table.Row>\\n          <Table.Header {...tableHeaderStencil({variant: 'sticky'})}>Header</Table.Header>\\n          {Array.from({length: 7}).map((_, i) => (\\n            <Table.Header key={i} {...tableHeaderStencil()}>\\n              Header\\n            </Table.Header>\\n          ))}\\n        </Table.Row>\\n      </Table.Head>\\n      <Table.Body>\\n        {exampleData.map(item => (\\n          <>\\n            <Table.Row>\\n              <Table.Header {...tableHeaderStencil({variant: 'sticky'})}>\\n                {item.header}\\n              </Table.Header>\\n              {Array.from({length: 7}).map((_, i) => (\\n                <Table.Cell key={i} {...tableHeaderStencil()}>\\n                  {item.cell}\\n                </Table.Cell>\\n              ))}\\n            </Table.Row>\\n          </>\\n        ))}\\n      </Table.Body>\\n    </Table>\\n  </>\\n);\\n\\nexport const TableStates = {\\n  render: () => {\\n    return (\\n      <StaticStates>\\n        <Flex gap=\\\"xs\\\" flexDirection=\\\"column\\\">\\n          <div>\\n            <h3>Standard</h3>\\n            <Standard />\\n          </div>\\n          <div>\\n            <h3>Fixed Column with Heading</h3>\\n            <FixedColumn />\\n          </div>\\n        </Flex>\\n      </StaticStates>\\n    );\\n  },\\n};\\n\",\n    \"locationsMap\": {\n      \"table-states\": {\n        \"startLoc\": {\n          \"col\": 27,\n          \"line\": 123\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 140\n        },\n        \"startBody\": {\n          \"col\": 27,\n          \"line\": 123\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 140\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nconst Standard = () => (\n  <Table>\n    <Table.Caption>Table Caption</Table.Caption>\n    <Table.Head>\n      <Table.Row>\n        <Table.Header>Table Header</Table.Header>\n        <Table.Header>Table Header</Table.Header>\n      </Table.Row>\n    </Table.Head>\n    <Table.Body>\n      <Table.Row>\n        <Table.Header>Table Header</Table.Header>\n        <Table.Header>Table Header</Table.Header>\n      </Table.Row>\n      <Table.Row>\n        <Table.Header>Table Header</Table.Header>\n        <Table.Cell>Table Data Cell</Table.Cell>\n      </Table.Row>\n      <Table.Row>\n        <Table.Header>Table Header</Table.Header>\n        <Table.Cell>Table Data Cell</Table.Cell>\n      </Table.Row>\n    </Table.Body>\n    <Table.Footer>\n      <Table.Row>\n        <Table.Header>Table Header</Table.Header>\n        <Table.Cell>Table Data Cell</Table.Cell>\n      </Table.Row>\n    </Table.Footer>\n  </Table>\n);\n\nconst exampleData = [\n  {\n    header: 'Example Header',\n    cell: 'Example Cell',\n  },\n  {\n    header: 'Example Header',\n    cell: 'Example Cell',\n  },\n  {\n    header: 'Example Header',\n    cell: 'Example Cell',\n  },\n  {\n    header: 'Example Header',\n    cell: 'Example Cell',\n  },\n];\n\nconst tableHeaderStencil = createStencil({\n  base: {\n    backgroundColor: system.color.bg.alt.softer,\n    borderRight: `${px2rem(1)} solid ${system.color.border.divider}`,\n  },\n  modifiers: {\n    variant: {\n      sticky: {\n        position: 'sticky',\n        left: system.space.zero,\n        zIndex: 2,\n      },\n    },\n  },\n});\n\nconst FixedColumn = () => (\n  <>\n    <Heading size=\"small\">Table Heading</Heading>\n    <Table>\n      <Table.Head>\n        <Table.Row>\n          <Table.Header {...tableHeaderStencil({variant: 'sticky'})}>Header</Table.Header>\n          {Array.from({length: 7}).map((_, i) => (\n            <Table.Header key={i} {...tableHeaderStencil()}>\n              Header\n            </Table.Header>\n          ))}\n        </Table.Row>\n      </Table.Head>\n      <Table.Body>\n        {exampleData.map(item => (\n          <>\n            <Table.Row>\n              <Table.Header {...tableHeaderStencil({variant: 'sticky'})}>\n                {item.header}\n              </Table.Header>\n              {Array.from({length: 7}).map((_, i) => (\n                <Table.Cell key={i} {...tableHeaderStencil()}>\n                  {item.cell}\n                </Table.Cell>\n              ))}\n            </Table.Row>\n          </>\n        ))}\n      </Table.Body>\n    </Table>\n  </>\n);\n\nexport const TableStates = {\n  render: () => {\n    return (\n      <StaticStates>\n        <Flex gap=\"xs\" flexDirection=\"column\">\n          <div>\n            <h3>Standard</h3>\n            <Standard />\n          </div>\n          <div>\n            <h3>Fixed Column with Heading</h3>\n            <FixedColumn />\n          </div>\n        </Flex>\n      </StaticStates>\n    );\n  },\n};\n",locationsMap:{"table-states":{startLoc:{col:27,line:174},endLoc:{col:1,line:191},startBody:{col:27,line:174},endBody:{col:1,line:191}}}},storySource:{source:"import React from 'react';\n\nimport {StaticStates} from '@workday/canvas-kit-react/testing';\n\n// unreleased path\nimport {Table} from '@workday/canvas-kit-react/table';\nimport {Flex} from '@workday/canvas-kit-react/layout';\nimport {Heading} from '@workday/canvas-kit-react/text';\nimport {system} from '@workday/canvas-tokens-web';\nimport {createStencil, px2rem} from '@workday/canvas-kit-styling';\n\nexport default {\n  title: 'Testing/Containers/Table',\n  component: Table,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nconst Standard = () => (\n  <Table>\n    <Table.Caption>Table Caption</Table.Caption>\n    <Table.Head>\n      <Table.Row>\n        <Table.Header>Table Header</Table.Header>\n        <Table.Header>Table Header</Table.Header>\n      </Table.Row>\n    </Table.Head>\n    <Table.Body>\n      <Table.Row>\n        <Table.Header>Table Header</Table.Header>\n        <Table.Header>Table Header</Table.Header>\n      </Table.Row>\n      <Table.Row>\n        <Table.Header>Table Header</Table.Header>\n        <Table.Cell>Table Data Cell</Table.Cell>\n      </Table.Row>\n      <Table.Row>\n        <Table.Header>Table Header</Table.Header>\n        <Table.Cell>Table Data Cell</Table.Cell>\n      </Table.Row>\n    </Table.Body>\n    <Table.Footer>\n      <Table.Row>\n        <Table.Header>Table Header</Table.Header>\n        <Table.Cell>Table Data Cell</Table.Cell>\n      </Table.Row>\n    </Table.Footer>\n  </Table>\n);\n\nconst exampleData = [\n  {\n    header: 'Example Header',\n    cell: 'Example Cell',\n  },\n  {\n    header: 'Example Header',\n    cell: 'Example Cell',\n  },\n  {\n    header: 'Example Header',\n    cell: 'Example Cell',\n  },\n  {\n    header: 'Example Header',\n    cell: 'Example Cell',\n  },\n];\n\nconst tableHeaderStencil = createStencil({\n  base: {\n    backgroundColor: system.color.bg.alt.softer,\n    borderRight: `${px2rem(1)} solid ${system.color.border.divider}`,\n  },\n  modifiers: {\n    variant: {\n      sticky: {\n        position: 'sticky',\n        left: system.space.zero,\n        zIndex: 2,\n      },\n    },\n  },\n});\n\nconst FixedColumn = () => (\n  <>\n    <Heading size=\"small\">Table Heading</Heading>\n    <Table>\n      <Table.Head>\n        <Table.Row>\n          <Table.Header {...tableHeaderStencil({variant: 'sticky'})}>Header</Table.Header>\n          {Array.from({length: 7}).map((_, i) => (\n            <Table.Header key={i} {...tableHeaderStencil()}>\n              Header\n            </Table.Header>\n          ))}\n        </Table.Row>\n      </Table.Head>\n      <Table.Body>\n        {exampleData.map(item => (\n          <>\n            <Table.Row>\n              <Table.Header {...tableHeaderStencil({variant: 'sticky'})}>\n                {item.header}\n              </Table.Header>\n              {Array.from({length: 7}).map((_, i) => (\n                <Table.Cell key={i} {...tableHeaderStencil()}>\n                  {item.cell}\n                </Table.Cell>\n              ))}\n            </Table.Row>\n          </>\n        ))}\n      </Table.Body>\n    </Table>\n  </>\n);\n\nexport const TableStates = {\n  render: () => {\n    return (\n      <StaticStates>\n        <Flex gap=\"xs\" flexDirection=\"column\">\n          <div>\n            <h3>Standard</h3>\n            <Standard />\n          </div>\n          <div>\n            <h3>Fixed Column with Heading</h3>\n            <FixedColumn />\n          </div>\n        </Flex>\n      </StaticStates>\n    );\n  },\n};\n",locationsMap:{"table-states":{startLoc:{col:27,line:123},endLoc:{col:1,line:140},startBody:{col:27,line:123},endBody:{col:1,line:140}}}},chromatic:{disable:!1}}};const Standard=()=>(0,_jsxRuntime.jsxs)(_table.Table,{children:[(0,_jsxRuntime.jsx)(_table.Table.Caption,{children:"Table Caption"}),(0,_jsxRuntime.jsx)(_table.Table.Head,{children:(0,_jsxRuntime.jsxs)(_table.Table.Row,{children:[(0,_jsxRuntime.jsx)(_table.Table.Header,{children:"Table Header"}),(0,_jsxRuntime.jsx)(_table.Table.Header,{children:"Table Header"})]})}),(0,_jsxRuntime.jsxs)(_table.Table.Body,{children:[(0,_jsxRuntime.jsxs)(_table.Table.Row,{children:[(0,_jsxRuntime.jsx)(_table.Table.Header,{children:"Table Header"}),(0,_jsxRuntime.jsx)(_table.Table.Header,{children:"Table Header"})]}),(0,_jsxRuntime.jsxs)(_table.Table.Row,{children:[(0,_jsxRuntime.jsx)(_table.Table.Header,{children:"Table Header"}),(0,_jsxRuntime.jsx)(_table.Table.Cell,{children:"Table Data Cell"})]}),(0,_jsxRuntime.jsxs)(_table.Table.Row,{children:[(0,_jsxRuntime.jsx)(_table.Table.Header,{children:"Table Header"}),(0,_jsxRuntime.jsx)(_table.Table.Cell,{children:"Table Data Cell"})]})]}),(0,_jsxRuntime.jsx)(_table.Table.Footer,{children:(0,_jsxRuntime.jsxs)(_table.Table.Row,{children:[(0,_jsxRuntime.jsx)(_table.Table.Header,{children:"Table Header"}),(0,_jsxRuntime.jsx)(_table.Table.Cell,{children:"Table Data Cell"})]})})]});Standard.displayName="Standard";const exampleData=[{header:"Example Header",cell:"Example Cell"},{header:"Example Header",cell:"Example Cell"},{header:"Example Header",cell:"Example Cell"},{header:"Example Header",cell:"Example Cell"}],tableHeaderStencil=(0,_canvasKitStyling.createStencil)({base:{backgroundColor:_canvasTokensWeb.system.color.bg.alt.softer,borderRight:`${(0,_canvasKitStyling.px2rem)(1)} solid ${_canvasTokensWeb.system.color.border.divider}`},modifiers:{variant:{sticky:{position:"sticky",left:_canvasTokensWeb.system.space.zero,zIndex:2}}}}),FixedColumn=()=>(0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[(0,_jsxRuntime.jsx)(_text.Heading,{size:"small",children:"Table Heading"}),(0,_jsxRuntime.jsxs)(_table.Table,{children:[(0,_jsxRuntime.jsx)(_table.Table.Head,{children:(0,_jsxRuntime.jsxs)(_table.Table.Row,{children:[(0,_jsxRuntime.jsx)(_table.Table.Header,{...tableHeaderStencil({variant:"sticky"}),children:"Header"}),Array.from({length:7}).map(((_,i)=>(0,_jsxRuntime.jsx)(_table.Table.Header,{...tableHeaderStencil(),children:"Header"},i)))]})}),(0,_jsxRuntime.jsx)(_table.Table.Body,{children:exampleData.map((item=>(0,_jsxRuntime.jsx)(_jsxRuntime.Fragment,{children:(0,_jsxRuntime.jsxs)(_table.Table.Row,{children:[(0,_jsxRuntime.jsx)(_table.Table.Header,{...tableHeaderStencil({variant:"sticky"}),children:item.header}),Array.from({length:7}).map(((_,i)=>(0,_jsxRuntime.jsx)(_table.Table.Cell,{...tableHeaderStencil(),children:item.cell},i)))]})})))})]})]});exports.TableStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsxs)(_layout.Flex,{gap:"xs",flexDirection:"column",children:[(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("h3",{children:"Standard"}),(0,_jsxRuntime.jsx)(Standard,{})]}),(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("h3",{children:"Fixed Column with Heading"}),(0,_jsxRuntime.jsx)(FixedColumn,{})]})]})})};module.exports.__namedExportsOrder=["TableStates"]}}]);