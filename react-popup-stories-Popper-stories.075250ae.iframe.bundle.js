"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[8748],{"./modules/react/popup/stories/Popper.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.PopperStory=void 0;var React=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_button=__webpack_require__("./modules/react/button/index.ts"),_popup=__webpack_require__("./modules/react/popup/index.ts"),_card=__webpack_require__("./modules/react/card/index.ts"),_layout=__webpack_require__("./modules/react/layout/index.ts");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}exports.default={title:"Components/Popups/Popper",component:_popup.Popper,parameters:{storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = "import * as React from \'react\';\\n\\nimport {PrimaryButton, SecondaryButton} from \'@workday/canvas-kit-react/button\';\\nimport {Popper} from \'@workday/canvas-kit-react/popup\';\\nimport {Card} from \'@workday/canvas-kit-react/card\';\\nimport {Flex} from \'@workday/canvas-kit-react/layout\';\\n\\nexport default {\\n  title: \'Components/Popups/Popper\',\\n  component: Popper,\\n  parameters: {\\n    ReadmePath: \'react/popup\',\\n  },\\n};\\n\\nexport const PopperStory = {\\n  name: \'Popper\',\\n  render: () => {\\n    const [open, setOpen] = React.useState(false);\\n    const buttonRef = React.useRef<HTMLButtonElement>(null);\\n    const popupRef = React.useRef<HTMLDivElement>(null);\\n    const popperInstanceRef = React.useRef(null);\\n\\n    const onClickButton = () => setOpen(!open);\\n    const onClose = () => setOpen(false);\\n    const [big, setBig] = React.useState(false);\\n\\n    return (\\n      <div style={{display: \'flex\', justifyContent: \'center\'}}>\\n        <PrimaryButton ref={buttonRef} onClick={onClickButton}>\\n          Toggle Popup\\n        </PrimaryButton>\\n        <Popper\\n          placement=\\"bottom\\"\\n          open={open}\\n          anchorElement={buttonRef.current!}\\n          ref={popupRef}\\n          popperInstanceRef={popperInstanceRef}\\n        >\\n          <Card>\\n            <Card.Heading>Popper Example</Card.Heading>\\n            <Card.Body>\\n              <p>A card positioned by Popper!</p>\\n              <div style={big ? {width: 500} : {}}></div>\\n              <Flex gap=\\"s\\">\\n                <SecondaryButton\\n                  onClick={() => {\\n                    setBig(!big);\\n                    requestAnimationFrame(() => {\\n                      popperInstanceRef.current.update();\\n                    });\\n                  }}\\n                >\\n                  Toggle size\\n                </SecondaryButton>\\n                <SecondaryButton onClick={onClose}>Close</SecondaryButton>\\n              </Flex>\\n            </Card.Body>\\n          </Card>\\n        </Popper>\\n      </div>\\n    );\\n  },\\n};\\n";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  "PopperStory": {\n    "startLoc": {\n      "col": 27,\n      "line": 16\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 64\n    },\n    "startBody": {\n      "col": 27,\n      "line": 16\n    },\n    "endBody": {\n      "col": 1,\n      "line": 64\n    }\n  }\n};\n    \nimport * as React from \'react\';\n\nimport {PrimaryButton, SecondaryButton} from \'@workday/canvas-kit-react/button\';\nimport {Popper} from \'@workday/canvas-kit-react/popup\';\nimport {Card} from \'@workday/canvas-kit-react/card\';\nimport {Flex} from \'@workday/canvas-kit-react/layout\';\n\nexport default {\n  title: \'Components/Popups/Popper\',\n  component: Popper,\n  parameters: {\n  "storySource": {\n    "source": "import * as React from \'react\';\\n\\nimport {PrimaryButton, SecondaryButton} from \'@workday/canvas-kit-react/button\';\\nimport {Popper} from \'@workday/canvas-kit-react/popup\';\\nimport {Card} from \'@workday/canvas-kit-react/card\';\\nimport {Flex} from \'@workday/canvas-kit-react/layout\';\\n\\nexport default {\\n  title: \'Components/Popups/Popper\',\\n  component: Popper,\\n  parameters: {\\n    ReadmePath: \'react/popup\',\\n  },\\n};\\n\\nexport const PopperStory = {\\n  name: \'Popper\',\\n  render: () => {\\n    const [open, setOpen] = React.useState(false);\\n    const buttonRef = React.useRef<HTMLButtonElement>(null);\\n    const popupRef = React.useRef<HTMLDivElement>(null);\\n    const popperInstanceRef = React.useRef(null);\\n\\n    const onClickButton = () => setOpen(!open);\\n    const onClose = () => setOpen(false);\\n    const [big, setBig] = React.useState(false);\\n\\n    return (\\n      <div style={{display: \'flex\', justifyContent: \'center\'}}>\\n        <PrimaryButton ref={buttonRef} onClick={onClickButton}>\\n          Toggle Popup\\n        </PrimaryButton>\\n        <Popper\\n          placement=\\"bottom\\"\\n          open={open}\\n          anchorElement={buttonRef.current!}\\n          ref={popupRef}\\n          popperInstanceRef={popperInstanceRef}\\n        >\\n          <Card>\\n            <Card.Heading>Popper Example</Card.Heading>\\n            <Card.Body>\\n              <p>A card positioned by Popper!</p>\\n              <div style={big ? {width: 500} : {}}></div>\\n              <Flex gap=\\"s\\">\\n                <SecondaryButton\\n                  onClick={() => {\\n                    setBig(!big);\\n                    requestAnimationFrame(() => {\\n                      popperInstanceRef.current.update();\\n                    });\\n                  }}\\n                >\\n                  Toggle size\\n                </SecondaryButton>\\n                <SecondaryButton onClick={onClose}>Close</SecondaryButton>\\n              </Flex>\\n            </Card.Body>\\n          </Card>\\n        </Popper>\\n      </div>\\n    );\\n  },\\n};\\n",\n    "locationsMap": {\n      "popper-story": {\n        "startLoc": {\n          "col": 27,\n          "line": 16\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 64\n        },\n        "startBody": {\n          "col": 27,\n          "line": 16\n        },\n        "endBody": {\n          "col": 1,\n          "line": 64\n        }\n      }\n    }\n  }\n,\n    ReadmePath: \'react/popup\',\n  },\n};\n\nexport const PopperStory = {\n  name: \'Popper\',\n  render: () => {\n    const [open, setOpen] = React.useState(false);\n    const buttonRef = React.useRef<HTMLButtonElement>(null);\n    const popupRef = React.useRef<HTMLDivElement>(null);\n    const popperInstanceRef = React.useRef(null);\n\n    const onClickButton = () => setOpen(!open);\n    const onClose = () => setOpen(false);\n    const [big, setBig] = React.useState(false);\n\n    return (\n      <div style={{display: \'flex\', justifyContent: \'center\'}}>\n        <PrimaryButton ref={buttonRef} onClick={onClickButton}>\n          Toggle Popup\n        </PrimaryButton>\n        <Popper\n          placement="bottom"\n          open={open}\n          anchorElement={buttonRef.current!}\n          ref={popupRef}\n          popperInstanceRef={popperInstanceRef}\n        >\n          <Card>\n            <Card.Heading>Popper Example</Card.Heading>\n            <Card.Body>\n              <p>A card positioned by Popper!</p>\n              <div style={big ? {width: 500} : {}}></div>\n              <Flex gap="s">\n                <SecondaryButton\n                  onClick={() => {\n                    setBig(!big);\n                    requestAnimationFrame(() => {\n                      popperInstanceRef.current.update();\n                    });\n                  }}\n                >\n                  Toggle size\n                </SecondaryButton>\n                <SecondaryButton onClick={onClose}>Close</SecondaryButton>\n              </Flex>\n            </Card.Body>\n          </Card>\n        </Popper>\n      </div>\n    );\n  },\n};\n',locationsMap:{"popper-story":{startLoc:{col:27,line:67},endLoc:{col:1,line:115},startBody:{col:27,line:67},endBody:{col:1,line:115}}}},storySource:{source:"import * as React from 'react';\n\nimport {PrimaryButton, SecondaryButton} from '@workday/canvas-kit-react/button';\nimport {Popper} from '@workday/canvas-kit-react/popup';\nimport {Card} from '@workday/canvas-kit-react/card';\nimport {Flex} from '@workday/canvas-kit-react/layout';\n\nexport default {\n  title: 'Components/Popups/Popper',\n  component: Popper,\n  parameters: {\n    ReadmePath: 'react/popup',\n  },\n};\n\nexport const PopperStory = {\n  name: 'Popper',\n  render: () => {\n    const [open, setOpen] = React.useState(false);\n    const buttonRef = React.useRef<HTMLButtonElement>(null);\n    const popupRef = React.useRef<HTMLDivElement>(null);\n    const popperInstanceRef = React.useRef(null);\n\n    const onClickButton = () => setOpen(!open);\n    const onClose = () => setOpen(false);\n    const [big, setBig] = React.useState(false);\n\n    return (\n      <div style={{display: 'flex', justifyContent: 'center'}}>\n        <PrimaryButton ref={buttonRef} onClick={onClickButton}>\n          Toggle Popup\n        </PrimaryButton>\n        <Popper\n          placement=\"bottom\"\n          open={open}\n          anchorElement={buttonRef.current!}\n          ref={popupRef}\n          popperInstanceRef={popperInstanceRef}\n        >\n          <Card>\n            <Card.Heading>Popper Example</Card.Heading>\n            <Card.Body>\n              <p>A card positioned by Popper!</p>\n              <div style={big ? {width: 500} : {}}></div>\n              <Flex gap=\"s\">\n                <SecondaryButton\n                  onClick={() => {\n                    setBig(!big);\n                    requestAnimationFrame(() => {\n                      popperInstanceRef.current.update();\n                    });\n                  }}\n                >\n                  Toggle size\n                </SecondaryButton>\n                <SecondaryButton onClick={onClose}>Close</SecondaryButton>\n              </Flex>\n            </Card.Body>\n          </Card>\n        </Popper>\n      </div>\n    );\n  },\n};\n",locationsMap:{"popper-story":{startLoc:{col:27,line:16},endLoc:{col:1,line:64},startBody:{col:27,line:16},endBody:{col:1,line:64}}}},ReadmePath:"react/popup"}};exports.PopperStory={name:"Popper",render:()=>{const[open,setOpen]=React.useState(!1),buttonRef=React.useRef(null),popupRef=React.useRef(null),popperInstanceRef=React.useRef(null),[big,setBig]=React.useState(!1);return React.createElement("div",{style:{display:"flex",justifyContent:"center"}},React.createElement(_button.PrimaryButton,{ref:buttonRef,onClick:()=>setOpen(!open)},"Toggle Popup"),React.createElement(_popup.Popper,{placement:"bottom",open,anchorElement:buttonRef.current,ref:popupRef,popperInstanceRef},React.createElement(_card.Card,null,React.createElement(_card.Card.Heading,null,"Popper Example"),React.createElement(_card.Card.Body,null,React.createElement("p",null,"A card positioned by Popper!"),React.createElement("div",{style:big?{width:500}:{}}),React.createElement(_layout.Flex,{gap:"s"},React.createElement(_button.SecondaryButton,{onClick:()=>{setBig(!big),requestAnimationFrame((()=>{popperInstanceRef.current.update()}))}},"Toggle size"),React.createElement(_button.SecondaryButton,{onClick:()=>setOpen(!1)},"Close"))))))}};module.exports.__namedExportsOrder=["PopperStory"]}}]);