"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[8892],{"./modules/react/common/stories/mdx/theme.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.Theme=void 0;_interopRequireDefault(__webpack_require__("./node_modules/react/index.js"));var _styled=_interopRequireDefault(__webpack_require__("./node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js")),_index=__webpack_require__("./modules/react/common/index.ts"),_tokens=__webpack_require__("./modules/react/tokens/index.ts"),_common=__webpack_require__("./modules/react/common/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}const Palettes=(0,_styled.default)("div")({display:"flex",margin:-20,flexWrap:"wrap"}),Palette=(0,_styled.default)("ul")({listStyle:"none",margin:20,padding:0,borderRadius:_tokens.borderRadius.l,overflow:"hidden",width:250,alignSelf:"flex-start"}),Swatch=(0,_styled.default)("li")({..._tokens.type.levels.subtext.large,padding:`0 ${_tokens.space.m}`,height:_tokens.space.xl,display:"flex",alignItems:"center",justifyContent:"space-between"},(props=>({background:props.bg,span:{color:props.contrast}}))),PaletteTitle=(0,_styled.default)(Swatch)({..._tokens.type.levels.body.large,height:_tokens.space.xxl,paddingBottom:_tokens.space.s,alignItems:"flex-end",textTransform:"capitalize",fontWeight:_tokens.type.properties.fontWeights.bold},(props=>({span:{color:props.contrast}}))),customTheme={canvas:{palette:{primary:{main:_tokens.colors.greenApple400}}}},ThemedComponent=(0,_styled.default)("h1")((({theme:{canvas:{palette:{primary:themePrimary}}}})=>({..._tokens.type.levels.body.large,background:themePrimary.main,color:themePrimary.contrast,borderRadius:_tokens.borderRadius.m,padding:_tokens.space.xs,display:"inline-block",fontWeight:_tokens.type.properties.fontWeights.bold}))),createSwatch=(name,color,contrast,Component=Swatch)=>(0,_jsxRuntime.jsxs)(Component,{bg:color,contrast,children:[name,contrast&&(0,_jsxRuntime.jsx)("span",{children:name})]},`${name}-${color}`);createSwatch.displayName="createSwatch";const StyledHeaderDefaultTheme=(0,_styled.default)("h1")({..._tokens.type.levels.heading.medium}),StyledHeaderCustomTheme=(0,_styled.default)("h1")({..._tokens.type.levels.heading.medium}),ThemeDemo=props=>{const theme=(0,_common.useTheme)();return(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)(StyledHeaderDefaultTheme,{children:"Default Canvas Theme"}),(0,_jsxRuntime.jsx)(Palettes,{...props,children:Object.keys(theme.canvas.palette).map((name=>{const palette=theme.canvas.palette[name],bg=palette.main&&palette.main||_tokens.colors.soap200,contrast=palette.contrast;return(0,_jsxRuntime.jsxs)(Palette,{children:[createSwatch(name,bg,contrast,PaletteTitle),Object.keys(palette).map((key=>{if("contrast"!==key)return createSwatch(key,palette[key],contrast)}))]},name)}))}),(0,_jsxRuntime.jsx)("hr",{style:{margin:"80px 0"}}),(0,_jsxRuntime.jsx)(StyledHeaderCustomTheme,{children:"Custom Theme"}),(0,_jsxRuntime.jsx)(_index.CanvasProvider,{theme:customTheme,children:(0,_jsxRuntime.jsx)(ThemedComponent,{children:"Themed Component"})})]})};ThemeDemo.displayName="ThemeDemo";exports.default={title:"Features/Theming",parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import React from 'react';\\nimport styled from '@emotion/styled';\\nimport {Meta, StoryObj} from '@storybook/react';\\nimport {CanvasProvider} from '../../index';\\nimport {CanvasTheme, CanvasThemePalette, Themeable} from '../../lib/theming';\\nimport {colors, type, space, borderRadius} from '@workday/canvas-kit-react/tokens';\\nimport {useTheme} from '@workday/canvas-kit-react/common';\\nimport {StyledType} from '../../lib/utils';\\n\\nconst Palettes = styled('div')({\\n  display: 'flex',\\n  margin: -20,\\n  flexWrap: 'wrap',\\n});\\nconst Palette = styled('ul')({\\n  listStyle: 'none',\\n  margin: 20,\\n  padding: 0,\\n  borderRadius: borderRadius.l,\\n  overflow: 'hidden',\\n  width: 250,\\n  alignSelf: 'flex-start',\\n});\\nconst Swatch = styled('li')(\\n  {\\n    ...type.levels.subtext.large,\\n    padding: `0 ${space.m}`,\\n    height: space.xl,\\n    display: 'flex',\\n    alignItems: 'center',\\n    justifyContent: 'space-between',\\n  },\\n  (props: any) => ({\\n    background: props.bg,\\n    span: {\\n      color: props.contrast,\\n    },\\n  })\\n);\\nconst PaletteTitle = styled(Swatch)<StyledType>(\\n  {\\n    ...type.levels.body.large,\\n    height: space.xxl,\\n    paddingBottom: space.s,\\n    alignItems: 'flex-end',\\n    textTransform: 'capitalize',\\n    fontWeight: type.properties.fontWeights.bold,\\n  },\\n  (props: any) => ({\\n    span: {\\n      color: props.contrast,\\n    },\\n  })\\n);\\n\\nconst customTheme = {\\n  canvas: {\\n    palette: {\\n      primary: {\\n        main: colors.greenApple400,\\n      },\\n    },\\n  },\\n};\\nconst ThemedComponent = styled('h1')<Themeable>(\\n  ({\\n    theme: {\\n      canvas: {\\n        palette: {primary: themePrimary},\\n      },\\n    },\\n  }) => ({\\n    ...type.levels.body.large,\\n    background: themePrimary.main,\\n    color: themePrimary.contrast,\\n    borderRadius: borderRadius.m,\\n    padding: space.xs,\\n    display: 'inline-block',\\n    fontWeight: type.properties.fontWeights.bold,\\n  })\\n);\\n\\nconst createSwatch = (name: string, color: string, contrast: string, Component: any = Swatch) => {\\n  return (\\n    <Component bg={color} contrast={contrast} key={`${name}-${color}`}>\\n      {name}\\n      {contrast && <span>{name}</span>}\\n    </Component>\\n  );\\n};\\n\\nconst StyledHeaderDefaultTheme = styled('h1')({\\n  ...type.levels.heading.medium,\\n});\\n\\nconst StyledHeaderCustomTheme = styled('h1')({\\n  ...type.levels.heading.medium,\\n});\\n\\ntype PaletteKey = keyof CanvasTheme['palette'];\\ntype SwatchKey = keyof CanvasThemePalette;\\n\\nconst ThemeDemo = (props: any) => {\\n  const theme = useTheme();\\n  return (\\n    <div>\\n      <StyledHeaderDefaultTheme>Default Canvas Theme</StyledHeaderDefaultTheme>\\n      <Palettes {...props}>\\n        {Object.keys(theme.canvas.palette).map(name => {\\n          const palette = theme.canvas.palette[name as PaletteKey] as CanvasThemePalette;\\n          const bg = (palette.main && palette.main) || colors.soap200;\\n          const contrast = palette.contrast;\\n\\n          return (\\n            <Palette key={name}>\\n              {createSwatch(name, bg, contrast, PaletteTitle)}\\n              {Object.keys(palette).map(key => {\\n                if (key === 'contrast') {\\n                  return;\\n                }\\n                return createSwatch(key, palette[key as SwatchKey], contrast);\\n              })}\\n            </Palette>\\n          );\\n        })}\\n      </Palettes>\\n      <hr style={{margin: '80px 0'}} />\\n      <StyledHeaderCustomTheme>Custom Theme</StyledHeaderCustomTheme>\\n      <CanvasProvider theme={customTheme}>\\n        <ThemedComponent>Themed Component</ThemedComponent>\\n      </CanvasProvider>\\n    </div>\\n  );\\n};\\n\\nconst meta: Meta = {\\n  title: 'Features/Theming',\\n  parameters: {\\n    ReadmePath: 'react/common/lib/theming',\\n  },\\n};\\n\\nexport default meta;\\n\\nexport const Theme: StoryObj = {\\n  name: 'Theme',\\n  render: () => <ThemeDemo />,\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"Theme\": {\n    \"startLoc\": {\n      \"col\": 31,\n      \"line\": 145\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 148\n    },\n    \"startBody\": {\n      \"col\": 31,\n      \"line\": 145\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 148\n    }\n  }\n};\n    \nimport React from 'react';\nimport styled from '@emotion/styled';\nimport {Meta, StoryObj} from '@storybook/react';\nimport {CanvasProvider} from '../../index';\nimport {CanvasTheme, CanvasThemePalette, Themeable} from '../../lib/theming';\nimport {colors, type, space, borderRadius} from '@workday/canvas-kit-react/tokens';\nimport {useTheme} from '@workday/canvas-kit-react/common';\nimport {StyledType} from '../../lib/utils';\n\nconst Palettes = styled('div')({\n  display: 'flex',\n  margin: -20,\n  flexWrap: 'wrap',\n});\nconst Palette = styled('ul')({\n  listStyle: 'none',\n  margin: 20,\n  padding: 0,\n  borderRadius: borderRadius.l,\n  overflow: 'hidden',\n  width: 250,\n  alignSelf: 'flex-start',\n});\nconst Swatch = styled('li')(\n  {\n    ...type.levels.subtext.large,\n    padding: `0 ${space.m}`,\n    height: space.xl,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  (props: any) => ({\n    background: props.bg,\n    span: {\n      color: props.contrast,\n    },\n  })\n);\nconst PaletteTitle = styled(Swatch)<StyledType>(\n  {\n    ...type.levels.body.large,\n    height: space.xxl,\n    paddingBottom: space.s,\n    alignItems: 'flex-end',\n    textTransform: 'capitalize',\n    fontWeight: type.properties.fontWeights.bold,\n  },\n  (props: any) => ({\n    span: {\n      color: props.contrast,\n    },\n  })\n);\n\nconst customTheme = {\n  canvas: {\n    palette: {\n      primary: {\n        main: colors.greenApple400,\n      },\n    },\n  },\n};\nconst ThemedComponent = styled('h1')<Themeable>(\n  ({\n    theme: {\n      canvas: {\n        palette: {primary: themePrimary},\n      },\n    },\n  }) => ({\n    ...type.levels.body.large,\n    background: themePrimary.main,\n    color: themePrimary.contrast,\n    borderRadius: borderRadius.m,\n    padding: space.xs,\n    display: 'inline-block',\n    fontWeight: type.properties.fontWeights.bold,\n  })\n);\n\nconst createSwatch = (name: string, color: string, contrast: string, Component: any = Swatch) => {\n  return (\n    <Component bg={color} contrast={contrast} key={`${name}-${color}`}>\n      {name}\n      {contrast && <span>{name}</span>}\n    </Component>\n  );\n};\n\nconst StyledHeaderDefaultTheme = styled('h1')({\n  ...type.levels.heading.medium,\n});\n\nconst StyledHeaderCustomTheme = styled('h1')({\n  ...type.levels.heading.medium,\n});\n\ntype PaletteKey = keyof CanvasTheme['palette'];\ntype SwatchKey = keyof CanvasThemePalette;\n\nconst ThemeDemo = (props: any) => {\n  const theme = useTheme();\n  return (\n    <div>\n      <StyledHeaderDefaultTheme>Default Canvas Theme</StyledHeaderDefaultTheme>\n      <Palettes {...props}>\n        {Object.keys(theme.canvas.palette).map(name => {\n          const palette = theme.canvas.palette[name as PaletteKey] as CanvasThemePalette;\n          const bg = (palette.main && palette.main) || colors.soap200;\n          const contrast = palette.contrast;\n\n          return (\n            <Palette key={name}>\n              {createSwatch(name, bg, contrast, PaletteTitle)}\n              {Object.keys(palette).map(key => {\n                if (key === 'contrast') {\n                  return;\n                }\n                return createSwatch(key, palette[key as SwatchKey], contrast);\n              })}\n            </Palette>\n          );\n        })}\n      </Palettes>\n      <hr style={{margin: '80px 0'}} />\n      <StyledHeaderCustomTheme>Custom Theme</StyledHeaderCustomTheme>\n      <CanvasProvider theme={customTheme}>\n        <ThemedComponent>Themed Component</ThemedComponent>\n      </CanvasProvider>\n    </div>\n  );\n};\n\nconst meta: Meta = {\n  title: 'Features/Theming',\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import React from 'react';\\nimport styled from '@emotion/styled';\\nimport {Meta, StoryObj} from '@storybook/react';\\nimport {CanvasProvider} from '../../index';\\nimport {CanvasTheme, CanvasThemePalette, Themeable} from '../../lib/theming';\\nimport {colors, type, space, borderRadius} from '@workday/canvas-kit-react/tokens';\\nimport {useTheme} from '@workday/canvas-kit-react/common';\\nimport {StyledType} from '../../lib/utils';\\n\\nconst Palettes = styled('div')({\\n  display: 'flex',\\n  margin: -20,\\n  flexWrap: 'wrap',\\n});\\nconst Palette = styled('ul')({\\n  listStyle: 'none',\\n  margin: 20,\\n  padding: 0,\\n  borderRadius: borderRadius.l,\\n  overflow: 'hidden',\\n  width: 250,\\n  alignSelf: 'flex-start',\\n});\\nconst Swatch = styled('li')(\\n  {\\n    ...type.levels.subtext.large,\\n    padding: `0 ${space.m}`,\\n    height: space.xl,\\n    display: 'flex',\\n    alignItems: 'center',\\n    justifyContent: 'space-between',\\n  },\\n  (props: any) => ({\\n    background: props.bg,\\n    span: {\\n      color: props.contrast,\\n    },\\n  })\\n);\\nconst PaletteTitle = styled(Swatch)<StyledType>(\\n  {\\n    ...type.levels.body.large,\\n    height: space.xxl,\\n    paddingBottom: space.s,\\n    alignItems: 'flex-end',\\n    textTransform: 'capitalize',\\n    fontWeight: type.properties.fontWeights.bold,\\n  },\\n  (props: any) => ({\\n    span: {\\n      color: props.contrast,\\n    },\\n  })\\n);\\n\\nconst customTheme = {\\n  canvas: {\\n    palette: {\\n      primary: {\\n        main: colors.greenApple400,\\n      },\\n    },\\n  },\\n};\\nconst ThemedComponent = styled('h1')<Themeable>(\\n  ({\\n    theme: {\\n      canvas: {\\n        palette: {primary: themePrimary},\\n      },\\n    },\\n  }) => ({\\n    ...type.levels.body.large,\\n    background: themePrimary.main,\\n    color: themePrimary.contrast,\\n    borderRadius: borderRadius.m,\\n    padding: space.xs,\\n    display: 'inline-block',\\n    fontWeight: type.properties.fontWeights.bold,\\n  })\\n);\\n\\nconst createSwatch = (name: string, color: string, contrast: string, Component: any = Swatch) => {\\n  return (\\n    <Component bg={color} contrast={contrast} key={`${name}-${color}`}>\\n      {name}\\n      {contrast && <span>{name}</span>}\\n    </Component>\\n  );\\n};\\n\\nconst StyledHeaderDefaultTheme = styled('h1')({\\n  ...type.levels.heading.medium,\\n});\\n\\nconst StyledHeaderCustomTheme = styled('h1')({\\n  ...type.levels.heading.medium,\\n});\\n\\ntype PaletteKey = keyof CanvasTheme['palette'];\\ntype SwatchKey = keyof CanvasThemePalette;\\n\\nconst ThemeDemo = (props: any) => {\\n  const theme = useTheme();\\n  return (\\n    <div>\\n      <StyledHeaderDefaultTheme>Default Canvas Theme</StyledHeaderDefaultTheme>\\n      <Palettes {...props}>\\n        {Object.keys(theme.canvas.palette).map(name => {\\n          const palette = theme.canvas.palette[name as PaletteKey] as CanvasThemePalette;\\n          const bg = (palette.main && palette.main) || colors.soap200;\\n          const contrast = palette.contrast;\\n\\n          return (\\n            <Palette key={name}>\\n              {createSwatch(name, bg, contrast, PaletteTitle)}\\n              {Object.keys(palette).map(key => {\\n                if (key === 'contrast') {\\n                  return;\\n                }\\n                return createSwatch(key, palette[key as SwatchKey], contrast);\\n              })}\\n            </Palette>\\n          );\\n        })}\\n      </Palettes>\\n      <hr style={{margin: '80px 0'}} />\\n      <StyledHeaderCustomTheme>Custom Theme</StyledHeaderCustomTheme>\\n      <CanvasProvider theme={customTheme}>\\n        <ThemedComponent>Themed Component</ThemedComponent>\\n      </CanvasProvider>\\n    </div>\\n  );\\n};\\n\\nconst meta: Meta = {\\n  title: 'Features/Theming',\\n  parameters: {\\n    ReadmePath: 'react/common/lib/theming',\\n  },\\n};\\n\\nexport default meta;\\n\\nexport const Theme: StoryObj = {\\n  name: 'Theme',\\n  render: () => <ThemeDemo />,\\n};\\n\",\n    \"locationsMap\": {\n      \"theme\": {\n        \"startLoc\": {\n          \"col\": 31,\n          \"line\": 145\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 148\n        },\n        \"startBody\": {\n          \"col\": 31,\n          \"line\": 145\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 148\n        }\n      }\n    }\n  }\n,\n    ReadmePath: 'react/common/lib/theming',\n  },\n};\n\nexport default meta;\n\nexport const Theme: StoryObj = {\n  name: 'Theme',\n  render: () => <ThemeDemo />,\n};\n",locationsMap:{theme:{startLoc:{col:31,line:196},endLoc:{col:1,line:199},startBody:{col:31,line:196},endBody:{col:1,line:199}}}},storySource:{source:"import React from 'react';\nimport styled from '@emotion/styled';\nimport {Meta, StoryObj} from '@storybook/react';\nimport {CanvasProvider} from '../../index';\nimport {CanvasTheme, CanvasThemePalette, Themeable} from '../../lib/theming';\nimport {colors, type, space, borderRadius} from '@workday/canvas-kit-react/tokens';\nimport {useTheme} from '@workday/canvas-kit-react/common';\nimport {StyledType} from '../../lib/utils';\n\nconst Palettes = styled('div')({\n  display: 'flex',\n  margin: -20,\n  flexWrap: 'wrap',\n});\nconst Palette = styled('ul')({\n  listStyle: 'none',\n  margin: 20,\n  padding: 0,\n  borderRadius: borderRadius.l,\n  overflow: 'hidden',\n  width: 250,\n  alignSelf: 'flex-start',\n});\nconst Swatch = styled('li')(\n  {\n    ...type.levels.subtext.large,\n    padding: `0 ${space.m}`,\n    height: space.xl,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  (props: any) => ({\n    background: props.bg,\n    span: {\n      color: props.contrast,\n    },\n  })\n);\nconst PaletteTitle = styled(Swatch)<StyledType>(\n  {\n    ...type.levels.body.large,\n    height: space.xxl,\n    paddingBottom: space.s,\n    alignItems: 'flex-end',\n    textTransform: 'capitalize',\n    fontWeight: type.properties.fontWeights.bold,\n  },\n  (props: any) => ({\n    span: {\n      color: props.contrast,\n    },\n  })\n);\n\nconst customTheme = {\n  canvas: {\n    palette: {\n      primary: {\n        main: colors.greenApple400,\n      },\n    },\n  },\n};\nconst ThemedComponent = styled('h1')<Themeable>(\n  ({\n    theme: {\n      canvas: {\n        palette: {primary: themePrimary},\n      },\n    },\n  }) => ({\n    ...type.levels.body.large,\n    background: themePrimary.main,\n    color: themePrimary.contrast,\n    borderRadius: borderRadius.m,\n    padding: space.xs,\n    display: 'inline-block',\n    fontWeight: type.properties.fontWeights.bold,\n  })\n);\n\nconst createSwatch = (name: string, color: string, contrast: string, Component: any = Swatch) => {\n  return (\n    <Component bg={color} contrast={contrast} key={`${name}-${color}`}>\n      {name}\n      {contrast && <span>{name}</span>}\n    </Component>\n  );\n};\n\nconst StyledHeaderDefaultTheme = styled('h1')({\n  ...type.levels.heading.medium,\n});\n\nconst StyledHeaderCustomTheme = styled('h1')({\n  ...type.levels.heading.medium,\n});\n\ntype PaletteKey = keyof CanvasTheme['palette'];\ntype SwatchKey = keyof CanvasThemePalette;\n\nconst ThemeDemo = (props: any) => {\n  const theme = useTheme();\n  return (\n    <div>\n      <StyledHeaderDefaultTheme>Default Canvas Theme</StyledHeaderDefaultTheme>\n      <Palettes {...props}>\n        {Object.keys(theme.canvas.palette).map(name => {\n          const palette = theme.canvas.palette[name as PaletteKey] as CanvasThemePalette;\n          const bg = (palette.main && palette.main) || colors.soap200;\n          const contrast = palette.contrast;\n\n          return (\n            <Palette key={name}>\n              {createSwatch(name, bg, contrast, PaletteTitle)}\n              {Object.keys(palette).map(key => {\n                if (key === 'contrast') {\n                  return;\n                }\n                return createSwatch(key, palette[key as SwatchKey], contrast);\n              })}\n            </Palette>\n          );\n        })}\n      </Palettes>\n      <hr style={{margin: '80px 0'}} />\n      <StyledHeaderCustomTheme>Custom Theme</StyledHeaderCustomTheme>\n      <CanvasProvider theme={customTheme}>\n        <ThemedComponent>Themed Component</ThemedComponent>\n      </CanvasProvider>\n    </div>\n  );\n};\n\nconst meta: Meta = {\n  title: 'Features/Theming',\n  parameters: {\n    ReadmePath: 'react/common/lib/theming',\n  },\n};\n\nexport default meta;\n\nexport const Theme: StoryObj = {\n  name: 'Theme',\n  render: () => <ThemeDemo />,\n};\n",locationsMap:{theme:{startLoc:{col:31,line:145},endLoc:{col:1,line:148},startBody:{col:31,line:145},endBody:{col:1,line:148}}}},ReadmePath:"react/common/lib/theming"}};exports.Theme={name:"Theme",render:()=>(0,_jsxRuntime.jsx)(ThemeDemo,{})};module.exports.__namedExportsOrder=["Theme"]}}]);