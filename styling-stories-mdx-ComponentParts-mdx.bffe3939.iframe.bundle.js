"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[4645],{"./modules/styling/stories/mdx/ComponentParts.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs");__webpack_require__("./modules/docs/index.ts");function _createMdxContent(props){const _components=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",blockquote:"blockquote",strong:"strong"},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__.RP)(),props.components);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.W8,{title:"Styling/Component Parts"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"styling-elements-via-component-parts",children:"Styling Elements via Component Parts"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The goal of compound components is to expose one component per semantic element. Most of the time\nthis means a 1:1 relationship of a component and DOM element. Sometimes a semantic element contains\nnon-semantic elements for styling. An example might be a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<button>"})," with a icon for visual\nreinforcement, and a label for a semantic label. The semantic element is the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<button>"})," while the\nicon has no semantic value and the label automatically provides the semantic button with an\naccessible name. In order to style the icon and label elements, you have to know the DOM structure\nto target those specific elements in order to style it."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-jsx",children:"import {createStencil} from '@workday/canvas-kit-styling';\n\nconst myButtonStencil = createStencil({\n  base: {\n    background: 'transparent',\n    i: {\n      // ...icon styles\n    },\n    span: {\n      // ...label styles\n    },\n    ':hover': {\n      // ...hover button styles\n      i: {\n        // ...hover icon styles\n      },\n      span: {\n        // ...hover label styles\n      },\n    },\n  },\n});\n\nconst MyButton = ({children, ...elemProps}) => {\n  return (\n    <button {...handleCsProp(elemProps, myButtonStencil())}>\n      <i />\n      <span>{children}</span>\n    </button>\n  );\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"using-component-parts-to-style-elements",children:"Using Component Parts to Style Elements"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["To style elements in the render function, we'll need to choose what elements to add the parts to. In\nthe example below, we're able to spread the parts directly to elements. The Stencil will generate\nthe type and value most appropriate for the context the part is used. In the Stencil, the part is\nrepresented by a string that looks like ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:'[data-part="{partValue}"]'})," and in the render function, it\nis an object that looks like ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"{'data-part': partValue}"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-jsx",children:"import {createStencil, handleCsProp} from '@workday/canvas-kit-styling';\n\nconst myButtonStencil = createStencil({\n  parts: {\n    icon: 'my-button-icon',\n    label: 'my-button-label',\n  },\n  base: ({iconPart, labelPart}) => ({\n    background: 'transparent',\n    [iconPart]: {\n      // `[data-part=\"my-button-icon\"]`\n      // ...icon styles\n    },\n    [labelPart]: {\n      // `[data-part=\"my-button-label\"]`\n      // ...label styles\n    },\n    '&:hover': {\n      // ...hover styles for button element\n      [iconPart]: {\n        // ...hover styles for icon part\n      },\n    },\n  }),\n});\n\nconst MyButton = ({children, ...elemProps}) => {\n  return (\n    <button {...handleCsProp(elemProps, myButtonStencil())}>\n      <i {...myButtonStencil.parts.icon} /> {/* data-part={my-button-icon} */}\n      <span {...myButtonStencil.parts.label}>{children}</span> {/* data-part={my-button-label} */}\n    </button>\n  );\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"As a reusable component, you can use component parts to style elements that are not exposed in the\nAPI. Consumers can also use the type safe Stencil to target that element to style it as well. As a\ngeneral rule, a Stencil maps to a component. Multiple Stencils per component usually means nested\nelements that are not targets for style overrides."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.blockquote,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Note:"})," While component parts are a way to give access to elements in order to style, they\nshould be used sparingly. Using component parts increases CSS specificity. A component part should\nnot be used on a nested component that has its own Stencil. The result will be any style\nproperties defined with a component part will have a higher specificity than other styles."]}),"\n"]})]})}const __WEBPACK_DEFAULT_EXPORT__=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__.RP)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,Object.assign({},props,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);