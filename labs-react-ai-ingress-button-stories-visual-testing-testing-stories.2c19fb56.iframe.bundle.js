"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[2996],{"./modules/labs-react/ai-ingress-button/stories/visual-testing/testing.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.AiIngressButtonStates=exports.AIIngressButtonStatesToggledInverse=exports.AIIngressButtonStatesToggledDefault=void 0;var _testing=__webpack_require__("./modules/react/testing/index.ts"),_aiIngressButton=__webpack_require__("./modules/labs-react/ai-ingress-button/index.ts"),_canvasKitStyling=__webpack_require__("./modules/styling/index.ts"),_canvasTokensWeb=__webpack_require__("./node_modules/@workday/canvas-tokens-web/dist/es6/index.js"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");exports.default={title:"Testing/Labs/AI Ingress Button",component:_aiIngressButton.AIIngressButton,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\n\\nimport {AIIngressButton} from '@workday/canvas-kit-labs-react/ai-ingress-button';\\nimport {createStyles} from '@workday/canvas-kit-styling';\\nimport {system} from '@workday/canvas-tokens-web';\\n\\nexport default {\\n  title: 'Testing/Labs/AI Ingress Button',\\n  component: AIIngressButton,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nconst darkBackground = createStyles({\\n  background: system.color.bg.contrast.strong,\\n  padding: system.space.x8,\\n});\\n\\nexport const AiIngressButtonStates = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps({\\n        variant: [\\n          {value: undefined, label: 'Default'},\\n          {value: 'inverse', label: 'Inverse'},\\n        ],\\n      })}\\n      columnProps={permutateProps(\\n        {\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n          ],\\n          disabled: [\\n            {label: '', value: false},\\n            {label: 'Disabled', value: true},\\n          ],\\n        },\\n        props => !props.disabled || !props.className || props.className === 'hover'\\n      )}\\n    >\\n      {props => (\\n        <div className={props.variant === 'inverse' ? darkBackground : ''}>\\n          <AIIngressButton {...props} />\\n        </div>\\n      )}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\\nexport const AIIngressButtonStatesToggledInverse = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps({\\n        toggled: [{value: true, label: 'Toggled'}],\\n      })}\\n      columnProps={permutateProps(\\n        {\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n          ],\\n          disabled: [\\n            {label: '', value: false},\\n            {label: 'Disabled', value: true},\\n          ],\\n        },\\n        props => !props.disabled || !props.className || props.className === 'hover'\\n      )}\\n    >\\n      {props => (\\n        <div className={darkBackground}>\\n          <AIIngressButton variant=\\\"inverse\\\" {...props} />\\n        </div>\\n      )}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\\nexport const AIIngressButtonStatesToggledDefault = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps({\\n        toggled: [{value: true, label: 'Toggled'}],\\n      })}\\n      columnProps={permutateProps(\\n        {\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n          ],\\n          disabled: [\\n            {label: '', value: false},\\n            {label: 'Disabled', value: true},\\n          ],\\n        },\\n        props => !props.disabled || !props.className || props.className === 'hover'\\n      )}\\n    >\\n      {props => <AIIngressButton {...props} />}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"AiIngressButtonStates\": {\n    \"startLoc\": {\n      \"col\": 37,\n      \"line\": 26\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 60\n    },\n    \"startBody\": {\n      \"col\": 37,\n      \"line\": 26\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 60\n    }\n  },\n  \"AIIngressButtonStatesToggledInverse\": {\n    \"startLoc\": {\n      \"col\": 51,\n      \"line\": 62\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 93\n    },\n    \"startBody\": {\n      \"col\": 51,\n      \"line\": 62\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 93\n    }\n  },\n  \"AIIngressButtonStatesToggledDefault\": {\n    \"startLoc\": {\n      \"col\": 51,\n      \"line\": 95\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 122\n    },\n    \"startBody\": {\n      \"col\": 51,\n      \"line\": 95\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 122\n    }\n  }\n};\n    \nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\n\nimport {AIIngressButton} from '@workday/canvas-kit-labs-react/ai-ingress-button';\nimport {createStyles} from '@workday/canvas-kit-styling';\nimport {system} from '@workday/canvas-tokens-web';\n\nexport default {\n  title: 'Testing/Labs/AI Ingress Button',\n  component: AIIngressButton,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\n\\nimport {AIIngressButton} from '@workday/canvas-kit-labs-react/ai-ingress-button';\\nimport {createStyles} from '@workday/canvas-kit-styling';\\nimport {system} from '@workday/canvas-tokens-web';\\n\\nexport default {\\n  title: 'Testing/Labs/AI Ingress Button',\\n  component: AIIngressButton,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nconst darkBackground = createStyles({\\n  background: system.color.bg.contrast.strong,\\n  padding: system.space.x8,\\n});\\n\\nexport const AiIngressButtonStates = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps({\\n        variant: [\\n          {value: undefined, label: 'Default'},\\n          {value: 'inverse', label: 'Inverse'},\\n        ],\\n      })}\\n      columnProps={permutateProps(\\n        {\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n          ],\\n          disabled: [\\n            {label: '', value: false},\\n            {label: 'Disabled', value: true},\\n          ],\\n        },\\n        props => !props.disabled || !props.className || props.className === 'hover'\\n      )}\\n    >\\n      {props => (\\n        <div className={props.variant === 'inverse' ? darkBackground : ''}>\\n          <AIIngressButton {...props} />\\n        </div>\\n      )}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\\nexport const AIIngressButtonStatesToggledInverse = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps({\\n        toggled: [{value: true, label: 'Toggled'}],\\n      })}\\n      columnProps={permutateProps(\\n        {\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n          ],\\n          disabled: [\\n            {label: '', value: false},\\n            {label: 'Disabled', value: true},\\n          ],\\n        },\\n        props => !props.disabled || !props.className || props.className === 'hover'\\n      )}\\n    >\\n      {props => (\\n        <div className={darkBackground}>\\n          <AIIngressButton variant=\\\"inverse\\\" {...props} />\\n        </div>\\n      )}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\\nexport const AIIngressButtonStatesToggledDefault = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps({\\n        toggled: [{value: true, label: 'Toggled'}],\\n      })}\\n      columnProps={permutateProps(\\n        {\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n          ],\\n          disabled: [\\n            {label: '', value: false},\\n            {label: 'Disabled', value: true},\\n          ],\\n        },\\n        props => !props.disabled || !props.className || props.className === 'hover'\\n      )}\\n    >\\n      {props => <AIIngressButton {...props} />}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\",\n    \"locationsMap\": {\n      \"ai-ingress-button-states\": {\n        \"startLoc\": {\n          \"col\": 37,\n          \"line\": 26\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 60\n        },\n        \"startBody\": {\n          \"col\": 37,\n          \"line\": 26\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 60\n        }\n      },\n      \"ai-ingress-button-states-toggled-inverse\": {\n        \"startLoc\": {\n          \"col\": 51,\n          \"line\": 62\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 93\n        },\n        \"startBody\": {\n          \"col\": 51,\n          \"line\": 62\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 93\n        }\n      },\n      \"ai-ingress-button-states-toggled-default\": {\n        \"startLoc\": {\n          \"col\": 51,\n          \"line\": 95\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 122\n        },\n        \"startBody\": {\n          \"col\": 51,\n          \"line\": 95\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 122\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nconst darkBackground = createStyles({\n  background: system.color.bg.contrast.strong,\n  padding: system.space.x8,\n});\n\nexport const AiIngressButtonStates = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps({\n        variant: [\n          {value: undefined, label: 'Default'},\n          {value: 'inverse', label: 'Inverse'},\n        ],\n      })}\n      columnProps={permutateProps(\n        {\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n          ],\n          disabled: [\n            {label: '', value: false},\n            {label: 'Disabled', value: true},\n          ],\n        },\n        props => !props.disabled || !props.className || props.className === 'hover'\n      )}\n    >\n      {props => (\n        <div className={props.variant === 'inverse' ? darkBackground : ''}>\n          <AIIngressButton {...props} />\n        </div>\n      )}\n    </ComponentStatesTable>\n  </StaticStates>\n);;\n\nexport const AIIngressButtonStatesToggledInverse = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps({\n        toggled: [{value: true, label: 'Toggled'}],\n      })}\n      columnProps={permutateProps(\n        {\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n          ],\n          disabled: [\n            {label: '', value: false},\n            {label: 'Disabled', value: true},\n          ],\n        },\n        props => !props.disabled || !props.className || props.className === 'hover'\n      )}\n    >\n      {props => (\n        <div className={darkBackground}>\n          <AIIngressButton variant=\"inverse\" {...props} />\n        </div>\n      )}\n    </ComponentStatesTable>\n  </StaticStates>\n);;\n\nexport const AIIngressButtonStatesToggledDefault = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps({\n        toggled: [{value: true, label: 'Toggled'}],\n      })}\n      columnProps={permutateProps(\n        {\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n          ],\n          disabled: [\n            {label: '', value: false},\n            {label: 'Disabled', value: true},\n          ],\n        },\n        props => !props.disabled || !props.className || props.className === 'hover'\n      )}\n    >\n      {props => <AIIngressButton {...props} />}\n    </ComponentStatesTable>\n  </StaticStates>\n);\n",locationsMap:{"ai-ingress-button-states":{startLoc:{col:37,line:149},endLoc:{col:1,line:183},startBody:{col:37,line:149},endBody:{col:1,line:183}},"ai-ingress-button-states-toggled-inverse":{startLoc:{col:51,line:185},endLoc:{col:1,line:216},startBody:{col:51,line:185},endBody:{col:1,line:216}},"ai-ingress-button-states-toggled-default":{startLoc:{col:51,line:218},endLoc:{col:1,line:245},startBody:{col:51,line:218},endBody:{col:1,line:245}}}},storySource:{source:"import {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\n\nimport {AIIngressButton} from '@workday/canvas-kit-labs-react/ai-ingress-button';\nimport {createStyles} from '@workday/canvas-kit-styling';\nimport {system} from '@workday/canvas-tokens-web';\n\nexport default {\n  title: 'Testing/Labs/AI Ingress Button',\n  component: AIIngressButton,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nconst darkBackground = createStyles({\n  background: system.color.bg.contrast.strong,\n  padding: system.space.x8,\n});\n\nexport const AiIngressButtonStates = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps({\n        variant: [\n          {value: undefined, label: 'Default'},\n          {value: 'inverse', label: 'Inverse'},\n        ],\n      })}\n      columnProps={permutateProps(\n        {\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n          ],\n          disabled: [\n            {label: '', value: false},\n            {label: 'Disabled', value: true},\n          ],\n        },\n        props => !props.disabled || !props.className || props.className === 'hover'\n      )}\n    >\n      {props => (\n        <div className={props.variant === 'inverse' ? darkBackground : ''}>\n          <AIIngressButton {...props} />\n        </div>\n      )}\n    </ComponentStatesTable>\n  </StaticStates>\n);\n\nexport const AIIngressButtonStatesToggledInverse = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps({\n        toggled: [{value: true, label: 'Toggled'}],\n      })}\n      columnProps={permutateProps(\n        {\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n          ],\n          disabled: [\n            {label: '', value: false},\n            {label: 'Disabled', value: true},\n          ],\n        },\n        props => !props.disabled || !props.className || props.className === 'hover'\n      )}\n    >\n      {props => (\n        <div className={darkBackground}>\n          <AIIngressButton variant=\"inverse\" {...props} />\n        </div>\n      )}\n    </ComponentStatesTable>\n  </StaticStates>\n);\n\nexport const AIIngressButtonStatesToggledDefault = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps({\n        toggled: [{value: true, label: 'Toggled'}],\n      })}\n      columnProps={permutateProps(\n        {\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n          ],\n          disabled: [\n            {label: '', value: false},\n            {label: 'Disabled', value: true},\n          ],\n        },\n        props => !props.disabled || !props.className || props.className === 'hover'\n      )}\n    >\n      {props => <AIIngressButton {...props} />}\n    </ComponentStatesTable>\n  </StaticStates>\n);\n",locationsMap:{"ai-ingress-button-states":{startLoc:{col:37,line:26},endLoc:{col:1,line:60},startBody:{col:37,line:26},endBody:{col:1,line:60}},"ai-ingress-button-states-toggled-inverse":{startLoc:{col:51,line:62},endLoc:{col:1,line:93},startBody:{col:51,line:62},endBody:{col:1,line:93}},"ai-ingress-button-states-toggled-default":{startLoc:{col:51,line:95},endLoc:{col:1,line:122},startBody:{col:51,line:95},endBody:{col:1,line:122}}}},chromatic:{disable:!1}}};const darkBackground=(0,_canvasKitStyling.createStyles)({background:_canvasTokensWeb.system.color.bg.contrast.strong,padding:_canvasTokensWeb.system.space.x8}),AiIngressButtonStates=()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({variant:[{value:void 0,label:"Default"},{value:"inverse",label:"Inverse"}]}),columnProps:(0,_testing.permutateProps)({className:[{label:"Default",value:""},{label:"Hover",value:"hover"},{label:"Focus",value:"focus"},{label:"Focus Hover",value:"focus hover"},{label:"Active",value:"active"},{label:"Active Hover",value:"active hover"}],disabled:[{label:"",value:!1},{label:"Disabled",value:!0}]},(props=>!props.disabled||!props.className||"hover"===props.className)),children:props=>(0,_jsxRuntime.jsx)("div",{className:"inverse"===props.variant?darkBackground:"",children:(0,_jsxRuntime.jsx)(_aiIngressButton.AIIngressButton,{...props})})})});exports.AiIngressButtonStates=AiIngressButtonStates,AiIngressButtonStates.displayName="AiIngressButtonStates";const AIIngressButtonStatesToggledInverse=()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({toggled:[{value:!0,label:"Toggled"}]}),columnProps:(0,_testing.permutateProps)({className:[{label:"Default",value:""},{label:"Hover",value:"hover"},{label:"Focus",value:"focus"},{label:"Focus Hover",value:"focus hover"},{label:"Active",value:"active"},{label:"Active Hover",value:"active hover"}],disabled:[{label:"",value:!1},{label:"Disabled",value:!0}]},(props=>!props.disabled||!props.className||"hover"===props.className)),children:props=>(0,_jsxRuntime.jsx)("div",{className:darkBackground,children:(0,_jsxRuntime.jsx)(_aiIngressButton.AIIngressButton,{variant:"inverse",...props})})})});exports.AIIngressButtonStatesToggledInverse=AIIngressButtonStatesToggledInverse,AIIngressButtonStatesToggledInverse.displayName="AIIngressButtonStatesToggledInverse";const AIIngressButtonStatesToggledDefault=()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({toggled:[{value:!0,label:"Toggled"}]}),columnProps:(0,_testing.permutateProps)({className:[{label:"Default",value:""},{label:"Hover",value:"hover"},{label:"Focus",value:"focus"},{label:"Focus Hover",value:"focus hover"},{label:"Active",value:"active"},{label:"Active Hover",value:"active hover"}],disabled:[{label:"",value:!1},{label:"Disabled",value:!0}]},(props=>!props.disabled||!props.className||"hover"===props.className)),children:props=>(0,_jsxRuntime.jsx)(_aiIngressButton.AIIngressButton,{...props})})});exports.AIIngressButtonStatesToggledDefault=AIIngressButtonStatesToggledDefault,AIIngressButtonStatesToggledDefault.displayName="AIIngressButtonStatesToggledDefault",module.exports.__namedExportsOrder=["AiIngressButtonStates","AIIngressButtonStatesToggledInverse","AIIngressButtonStatesToggledDefault"]}}]);