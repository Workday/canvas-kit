"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[1242],{"./modules/react/button/stories/ToolbarButtons.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.ToolbarIconButtonStory=exports.ToolbarDropdownButtonStory=void 0;var React=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_canvasSystemIconsWeb=__webpack_require__("./node_modules/@workday/canvas-system-icons-web/dist/es6/index.js"),_button=__webpack_require__("./modules/react/button/index.ts"),_menu=__webpack_require__("./modules/react/menu/index.ts"),_tooltip=__webpack_require__("./modules/react/tooltip/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}const meta={title:"Components/Buttons/Toolbar",component:_button.ToolbarIconButton,parameters:{storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = "import * as React from \'react\';\\nimport {Meta, StoryObj} from \'@storybook/react\';\\nimport {activityStreamIcon, paragraphIcon, zoominIcon} from \'@workday/canvas-system-icons-web\';\\nimport {ToolbarIconButton, ToolbarDropdownButton} from \'@workday/canvas-kit-react/button\';\\nimport {Menu} from \'@workday/canvas-kit-react/menu\';\\nimport {Tooltip} from \'@workday/canvas-kit-react/tooltip\';\\n\\nconst customElementStyles = {\\n  margin: \'0 16px 0 8px\',\\n  fontSize: 14,\\n};\\n\\nconst meta: Meta<typeof ToolbarIconButton> = {\\n  title: \'Components/Buttons/Toolbar\',\\n  component: ToolbarIconButton,\\n  parameters: {\\n    ReadmePath: \'react/button\',\\n  },\\n};\\n\\nexport default meta;\\n\\nexport const ToolbarIconButtonStory: StoryObj = {\\n  render: () => {\\n    const [toggled, setToggled] = React.useState<boolean | undefined>();\\n    const handleToggle = () => {\\n      setToggled(!toggled);\\n    };\\n\\n    return (\\n      <div className=\\"story\\">\\n        <h3>Toolbar Icon Button</h3>\\n        <ToolbarIconButton aria-label=\\"Activity Stream\\" icon={activityStreamIcon} />\\n        <ToolbarIconButton aria-label=\\"Activity Stream\\" icon={activityStreamIcon} disabled={true} />\\n        <h3>Toggleable Toolbar Icon Button</h3>\\n        <ToolbarIconButton\\n          aria-label=\\"Activity Stream\\"\\n          icon={activityStreamIcon}\\n          toggled={toggled}\\n          onClick={handleToggle}\\n        />\\n      </div>\\n    );\\n  },\\n};\\n\\nexport const ToolbarDropdownButtonStory: StoryObj = {\\n  render: () => (\\n    <div className=\\"story\\">\\n      <h3>Toolbar Dropdown Button with Menu</h3>\\n      <Menu>\\n        <Tooltip title=\\"Expand\\">\\n          <Menu.Target\\n            as={ToolbarDropdownButton}\\n            icon={zoominIcon}\\n            onClick={() => {\\n              console.log(\'Expand icon clicked\');\\n            }}\\n          ></Menu.Target>\\n        </Tooltip>\\n        <Menu.Popper>\\n          <Menu.Card>\\n            <Menu.List>\\n              <Menu.Item\\n                onClick={() => {\\n                  console.log(\'Expand All clicked\');\\n                }}\\n              >\\n                Expand All\\n              </Menu.Item>\\n              <Menu.Item\\n                onClick={() => {\\n                  console.log(\'Expand to Leaf Level clicked\');\\n                }}\\n              >\\n                Expand to Leaf Level\\n              </Menu.Item>\\n              <Menu.Item\\n                onClick={() => {\\n                  console.log(\'Expand to nth Level clicked\');\\n                }}\\n              >\\n                Expand to nth Level\\n              </Menu.Item>\\n            </Menu.List>\\n          </Menu.Card>\\n        </Menu.Popper>\\n      </Menu>\\n    </div>\\n  ),\\n};\\n";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  "ToolbarIconButtonStory": {\n    "startLoc": {\n      "col": 48,\n      "line": 23\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 45\n    },\n    "startBody": {\n      "col": 48,\n      "line": 23\n    },\n    "endBody": {\n      "col": 1,\n      "line": 45\n    }\n  },\n  "ToolbarDropdownButtonStory": {\n    "startLoc": {\n      "col": 52,\n      "line": 47\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 91\n    },\n    "startBody": {\n      "col": 52,\n      "line": 47\n    },\n    "endBody": {\n      "col": 1,\n      "line": 91\n    }\n  }\n};\n    \nimport * as React from \'react\';\nimport {Meta, StoryObj} from \'@storybook/react\';\nimport {activityStreamIcon, paragraphIcon, zoominIcon} from \'@workday/canvas-system-icons-web\';\nimport {ToolbarIconButton, ToolbarDropdownButton} from \'@workday/canvas-kit-react/button\';\nimport {Menu} from \'@workday/canvas-kit-react/menu\';\nimport {Tooltip} from \'@workday/canvas-kit-react/tooltip\';\n\nconst customElementStyles = {\n  margin: \'0 16px 0 8px\',\n  fontSize: 14,\n};\n\nconst meta: Meta<typeof ToolbarIconButton> = {\n  title: \'Components/Buttons/Toolbar\',\n  component: ToolbarIconButton,\n  parameters: {\n  "storySource": {\n    "source": "import * as React from \'react\';\\nimport {Meta, StoryObj} from \'@storybook/react\';\\nimport {activityStreamIcon, paragraphIcon, zoominIcon} from \'@workday/canvas-system-icons-web\';\\nimport {ToolbarIconButton, ToolbarDropdownButton} from \'@workday/canvas-kit-react/button\';\\nimport {Menu} from \'@workday/canvas-kit-react/menu\';\\nimport {Tooltip} from \'@workday/canvas-kit-react/tooltip\';\\n\\nconst customElementStyles = {\\n  margin: \'0 16px 0 8px\',\\n  fontSize: 14,\\n};\\n\\nconst meta: Meta<typeof ToolbarIconButton> = {\\n  title: \'Components/Buttons/Toolbar\',\\n  component: ToolbarIconButton,\\n  parameters: {\\n    ReadmePath: \'react/button\',\\n  },\\n};\\n\\nexport default meta;\\n\\nexport const ToolbarIconButtonStory: StoryObj = {\\n  render: () => {\\n    const [toggled, setToggled] = React.useState<boolean | undefined>();\\n    const handleToggle = () => {\\n      setToggled(!toggled);\\n    };\\n\\n    return (\\n      <div className=\\"story\\">\\n        <h3>Toolbar Icon Button</h3>\\n        <ToolbarIconButton aria-label=\\"Activity Stream\\" icon={activityStreamIcon} />\\n        <ToolbarIconButton aria-label=\\"Activity Stream\\" icon={activityStreamIcon} disabled={true} />\\n        <h3>Toggleable Toolbar Icon Button</h3>\\n        <ToolbarIconButton\\n          aria-label=\\"Activity Stream\\"\\n          icon={activityStreamIcon}\\n          toggled={toggled}\\n          onClick={handleToggle}\\n        />\\n      </div>\\n    );\\n  },\\n};\\n\\nexport const ToolbarDropdownButtonStory: StoryObj = {\\n  render: () => (\\n    <div className=\\"story\\">\\n      <h3>Toolbar Dropdown Button with Menu</h3>\\n      <Menu>\\n        <Tooltip title=\\"Expand\\">\\n          <Menu.Target\\n            as={ToolbarDropdownButton}\\n            icon={zoominIcon}\\n            onClick={() => {\\n              console.log(\'Expand icon clicked\');\\n            }}\\n          ></Menu.Target>\\n        </Tooltip>\\n        <Menu.Popper>\\n          <Menu.Card>\\n            <Menu.List>\\n              <Menu.Item\\n                onClick={() => {\\n                  console.log(\'Expand All clicked\');\\n                }}\\n              >\\n                Expand All\\n              </Menu.Item>\\n              <Menu.Item\\n                onClick={() => {\\n                  console.log(\'Expand to Leaf Level clicked\');\\n                }}\\n              >\\n                Expand to Leaf Level\\n              </Menu.Item>\\n              <Menu.Item\\n                onClick={() => {\\n                  console.log(\'Expand to nth Level clicked\');\\n                }}\\n              >\\n                Expand to nth Level\\n              </Menu.Item>\\n            </Menu.List>\\n          </Menu.Card>\\n        </Menu.Popper>\\n      </Menu>\\n    </div>\\n  ),\\n};\\n",\n    "locationsMap": {\n      "toolbar-icon-button-story": {\n        "startLoc": {\n          "col": 48,\n          "line": 23\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 45\n        },\n        "startBody": {\n          "col": 48,\n          "line": 23\n        },\n        "endBody": {\n          "col": 1,\n          "line": 45\n        }\n      },\n      "toolbar-dropdown-button-story": {\n        "startLoc": {\n          "col": 52,\n          "line": 47\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 91\n        },\n        "startBody": {\n          "col": 52,\n          "line": 47\n        },\n        "endBody": {\n          "col": 1,\n          "line": 91\n        }\n      }\n    }\n  }\n,\n    ReadmePath: \'react/button\',\n  },\n};\n\nexport default meta;\n\nexport const ToolbarIconButtonStory: StoryObj = {\n  render: () => {\n    const [toggled, setToggled] = React.useState<boolean | undefined>();\n    const handleToggle = () => {\n      setToggled(!toggled);\n    };\n\n    return (\n      <div className="story">\n        <h3>Toolbar Icon Button</h3>\n        <ToolbarIconButton aria-label="Activity Stream" icon={activityStreamIcon} />\n        <ToolbarIconButton aria-label="Activity Stream" icon={activityStreamIcon} disabled={true} />\n        <h3>Toggleable Toolbar Icon Button</h3>\n        <ToolbarIconButton\n          aria-label="Activity Stream"\n          icon={activityStreamIcon}\n          toggled={toggled}\n          onClick={handleToggle}\n        />\n      </div>\n    );\n  },\n};;\n\nexport const ToolbarDropdownButtonStory: StoryObj = {\n  render: () => (\n    <div className="story">\n      <h3>Toolbar Dropdown Button with Menu</h3>\n      <Menu>\n        <Tooltip title="Expand">\n          <Menu.Target\n            as={ToolbarDropdownButton}\n            icon={zoominIcon}\n            onClick={() => {\n              console.log(\'Expand icon clicked\');\n            }}\n          ></Menu.Target>\n        </Tooltip>\n        <Menu.Popper>\n          <Menu.Card>\n            <Menu.List>\n              <Menu.Item\n                onClick={() => {\n                  console.log(\'Expand All clicked\');\n                }}\n              >\n                Expand All\n              </Menu.Item>\n              <Menu.Item\n                onClick={() => {\n                  console.log(\'Expand to Leaf Level clicked\');\n                }}\n              >\n                Expand to Leaf Level\n              </Menu.Item>\n              <Menu.Item\n                onClick={() => {\n                  console.log(\'Expand to nth Level clicked\');\n                }}\n              >\n                Expand to nth Level\n              </Menu.Item>\n            </Menu.List>\n          </Menu.Card>\n        </Menu.Popper>\n      </Menu>\n    </div>\n  ),\n};\n',locationsMap:{"toolbar-icon-button-story":{startLoc:{col:48,line:110},endLoc:{col:1,line:132},startBody:{col:48,line:110},endBody:{col:1,line:132}},"toolbar-dropdown-button-story":{startLoc:{col:52,line:134},endLoc:{col:1,line:178},startBody:{col:52,line:134},endBody:{col:1,line:178}}}},storySource:{source:"import * as React from 'react';\nimport {Meta, StoryObj} from '@storybook/react';\nimport {activityStreamIcon, paragraphIcon, zoominIcon} from '@workday/canvas-system-icons-web';\nimport {ToolbarIconButton, ToolbarDropdownButton} from '@workday/canvas-kit-react/button';\nimport {Menu} from '@workday/canvas-kit-react/menu';\nimport {Tooltip} from '@workday/canvas-kit-react/tooltip';\n\nconst customElementStyles = {\n  margin: '0 16px 0 8px',\n  fontSize: 14,\n};\n\nconst meta: Meta<typeof ToolbarIconButton> = {\n  title: 'Components/Buttons/Toolbar',\n  component: ToolbarIconButton,\n  parameters: {\n    ReadmePath: 'react/button',\n  },\n};\n\nexport default meta;\n\nexport const ToolbarIconButtonStory: StoryObj = {\n  render: () => {\n    const [toggled, setToggled] = React.useState<boolean | undefined>();\n    const handleToggle = () => {\n      setToggled(!toggled);\n    };\n\n    return (\n      <div className=\"story\">\n        <h3>Toolbar Icon Button</h3>\n        <ToolbarIconButton aria-label=\"Activity Stream\" icon={activityStreamIcon} />\n        <ToolbarIconButton aria-label=\"Activity Stream\" icon={activityStreamIcon} disabled={true} />\n        <h3>Toggleable Toolbar Icon Button</h3>\n        <ToolbarIconButton\n          aria-label=\"Activity Stream\"\n          icon={activityStreamIcon}\n          toggled={toggled}\n          onClick={handleToggle}\n        />\n      </div>\n    );\n  },\n};\n\nexport const ToolbarDropdownButtonStory: StoryObj = {\n  render: () => (\n    <div className=\"story\">\n      <h3>Toolbar Dropdown Button with Menu</h3>\n      <Menu>\n        <Tooltip title=\"Expand\">\n          <Menu.Target\n            as={ToolbarDropdownButton}\n            icon={zoominIcon}\n            onClick={() => {\n              console.log('Expand icon clicked');\n            }}\n          ></Menu.Target>\n        </Tooltip>\n        <Menu.Popper>\n          <Menu.Card>\n            <Menu.List>\n              <Menu.Item\n                onClick={() => {\n                  console.log('Expand All clicked');\n                }}\n              >\n                Expand All\n              </Menu.Item>\n              <Menu.Item\n                onClick={() => {\n                  console.log('Expand to Leaf Level clicked');\n                }}\n              >\n                Expand to Leaf Level\n              </Menu.Item>\n              <Menu.Item\n                onClick={() => {\n                  console.log('Expand to nth Level clicked');\n                }}\n              >\n                Expand to nth Level\n              </Menu.Item>\n            </Menu.List>\n          </Menu.Card>\n        </Menu.Popper>\n      </Menu>\n    </div>\n  ),\n};\n",locationsMap:{"toolbar-icon-button-story":{startLoc:{col:48,line:23},endLoc:{col:1,line:45},startBody:{col:48,line:23},endBody:{col:1,line:45}},"toolbar-dropdown-button-story":{startLoc:{col:52,line:47},endLoc:{col:1,line:91},startBody:{col:52,line:47},endBody:{col:1,line:91}}}},ReadmePath:"react/button"}};exports.default=meta;exports.ToolbarIconButtonStory={render:()=>{const[toggled,setToggled]=React.useState();return(0,_jsxRuntime.jsxs)("div",{className:"story",children:[(0,_jsxRuntime.jsx)("h3",{children:"Toolbar Icon Button"}),(0,_jsxRuntime.jsx)(_button.ToolbarIconButton,{"aria-label":"Activity Stream",icon:_canvasSystemIconsWeb.activityStreamIcon}),(0,_jsxRuntime.jsx)(_button.ToolbarIconButton,{"aria-label":"Activity Stream",icon:_canvasSystemIconsWeb.activityStreamIcon,disabled:!0}),(0,_jsxRuntime.jsx)("h3",{children:"Toggleable Toolbar Icon Button"}),(0,_jsxRuntime.jsx)(_button.ToolbarIconButton,{"aria-label":"Activity Stream",icon:_canvasSystemIconsWeb.activityStreamIcon,toggled,onClick:()=>{setToggled(!toggled)}})]})}},exports.ToolbarDropdownButtonStory={render:()=>(0,_jsxRuntime.jsxs)("div",{className:"story",children:[(0,_jsxRuntime.jsx)("h3",{children:"Toolbar Dropdown Button with Menu"}),(0,_jsxRuntime.jsxs)(_menu.Menu,{children:[(0,_jsxRuntime.jsx)(_tooltip.Tooltip,{title:"Expand",children:(0,_jsxRuntime.jsx)(_menu.Menu.Target,{as:_button.ToolbarDropdownButton,icon:_canvasSystemIconsWeb.zoominIcon,onClick:()=>{console.log("Expand icon clicked")}})}),(0,_jsxRuntime.jsx)(_menu.Menu.Popper,{children:(0,_jsxRuntime.jsx)(_menu.Menu.Card,{children:(0,_jsxRuntime.jsxs)(_menu.Menu.List,{children:[(0,_jsxRuntime.jsx)(_menu.Menu.Item,{onClick:()=>{console.log("Expand All clicked")},children:"Expand All"}),(0,_jsxRuntime.jsx)(_menu.Menu.Item,{onClick:()=>{console.log("Expand to Leaf Level clicked")},children:"Expand to Leaf Level"}),(0,_jsxRuntime.jsx)(_menu.Menu.Item,{onClick:()=>{console.log("Expand to nth Level clicked")},children:"Expand to nth Level"})]})})})]})]})};module.exports.__namedExportsOrder=["ToolbarIconButtonStory","ToolbarDropdownButtonStory"]}}]);