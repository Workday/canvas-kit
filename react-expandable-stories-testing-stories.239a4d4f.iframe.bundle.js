"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[8962],{"./modules/react/expandable/stories/testing.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.StartIcon=exports.EndIcon=void 0;var _common=__webpack_require__("./modules/react/common/index.ts"),_testing=__webpack_require__("./modules/react/testing/index.ts"),_storybook=__webpack_require__("./utils/storybook/index.ts"),_expandable=__webpack_require__("./modules/react/expandable/index.ts"),_disclosure=__webpack_require__("./modules/react/disclosure/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");(0,_storybook.withSnapshotsEnabled)({title:"Testing/Expandable",component:_expandable.Expandable});exports.default={title:"Testing/Containers/Expandable",component:_expandable.Expandable,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import {CanvasProvider, ContentDirection} from '@workday/canvas-kit-react/common';\\nimport {StaticStates, ComponentStatesTable} from '@workday/canvas-kit-react/testing';\\nimport {withSnapshotsEnabled} from '../../../../utils/storybook';\\n\\nimport {Expandable} from '@workday/canvas-kit-react/expandable';\\nimport {useDisclosureModel} from '@workday/canvas-kit-react/disclosure';\\nimport {Meta} from '@storybook/react';\\n\\nconst meta: Meta = withSnapshotsEnabled({\\n  title: 'Testing/Expandable',\\n  component: Expandable,\\n});\\n\\n// export default meta;\\n\\nexport default {\\n  title: 'Testing/Containers/Expandable',\\n  component: Expandable,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const StartIcon = () => {\\n  const model = useDisclosureModel();\\n\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'No Avatar', props: {}},\\n          {label: 'Avatar', props: {avatar: true}},\\n          {label: 'Depth', props: {depth: 3}},\\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Closed',\\n            props: {visibility: 'hidden', id: '1'},\\n          },\\n          {\\n            label: 'Opened',\\n            props: {visibility: 'visible', id: '1'},\\n          },\\n        ]}\\n      >\\n        {props => {\\n          const state = {visibility: props.visibility, id: props.id};\\n\\n          return (\\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\\n              <Expandable depth={props?.depth} model={{...model, state}}>\\n                <Expandable.Target headingLevel=\\\"h2\\\">\\n                  <Expandable.Icon iconPosition=\\\"start\\\" />\\n                  {props.avatar && <Expandable.Avatar name=\\\"Logan McNeil\\\" />}\\n                  <Expandable.Title>Hello</Expandable.Title>\\n                </Expandable.Target>\\n                <Expandable.Content>Content</Expandable.Content>\\n              </Expandable>\\n            </CanvasProvider>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\\nexport const EndIcon = () => {\\n  const model = useDisclosureModel();\\n\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'No Avatar', props: {}},\\n          {label: 'Avatar', props: {avatar: true}},\\n          {label: 'Depth', props: {depth: 3}},\\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Closed',\\n            props: {visibility: 'hidden', id: '1'},\\n          },\\n          {\\n            label: 'Opened',\\n            props: {visibility: 'visible', id: '1'},\\n          },\\n        ]}\\n      >\\n        {props => {\\n          const state = {visibility: props.visibility, id: props.id};\\n\\n          return (\\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\\n              <Expandable depth={props?.depth} model={{...model, state}}>\\n                <Expandable.Target headingLevel=\\\"h3\\\">\\n                  {props?.avatar && <Expandable.Avatar name=\\\"Logan McNeil\\\" />}\\n                  <Expandable.Title>Hello</Expandable.Title>\\n                  <Expandable.Icon iconPosition=\\\"end\\\" />\\n                </Expandable.Target>\\n                <Expandable.Content>Content</Expandable.Content>\\n              </Expandable>\\n            </CanvasProvider>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"StartIcon\": {\n    \"startLoc\": {\n      \"col\": 25,\n      \"line\": 26\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 68\n    },\n    \"startBody\": {\n      \"col\": 25,\n      \"line\": 26\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 68\n    }\n  },\n  \"EndIcon\": {\n    \"startLoc\": {\n      \"col\": 23,\n      \"line\": 70\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 112\n    },\n    \"startBody\": {\n      \"col\": 23,\n      \"line\": 70\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 112\n    }\n  }\n};\n    \nimport {CanvasProvider, ContentDirection} from '@workday/canvas-kit-react/common';\nimport {StaticStates, ComponentStatesTable} from '@workday/canvas-kit-react/testing';\nimport {withSnapshotsEnabled} from '../../../../utils/storybook';\n\nimport {Expandable} from '@workday/canvas-kit-react/expandable';\nimport {useDisclosureModel} from '@workday/canvas-kit-react/disclosure';\nimport {Meta} from '@storybook/react';\n\nconst meta: Meta = withSnapshotsEnabled({\n  title: 'Testing/Expandable',\n  component: Expandable,\n});\n\n// export default meta;\n\nexport default {\n  title: 'Testing/Containers/Expandable',\n  component: Expandable,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import {CanvasProvider, ContentDirection} from '@workday/canvas-kit-react/common';\\nimport {StaticStates, ComponentStatesTable} from '@workday/canvas-kit-react/testing';\\nimport {withSnapshotsEnabled} from '../../../../utils/storybook';\\n\\nimport {Expandable} from '@workday/canvas-kit-react/expandable';\\nimport {useDisclosureModel} from '@workday/canvas-kit-react/disclosure';\\nimport {Meta} from '@storybook/react';\\n\\nconst meta: Meta = withSnapshotsEnabled({\\n  title: 'Testing/Expandable',\\n  component: Expandable,\\n});\\n\\n// export default meta;\\n\\nexport default {\\n  title: 'Testing/Containers/Expandable',\\n  component: Expandable,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const StartIcon = () => {\\n  const model = useDisclosureModel();\\n\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'No Avatar', props: {}},\\n          {label: 'Avatar', props: {avatar: true}},\\n          {label: 'Depth', props: {depth: 3}},\\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Closed',\\n            props: {visibility: 'hidden', id: '1'},\\n          },\\n          {\\n            label: 'Opened',\\n            props: {visibility: 'visible', id: '1'},\\n          },\\n        ]}\\n      >\\n        {props => {\\n          const state = {visibility: props.visibility, id: props.id};\\n\\n          return (\\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\\n              <Expandable depth={props?.depth} model={{...model, state}}>\\n                <Expandable.Target headingLevel=\\\"h2\\\">\\n                  <Expandable.Icon iconPosition=\\\"start\\\" />\\n                  {props.avatar && <Expandable.Avatar name=\\\"Logan McNeil\\\" />}\\n                  <Expandable.Title>Hello</Expandable.Title>\\n                </Expandable.Target>\\n                <Expandable.Content>Content</Expandable.Content>\\n              </Expandable>\\n            </CanvasProvider>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\\nexport const EndIcon = () => {\\n  const model = useDisclosureModel();\\n\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'No Avatar', props: {}},\\n          {label: 'Avatar', props: {avatar: true}},\\n          {label: 'Depth', props: {depth: 3}},\\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Closed',\\n            props: {visibility: 'hidden', id: '1'},\\n          },\\n          {\\n            label: 'Opened',\\n            props: {visibility: 'visible', id: '1'},\\n          },\\n        ]}\\n      >\\n        {props => {\\n          const state = {visibility: props.visibility, id: props.id};\\n\\n          return (\\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\\n              <Expandable depth={props?.depth} model={{...model, state}}>\\n                <Expandable.Target headingLevel=\\\"h3\\\">\\n                  {props?.avatar && <Expandable.Avatar name=\\\"Logan McNeil\\\" />}\\n                  <Expandable.Title>Hello</Expandable.Title>\\n                  <Expandable.Icon iconPosition=\\\"end\\\" />\\n                </Expandable.Target>\\n                <Expandable.Content>Content</Expandable.Content>\\n              </Expandable>\\n            </CanvasProvider>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\",\n    \"locationsMap\": {\n      \"start-icon\": {\n        \"startLoc\": {\n          \"col\": 25,\n          \"line\": 26\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 68\n        },\n        \"startBody\": {\n          \"col\": 25,\n          \"line\": 26\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 68\n        }\n      },\n      \"end-icon\": {\n        \"startLoc\": {\n          \"col\": 23,\n          \"line\": 70\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 112\n        },\n        \"startBody\": {\n          \"col\": 23,\n          \"line\": 70\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 112\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const StartIcon = () => {\n  const model = useDisclosureModel();\n\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'No Avatar', props: {}},\n          {label: 'Avatar', props: {avatar: true}},\n          {label: 'Depth', props: {depth: 3}},\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\n        ]}\n        columnProps={[\n          {\n            label: 'Closed',\n            props: {visibility: 'hidden', id: '1'},\n          },\n          {\n            label: 'Opened',\n            props: {visibility: 'visible', id: '1'},\n          },\n        ]}\n      >\n        {props => {\n          const state = {visibility: props.visibility, id: props.id};\n\n          return (\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\n              <Expandable depth={props?.depth} model={{...model, state}}>\n                <Expandable.Target headingLevel=\"h2\">\n                  <Expandable.Icon iconPosition=\"start\" />\n                  {props.avatar && <Expandable.Avatar name=\"Logan McNeil\" />}\n                  <Expandable.Title>Hello</Expandable.Title>\n                </Expandable.Target>\n                <Expandable.Content>Content</Expandable.Content>\n              </Expandable>\n            </CanvasProvider>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};;\n\nexport const EndIcon = () => {\n  const model = useDisclosureModel();\n\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'No Avatar', props: {}},\n          {label: 'Avatar', props: {avatar: true}},\n          {label: 'Depth', props: {depth: 3}},\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\n        ]}\n        columnProps={[\n          {\n            label: 'Closed',\n            props: {visibility: 'hidden', id: '1'},\n          },\n          {\n            label: 'Opened',\n            props: {visibility: 'visible', id: '1'},\n          },\n        ]}\n      >\n        {props => {\n          const state = {visibility: props.visibility, id: props.id};\n\n          return (\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\n              <Expandable depth={props?.depth} model={{...model, state}}>\n                <Expandable.Target headingLevel=\"h3\">\n                  {props?.avatar && <Expandable.Avatar name=\"Logan McNeil\" />}\n                  <Expandable.Title>Hello</Expandable.Title>\n                  <Expandable.Icon iconPosition=\"end\" />\n                </Expandable.Target>\n                <Expandable.Content>Content</Expandable.Content>\n              </Expandable>\n            </CanvasProvider>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};\n",locationsMap:{"start-icon":{startLoc:{col:25,line:113},endLoc:{col:1,line:155},startBody:{col:25,line:113},endBody:{col:1,line:155}},"end-icon":{startLoc:{col:23,line:157},endLoc:{col:1,line:199},startBody:{col:23,line:157},endBody:{col:1,line:199}}}},storySource:{source:"import {CanvasProvider, ContentDirection} from '@workday/canvas-kit-react/common';\nimport {StaticStates, ComponentStatesTable} from '@workday/canvas-kit-react/testing';\nimport {withSnapshotsEnabled} from '../../../../utils/storybook';\n\nimport {Expandable} from '@workday/canvas-kit-react/expandable';\nimport {useDisclosureModel} from '@workday/canvas-kit-react/disclosure';\nimport {Meta} from '@storybook/react';\n\nconst meta: Meta = withSnapshotsEnabled({\n  title: 'Testing/Expandable',\n  component: Expandable,\n});\n\n// export default meta;\n\nexport default {\n  title: 'Testing/Containers/Expandable',\n  component: Expandable,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const StartIcon = () => {\n  const model = useDisclosureModel();\n\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'No Avatar', props: {}},\n          {label: 'Avatar', props: {avatar: true}},\n          {label: 'Depth', props: {depth: 3}},\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\n        ]}\n        columnProps={[\n          {\n            label: 'Closed',\n            props: {visibility: 'hidden', id: '1'},\n          },\n          {\n            label: 'Opened',\n            props: {visibility: 'visible', id: '1'},\n          },\n        ]}\n      >\n        {props => {\n          const state = {visibility: props.visibility, id: props.id};\n\n          return (\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\n              <Expandable depth={props?.depth} model={{...model, state}}>\n                <Expandable.Target headingLevel=\"h2\">\n                  <Expandable.Icon iconPosition=\"start\" />\n                  {props.avatar && <Expandable.Avatar name=\"Logan McNeil\" />}\n                  <Expandable.Title>Hello</Expandable.Title>\n                </Expandable.Target>\n                <Expandable.Content>Content</Expandable.Content>\n              </Expandable>\n            </CanvasProvider>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};\n\nexport const EndIcon = () => {\n  const model = useDisclosureModel();\n\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'No Avatar', props: {}},\n          {label: 'Avatar', props: {avatar: true}},\n          {label: 'Depth', props: {depth: 3}},\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\n        ]}\n        columnProps={[\n          {\n            label: 'Closed',\n            props: {visibility: 'hidden', id: '1'},\n          },\n          {\n            label: 'Opened',\n            props: {visibility: 'visible', id: '1'},\n          },\n        ]}\n      >\n        {props => {\n          const state = {visibility: props.visibility, id: props.id};\n\n          return (\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\n              <Expandable depth={props?.depth} model={{...model, state}}>\n                <Expandable.Target headingLevel=\"h3\">\n                  {props?.avatar && <Expandable.Avatar name=\"Logan McNeil\" />}\n                  <Expandable.Title>Hello</Expandable.Title>\n                  <Expandable.Icon iconPosition=\"end\" />\n                </Expandable.Target>\n                <Expandable.Content>Content</Expandable.Content>\n              </Expandable>\n            </CanvasProvider>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};\n",locationsMap:{"start-icon":{startLoc:{col:25,line:26},endLoc:{col:1,line:68},startBody:{col:25,line:26},endBody:{col:1,line:68}},"end-icon":{startLoc:{col:23,line:70},endLoc:{col:1,line:112},startBody:{col:23,line:70},endBody:{col:1,line:112}}}},chromatic:{disable:!1}}};const StartIcon=()=>{const model=(0,_disclosure.useDisclosureModel)();return(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"No Avatar",props:{}},{label:"Avatar",props:{avatar:!0}},{label:"Depth",props:{depth:3}},{label:"RTL",props:{direction:_common.ContentDirection.RTL}}],columnProps:[{label:"Closed",props:{visibility:"hidden",id:"1"}},{label:"Opened",props:{visibility:"visible",id:"1"}}],children:props=>{const state={visibility:props.visibility,id:props.id};return(0,_jsxRuntime.jsx)(_common.CanvasProvider,{theme:{canvas:{direction:props?.direction}},children:(0,_jsxRuntime.jsxs)(_expandable.Expandable,{depth:props?.depth,model:{...model,state},children:[(0,_jsxRuntime.jsxs)(_expandable.Expandable.Target,{headingLevel:"h2",children:[(0,_jsxRuntime.jsx)(_expandable.Expandable.Icon,{iconPosition:"start"}),props.avatar&&(0,_jsxRuntime.jsx)(_expandable.Expandable.Avatar,{name:"Logan McNeil"}),(0,_jsxRuntime.jsx)(_expandable.Expandable.Title,{children:"Hello"})]}),(0,_jsxRuntime.jsx)(_expandable.Expandable.Content,{children:"Content"})]})})}})})};exports.StartIcon=StartIcon,StartIcon.displayName="StartIcon";const EndIcon=()=>{const model=(0,_disclosure.useDisclosureModel)();return(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"No Avatar",props:{}},{label:"Avatar",props:{avatar:!0}},{label:"Depth",props:{depth:3}},{label:"RTL",props:{direction:_common.ContentDirection.RTL}}],columnProps:[{label:"Closed",props:{visibility:"hidden",id:"1"}},{label:"Opened",props:{visibility:"visible",id:"1"}}],children:props=>{const state={visibility:props.visibility,id:props.id};return(0,_jsxRuntime.jsx)(_common.CanvasProvider,{theme:{canvas:{direction:props?.direction}},children:(0,_jsxRuntime.jsxs)(_expandable.Expandable,{depth:props?.depth,model:{...model,state},children:[(0,_jsxRuntime.jsxs)(_expandable.Expandable.Target,{headingLevel:"h3",children:[props?.avatar&&(0,_jsxRuntime.jsx)(_expandable.Expandable.Avatar,{name:"Logan McNeil"}),(0,_jsxRuntime.jsx)(_expandable.Expandable.Title,{children:"Hello"}),(0,_jsxRuntime.jsx)(_expandable.Expandable.Icon,{iconPosition:"end"})]}),(0,_jsxRuntime.jsx)(_expandable.Expandable.Content,{children:"Content"})]})})}})})};exports.EndIcon=EndIcon,EndIcon.displayName="EndIcon",module.exports.__namedExportsOrder=["StartIcon","EndIcon"]}}]);