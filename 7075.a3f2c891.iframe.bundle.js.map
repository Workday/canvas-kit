{"version":3,"file":"7075.a3f2c891.iframe.bundle.js","mappings":";;AAuEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA","sources":["webpack://canvas-kit/./modules/preview-react/side-panel/lib/SidePanel.tsx"],"sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\nimport * as React from 'react';\nimport { createComponent, styled } from '@workday/canvas-kit-react/common';\nimport { jsx, keyframes, CSSObject } from '@emotion/react';\nimport { colors, depth } from '@workday/canvas-kit-react/tokens';\nimport { SidePanelContext } from './hooks';\nimport { SidePanelToggleButton } from './SidePanelToggleButton';\nexport type SidePanelVariant = 'standard' | 'alternate';\nexport type SidePanelTransitionStates = 'collapsed' | 'collapsing' | 'expanded' | 'expanding';\nexport interface SidePanelProps {\n    /**\n     * The width of the component (in `px` if it's a `number`) when it is collapsed.\n     *\n     * @default 64\n     */\n    collapsedWidth?: number | string;\n    /**\n     * If true, sets the expanded state of the side panel\n     * @default true\n     */\n    expanded?: boolean;\n    /**\n     * The width of the component (in `px` if it's a `number`) when it is expanded.\n     *\n     * @default 320\n     */\n    expandedWidth?: number | string;\n    /**\n     * Which side the side panel is meant to originate from.\n     *\n     * @default 'left'\n     */\n    origin?: 'left' | 'right';\n    /**\n     * The function called when the side panel's `expanded` state changes. States like `'collapsing'` and `'expanding'` are tracked in another callback: `onStateTransition`\n     *\n     * @param boolean\n     */\n    onExpandedChange?: (expanded?: boolean) => void;\n    /**\n     * The function called when the side panel is transitioning between states.\n     * Use this to track when the side panel is animating between `'collapsed'`, `'collapsing'`, `'expanded'`, and `'expanding'` states.\n     * This can be particularly helpful if child components need to react specifically to these states.\n     *\n     * @param SidePanelTransitionStates\n     */\n    onStateTransition?: (state?: SidePanelTransitionStates) => void;\n    /**\n     * The style variant of the side panel. 'standard' is with a `soap100` background, no depth. 'alternate' is a `frenchVanilla100` background with a level 6 depth.\n     *\n     * @default 'standard'\n     */\n    variant?: SidePanelVariant;\n    /**\n     * This is set by the useSidePanel hook and prevents unintended keyframe animations\n     *\n     * @param boolean\n     */\n    touched: boolean;\n    children?: React.ReactNode;\n    onAnimationStart?: React.AnimationEventHandler<HTMLElement>;\n    onAnimationEnd?: React.AnimationEventHandler<HTMLElement>;\n}\nconst createKeyframes = (from: number | string, to: number | string) => {\n    const normalized = {\n        from: typeof from === 'number' ? from + 'px' : from,\n        to: typeof to === 'number' ? to + 'px' : to,\n    };\n    return keyframes `\n    from {\n      width: ${normalized.from};\n      min-width: ${normalized.from};\n      max-width: ${normalized.from};\n    } to {\n      width: ${normalized.to};\n      min-width: ${normalized.to};\n      max-width: ${normalized.to};\n    }\n  `;\n};\nconst containerVariantStyle: Record<SidePanelVariant, CSSObject> = {\n    alternate: {\n        backgroundColor: colors.frenchVanilla100,\n        ...depth[5],\n    },\n    standard: {\n        backgroundColor: colors.soap100,\n    },\n};\nconst Panel = styled('section')({\n    overflow: 'hidden',\n    position: 'relative',\n    boxSizing: 'border-box',\n    height: '100%',\n});\nexport const SidePanel = createComponent('section')({\n    displayName: 'SidePanel',\n    Component({ children, collapsedWidth = 64, expanded = true, expandedWidth = 320, onAnimationEnd, onAnimationStart, onExpandedChange, onStateTransition, origin = 'left', variant = 'standard', touched, ...elemProps }: SidePanelProps, ref, Element) {\n        const [state, setState] = React.useState<SidePanelTransitionStates>(expanded ? 'expanded' : 'collapsed');\n        React.useEffect(() => {\n            if (typeof onExpandedChange !== 'undefined') {\n                onExpandedChange(expanded);\n            }\n        }, [expanded, onExpandedChange]);\n        React.useEffect(() => {\n            if (typeof onStateTransition !== 'undefined') {\n                onStateTransition(state);\n            }\n        }, [state, onStateTransition]);\n        const motion = {\n            collapse: createKeyframes(expandedWidth, collapsedWidth),\n            expand: createKeyframes(collapsedWidth, expandedWidth),\n        };\n        const handleAnimationEnd = (event: React.AnimationEvent<HTMLDivElement>) => {\n            if (event.currentTarget === event.target) {\n                if (event.animationName === motion.collapse.name) {\n                    setState('collapsed');\n                }\n                if (event.animationName === motion.expand.name) {\n                    setState('expanded');\n                }\n            }\n            if (typeof onAnimationEnd !== 'undefined') {\n                onAnimationEnd(event);\n            }\n        };\n        const handleAnimationStart = (event: React.AnimationEvent<HTMLDivElement>) => {\n            if (event.currentTarget === event.target) {\n                if (event.animationName === motion.collapse.name ||\n                    event.animationName === motion.expand.name) {\n                    setState(expanded ? 'expanding' : 'collapsing');\n                }\n            }\n            if (typeof onAnimationStart !== 'undefined') {\n                onAnimationStart(event);\n            }\n        };\n        return (<Panel ref={ref} as={Element} css={[\n                {\n                    width: expanded ? expandedWidth : collapsedWidth,\n                    maxWidth: expanded ? expandedWidth : collapsedWidth,\n                    // mounted.current will be false on the first render, thus you won't get an unwanted animation here\n                    // Will animate again if you force a re-render (like in Storybook)\n                    animation: touched\n                        ? `${expanded ? motion.expand : motion.collapse} 200ms ease-out`\n                        : undefined,\n                },\n                containerVariantStyle[variant],\n            ]} onAnimationEnd={handleAnimationEnd} onAnimationStart={handleAnimationStart} {...elemProps}>\n        <SidePanelContext.Provider value={{\n                state,\n                origin,\n            }}>\n          {children}\n        </SidePanelContext.Provider>\n      </Panel>);\n    },\n    subComponents: {\n        /**\n         * `SidePanel.ToggleButton` is a control that is meant to toggle between `expanded = true` and\n         * `expanded = false` states. It must be used within the `SidePanel` component as a child. Use\n         * in conjunction with `useSidePanel`'s `controlProps`, otherwise it does not come with explicit\n         * `onClick` handlers.\n         *\n         * For accessibility purposes, it must be the first focusable element. We recommend that you\n         * keep it as the first child of `SidePanel`\n         */\n        ToggleButton: SidePanelToggleButton,\n    },\n});\n\n  const __docs = [\n  {\n    \"name\": \"SidePanelVariant\",\n    \"fileName\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\",\n    \"description\": \"\",\n    \"declarations\": [\n      {\n        \"name\": \"SidePanelVariant\",\n        \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n      }\n    ],\n    \"tags\": {},\n    \"type\": {\n      \"kind\": \"type\",\n      \"typeParameters\": [],\n      \"value\": {\n        \"kind\": \"union\",\n        \"value\": [\n          {\n            \"kind\": \"string\",\n            \"value\": \"standard\"\n          },\n          {\n            \"kind\": \"string\",\n            \"value\": \"alternate\"\n          }\n        ]\n      }\n    }\n  },\n  {\n    \"name\": \"SidePanelTransitionStates\",\n    \"fileName\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\",\n    \"description\": \"\",\n    \"declarations\": [\n      {\n        \"name\": \"SidePanelTransitionStates\",\n        \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n      }\n    ],\n    \"tags\": {},\n    \"type\": {\n      \"kind\": \"type\",\n      \"typeParameters\": [],\n      \"value\": {\n        \"kind\": \"union\",\n        \"value\": [\n          {\n            \"kind\": \"string\",\n            \"value\": \"collapsed\"\n          },\n          {\n            \"kind\": \"string\",\n            \"value\": \"collapsing\"\n          },\n          {\n            \"kind\": \"string\",\n            \"value\": \"expanded\"\n          },\n          {\n            \"kind\": \"string\",\n            \"value\": \"expanding\"\n          }\n        ]\n      }\n    }\n  },\n  {\n    \"name\": \"SidePanelProps\",\n    \"fileName\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\",\n    \"description\": \"\",\n    \"declarations\": [\n      {\n        \"name\": \"SidePanelProps\",\n        \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n      }\n    ],\n    \"tags\": {},\n    \"type\": {\n      \"kind\": \"object\",\n      \"properties\": [\n        {\n          \"kind\": \"property\",\n          \"name\": \"collapsedWidth\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"union\",\n            \"value\": [\n              {\n                \"kind\": \"primitive\",\n                \"value\": \"number\"\n              },\n              {\n                \"kind\": \"primitive\",\n                \"value\": \"string\"\n              }\n            ]\n          },\n          \"description\": \"The width of the component (in `px` if it's a `number`) when it is collapsed.\",\n          \"declarations\": [\n            {\n              \"name\": \"collapsedWidth\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"default\": \"64\"\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"expanded\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"primitive\",\n            \"value\": \"boolean\"\n          },\n          \"description\": \"If true, sets the expanded state of the side panel\",\n          \"declarations\": [\n            {\n              \"name\": \"expanded\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"default\": \"true\"\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"expandedWidth\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"union\",\n            \"value\": [\n              {\n                \"kind\": \"primitive\",\n                \"value\": \"number\"\n              },\n              {\n                \"kind\": \"primitive\",\n                \"value\": \"string\"\n              }\n            ]\n          },\n          \"description\": \"The width of the component (in `px` if it's a `number`) when it is expanded.\",\n          \"declarations\": [\n            {\n              \"name\": \"expandedWidth\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"default\": \"320\"\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"origin\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"union\",\n            \"value\": [\n              {\n                \"kind\": \"string\",\n                \"value\": \"left\"\n              },\n              {\n                \"kind\": \"string\",\n                \"value\": \"right\"\n              }\n            ]\n          },\n          \"description\": \"Which side the side panel is meant to originate from.\",\n          \"declarations\": [\n            {\n              \"name\": \"origin\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"default\": \"'left'\"\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"onExpandedChange\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"function\",\n            \"parameters\": [\n              {\n                \"kind\": \"parameter\",\n                \"name\": \"expanded\",\n                \"type\": {\n                  \"kind\": \"primitive\",\n                  \"value\": \"boolean\"\n                },\n                \"required\": false,\n                \"rest\": false,\n                \"description\": \"\",\n                \"declarations\": [\n                  {\n                    \"name\": \"expanded\",\n                    \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n                  }\n                ],\n                \"tags\": {}\n              }\n            ],\n            \"members\": [],\n            \"returnType\": {\n              \"kind\": \"primitive\",\n              \"value\": \"void\"\n            }\n          },\n          \"description\": \"The function called when the side panel's `expanded` state changes. States like `'collapsing'` and `'expanding'` are tracked in another callback: `onStateTransition`\",\n          \"declarations\": [\n            {\n              \"name\": \"onExpandedChange\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"param\": \"boolean\"\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"onStateTransition\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"function\",\n            \"parameters\": [\n              {\n                \"kind\": \"parameter\",\n                \"name\": \"state\",\n                \"type\": {\n                  \"kind\": \"symbol\",\n                  \"name\": \"SidePanelTransitionStates\",\n                  \"value\": \"SidePanelTransitionStates\"\n                },\n                \"required\": false,\n                \"rest\": false,\n                \"description\": \"\",\n                \"declarations\": [\n                  {\n                    \"name\": \"state\",\n                    \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n                  }\n                ],\n                \"tags\": {}\n              }\n            ],\n            \"members\": [],\n            \"returnType\": {\n              \"kind\": \"primitive\",\n              \"value\": \"void\"\n            }\n          },\n          \"description\": \"The function called when the side panel is transitioning between states.\\nUse this to track when the side panel is animating between `'collapsed'`, `'collapsing'`, `'expanded'`, and `'expanding'` states.\\nThis can be particularly helpful if child components need to react specifically to these states.\",\n          \"declarations\": [\n            {\n              \"name\": \"onStateTransition\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"param\": \"SidePanelTransitionStates\"\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"variant\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"symbol\",\n            \"name\": \"SidePanelVariant\",\n            \"value\": \"SidePanelVariant\"\n          },\n          \"description\": \"The style variant of the side panel. 'standard' is with a `soap100` background, no depth. 'alternate' is a `frenchVanilla100` background with a level 6 depth.\",\n          \"declarations\": [\n            {\n              \"name\": \"variant\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"default\": \"'standard'\"\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"touched\",\n          \"required\": true,\n          \"type\": {\n            \"kind\": \"primitive\",\n            \"value\": \"boolean\"\n          },\n          \"description\": \"This is set by the useSidePanel hook and prevents unintended keyframe animations\",\n          \"declarations\": [\n            {\n              \"name\": \"touched\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"param\": \"boolean\"\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"children\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"external\",\n            \"name\": \"ReactNode\",\n            \"url\": \"https://reactjs.org/docs/rendering-elements.html\"\n          },\n          \"description\": \"\",\n          \"declarations\": [\n            {\n              \"name\": \"children\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {}\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"onAnimationStart\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"symbol\",\n            \"name\": \"React.AnimationEventHandler\",\n            \"typeParameters\": [\n              {\n                \"kind\": \"symbol\",\n                \"name\": \"HTMLElement\",\n                \"value\": \"HTMLElement\"\n              }\n            ],\n            \"value\": \"AnimationEventHandler<T>\"\n          },\n          \"description\": \"\",\n          \"declarations\": [\n            {\n              \"name\": \"onAnimationStart\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {}\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"onAnimationEnd\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"symbol\",\n            \"name\": \"React.AnimationEventHandler\",\n            \"typeParameters\": [\n              {\n                \"kind\": \"symbol\",\n                \"name\": \"HTMLElement\",\n                \"value\": \"HTMLElement\"\n              }\n            ],\n            \"value\": \"AnimationEventHandler<T>\"\n          },\n          \"description\": \"\",\n          \"declarations\": [\n            {\n              \"name\": \"onAnimationEnd\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {}\n        }\n      ]\n    }\n  },\n  {\n    \"name\": \"SidePanel\",\n    \"fileName\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\",\n    \"description\": \"\",\n    \"declarations\": [\n      {\n        \"name\": \"SidePanel\",\n        \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n      }\n    ],\n    \"tags\": {},\n    \"type\": {\n      \"kind\": \"enhancedComponent\",\n      \"componentType\": \"regular\",\n      \"displayName\": \"SidePanel\",\n      \"props\": [\n        {\n          \"kind\": \"property\",\n          \"name\": \"collapsedWidth\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"union\",\n            \"value\": [\n              {\n                \"kind\": \"primitive\",\n                \"value\": \"number\"\n              },\n              {\n                \"kind\": \"primitive\",\n                \"value\": \"string\"\n              }\n            ]\n          },\n          \"description\": \"The width of the component (in `px` if it's a `number`) when it is collapsed.\",\n          \"declarations\": [\n            {\n              \"name\": \"collapsedWidth\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"default\": \"64\"\n          },\n          \"defaultValue\": {\n            \"kind\": \"number\",\n            \"value\": 64\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"expanded\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"primitive\",\n            \"value\": \"boolean\"\n          },\n          \"description\": \"If true, sets the expanded state of the side panel\",\n          \"declarations\": [\n            {\n              \"name\": \"expanded\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"default\": \"true\"\n          },\n          \"defaultValue\": {\n            \"kind\": \"boolean\",\n            \"value\": true\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"expandedWidth\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"union\",\n            \"value\": [\n              {\n                \"kind\": \"primitive\",\n                \"value\": \"number\"\n              },\n              {\n                \"kind\": \"primitive\",\n                \"value\": \"string\"\n              }\n            ]\n          },\n          \"description\": \"The width of the component (in `px` if it's a `number`) when it is expanded.\",\n          \"declarations\": [\n            {\n              \"name\": \"expandedWidth\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"default\": \"320\"\n          },\n          \"defaultValue\": {\n            \"kind\": \"number\",\n            \"value\": 320\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"origin\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"union\",\n            \"value\": [\n              {\n                \"kind\": \"string\",\n                \"value\": \"left\"\n              },\n              {\n                \"kind\": \"string\",\n                \"value\": \"right\"\n              }\n            ]\n          },\n          \"description\": \"Which side the side panel is meant to originate from.\",\n          \"declarations\": [\n            {\n              \"name\": \"origin\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"default\": \"'left'\"\n          },\n          \"defaultValue\": {\n            \"kind\": \"string\",\n            \"value\": \"left\"\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"onExpandedChange\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"function\",\n            \"parameters\": [\n              {\n                \"kind\": \"parameter\",\n                \"name\": \"expanded\",\n                \"type\": {\n                  \"kind\": \"primitive\",\n                  \"value\": \"boolean\"\n                },\n                \"required\": false,\n                \"rest\": false,\n                \"description\": \"\",\n                \"declarations\": [\n                  {\n                    \"name\": \"expanded\",\n                    \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n                  }\n                ],\n                \"tags\": {}\n              }\n            ],\n            \"members\": [],\n            \"returnType\": {\n              \"kind\": \"primitive\",\n              \"value\": \"void\"\n            }\n          },\n          \"description\": \"The function called when the side panel's `expanded` state changes. States like `'collapsing'` and `'expanding'` are tracked in another callback: `onStateTransition`\",\n          \"declarations\": [\n            {\n              \"name\": \"onExpandedChange\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"param\": \"boolean\"\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"onStateTransition\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"function\",\n            \"parameters\": [\n              {\n                \"kind\": \"parameter\",\n                \"name\": \"state\",\n                \"type\": {\n                  \"kind\": \"symbol\",\n                  \"name\": \"SidePanelTransitionStates\",\n                  \"value\": \"SidePanelTransitionStates\"\n                },\n                \"required\": false,\n                \"rest\": false,\n                \"description\": \"\",\n                \"declarations\": [\n                  {\n                    \"name\": \"state\",\n                    \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n                  }\n                ],\n                \"tags\": {}\n              }\n            ],\n            \"members\": [],\n            \"returnType\": {\n              \"kind\": \"primitive\",\n              \"value\": \"void\"\n            }\n          },\n          \"description\": \"The function called when the side panel is transitioning between states.\\nUse this to track when the side panel is animating between `'collapsed'`, `'collapsing'`, `'expanded'`, and `'expanding'` states.\\nThis can be particularly helpful if child components need to react specifically to these states.\",\n          \"declarations\": [\n            {\n              \"name\": \"onStateTransition\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"param\": \"SidePanelTransitionStates\"\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"variant\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"symbol\",\n            \"name\": \"SidePanelVariant\",\n            \"value\": \"SidePanelVariant\"\n          },\n          \"description\": \"The style variant of the side panel. 'standard' is with a `soap100` background, no depth. 'alternate' is a `frenchVanilla100` background with a level 6 depth.\",\n          \"declarations\": [\n            {\n              \"name\": \"variant\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"default\": \"'standard'\"\n          },\n          \"defaultValue\": {\n            \"kind\": \"string\",\n            \"value\": \"standard\"\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"touched\",\n          \"required\": true,\n          \"type\": {\n            \"kind\": \"primitive\",\n            \"value\": \"boolean\"\n          },\n          \"description\": \"This is set by the useSidePanel hook and prevents unintended keyframe animations\",\n          \"declarations\": [\n            {\n              \"name\": \"touched\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {\n            \"param\": \"boolean\"\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"children\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"external\",\n            \"name\": \"ReactNode\",\n            \"url\": \"https://reactjs.org/docs/rendering-elements.html\"\n          },\n          \"description\": \"\",\n          \"declarations\": [\n            {\n              \"name\": \"children\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {}\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"onAnimationStart\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"symbol\",\n            \"name\": \"React.AnimationEventHandler\",\n            \"typeParameters\": [\n              {\n                \"kind\": \"symbol\",\n                \"name\": \"HTMLElement\",\n                \"value\": \"HTMLElement\"\n              }\n            ],\n            \"value\": \"AnimationEventHandler<T>\"\n          },\n          \"description\": \"\",\n          \"declarations\": [\n            {\n              \"name\": \"onAnimationStart\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {}\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"onAnimationEnd\",\n          \"required\": false,\n          \"type\": {\n            \"kind\": \"symbol\",\n            \"name\": \"React.AnimationEventHandler\",\n            \"typeParameters\": [\n              {\n                \"kind\": \"symbol\",\n                \"name\": \"HTMLElement\",\n                \"value\": \"HTMLElement\"\n              }\n            ],\n            \"value\": \"AnimationEventHandler<T>\"\n          },\n          \"description\": \"\",\n          \"declarations\": [\n            {\n              \"name\": \"onAnimationEnd\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            }\n          ],\n          \"tags\": {}\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"as\",\n          \"description\": \"Optional override of the default element used by the component. Any valid tag or Component. If you provided a Component, this component should forward the ref using `React.forwardRef`and spread extra props to a root element.\\n\\n**Note:** Not all elements make sense and some elements may cause accessibility issues. Change this value with care.\",\n          \"tags\": {},\n          \"declarations\": [],\n          \"type\": {\n            \"kind\": \"external\",\n            \"name\": \"React.ElementType\",\n            \"url\": \"https://developer.mozilla.org/en-US/docs/Web/API/element\"\n          },\n          \"defaultValue\": {\n            \"kind\": \"external\",\n            \"name\": \"section\",\n            \"url\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section\"\n          }\n        },\n        {\n          \"kind\": \"property\",\n          \"name\": \"ref\",\n          \"description\": \"Optional ref. If the component represents an element, this ref will be a reference to the real DOM element of the component. If `as` is set to an element, it will be that element. If `as` is a component, the reference will be to that component (or element if the component uses `React.forwardRef`).\",\n          \"tags\": {},\n          \"declarations\": [],\n          \"type\": {\n            \"kind\": \"external\",\n            \"name\": \"React.Ref\",\n            \"url\": \"https://reactjs.org/docs/refs-and-the-dom.html\",\n            \"typeParameters\": [\n              {\n                \"kind\": \"typeParameter\",\n                \"name\": \"R\",\n                \"required\": true,\n                \"defaultValue\": {\n                  \"kind\": \"external\",\n                  \"name\": \"section\",\n                  \"url\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section\"\n                }\n              }\n            ]\n          }\n        }\n      ],\n      \"baseElement\": {\n        \"kind\": \"external\",\n        \"name\": \"section\",\n        \"url\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section\"\n      },\n      \"subComponents\": [\n        {\n          \"name\": \"ToggleButton\",\n          \"symbol\": \"SidePanelToggleButton\",\n          \"description\": \"`SidePanel.ToggleButton` is a control that is meant to toggle between `expanded = true` and\\n`expanded = false` states. It must be used within the `SidePanel` component as a child. Use\\nin conjunction with `useSidePanel`'s `controlProps`, otherwise it does not come with explicit\\n`onClick` handlers.\\n\\nFor accessibility purposes, it must be the first focusable element. We recommend that you\\nkeep it as the first child of `SidePanel`\",\n          \"declarations\": [\n            {\n              \"name\": \"ToggleButton\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx\"\n            },\n            {\n              \"name\": \"SidePanelToggleButton\",\n              \"filePath\": \"/home/runner/work/canvas-kit/canvas-kit/modules/preview-react/side-panel/lib/SidePanelToggleButton.tsx\"\n            }\n          ],\n          \"tags\": {}\n        }\n      ]\n    }\n  }\n]\n  if (window.__updateDocs) {\n    window.__updateDocs?.(__docs)\n  } else {\n    window.__docs = (window.__docs || []).concat(__docs)\n  }\n  "],"names":[],"sourceRoot":""}