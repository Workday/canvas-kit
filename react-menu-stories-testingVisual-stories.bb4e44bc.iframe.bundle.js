"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[9171],{"./modules/react/menu/stories/testingVisual.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.MenuOptionStates=exports.MenuItemStates=exports.MenuGroups=void 0;(function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}})(__webpack_require__("./node_modules/react/index.js"));var _common=__webpack_require__("./modules/react/common/index.ts"),_testing=__webpack_require__("./modules/react/testing/index.ts"),_canvasSystemIconsWeb=__webpack_require__("./node_modules/@workday/canvas-system-icons-web/dist/es6/index.js"),_storybook=__webpack_require__("./utils/storybook/index.ts"),_menu=__webpack_require__("./modules/react/menu/index.ts"),_layout=__webpack_require__("./modules/react/layout/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");exports.default={title:"Testing/Popups/Menu",component:_menu.Menu,parameters:{storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = "import React from \'react\';\\n\\nimport {CanvasProvider, ContentDirection} from \'@workday/canvas-kit-react/common\';\\nimport {StaticStates} from \'@workday/canvas-kit-react/testing\';\\nimport {saveAsIcon} from \'@workday/canvas-system-icons-web\';\\n\\nimport {customColorTheme} from \'../../../../utils/storybook\';\\n\\n// unreleased path\\nimport {Menu} from \'@workday/canvas-kit-react/menu\';\\nimport {Flex} from \'@workday/canvas-kit-react/layout\';\\n\\nconst fontDelay = 150; // best guess for the font delay to prevent incorrect Chromatic regressions\\n\\nexport default {\\n  title: \'Testing/Popups/Menu\',\\n  component: Menu,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n      delay: fontDelay,\\n    },\\n  },\\n};\\n\\nconst AllStatesMenuItem = () => (\\n  <Menu initialSelectedIds={[\'selected\']} initialCursorId=\\"non-existent\\">\\n    <Menu.Card style={{animation: \'none\', width: 300}}>\\n      <Menu.List>\\n        <Menu.Group title=\\"Group Heading One\\">\\n          <Menu.Item>Normal Item</Menu.Item>\\n          <Menu.Item className=\\"focus\\">Focused Item</Menu.Item>\\n          <Menu.Item className=\\"hover\\">Hovered Item</Menu.Item>\\n          <Menu.Item className=\\"focus hover\\">Focused & Hovered Item</Menu.Item>\\n          <Menu.Item aria-disabled={true}>Disabled Item</Menu.Item>\\n          <Menu.Item>Wrapped Text Item Wrapped Text Item Wrapped Text Item</Menu.Item>\\n          <Menu.Item>\\n            Superlonglinethatshouldbreakonitsownwithouthavingtodoanythingspecial\\n          </Menu.Item>\\n          <Menu.Divider />\\n          <Menu.Item>Menu item between dividers</Menu.Item>\\n          <Menu.Divider />\\n          <Menu.Item>\\n            <Menu.Item.Icon icon={saveAsIcon} />\\n            <Menu.Item.Text>Item with Icon</Menu.Item.Text>\\n          </Menu.Item>\\n          <Menu.Item className=\\"focus\\">\\n            <Menu.Item.Icon icon={saveAsIcon} />\\n            <Menu.Item.Text>Item with Icon (focused)</Menu.Item.Text>\\n          </Menu.Item>\\n          <Menu.Item className=\\"hover\\">\\n            <Menu.Item.Icon icon={saveAsIcon} />\\n            <Menu.Item.Text>Item with Icon (hovered)</Menu.Item.Text>\\n          </Menu.Item>\\n          <Menu.Item className=\\"focus hover\\">\\n            <Menu.Item.Icon icon={saveAsIcon} />\\n            <Menu.Item.Text>Item with Icon (focus & hovered)</Menu.Item.Text>\\n          </Menu.Item>\\n          <Menu.Item>\\n            <Menu.Item.Icon icon={saveAsIcon} />\\n            <Menu.Item.Text>Item with Icon Wrapped Text Wrapped Text</Menu.Item.Text>\\n          </Menu.Item>\\n        </Menu.Group>\\n        <Menu.Group title=\\"Group Heading Two\\">\\n          <Menu.Item>Menu item for group two</Menu.Item>\\n        </Menu.Group>\\n      </Menu.List>\\n    </Menu.Card>\\n  </Menu>\\n);\\n\\nexport const MenuItemStates = {\\n  render: () => {\\n    return (\\n      <StaticStates>\\n        <Flex gap=\\"xs\\">\\n          <div>\\n            <h3>Normal</h3>\\n            <AllStatesMenuItem />\\n          </div>\\n          <div>\\n            <h3>Themed</h3>\\n            <CanvasProvider theme={{canvas: customColorTheme}}>\\n              <AllStatesMenuItem />\\n            </CanvasProvider>\\n          </div>\\n          <div>\\n            <h3>RTL</h3>\\n            <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\\n              <AllStatesMenuItem />\\n            </CanvasProvider>\\n          </div>\\n        </Flex>\\n      </StaticStates>\\n    );\\n  },\\n};\\n\\nconst AllStatesMenuOption = () => (\\n  <Menu initialSelectedIds={[\'selected\']} initialCursorId=\\"non-existent\\">\\n    <Menu.Card style={{animation: \'none\', width: 300}}>\\n      <Menu.List>\\n        <Menu.Option>Normal Item</Menu.Option>\\n        <Menu.Option className=\\"focus\\">Focused Item</Menu.Option>\\n        <Menu.Option className=\\"hover\\">Hovered Item</Menu.Option>\\n        <Menu.Option className=\\"focus hover\\">Focused & Hovered Item</Menu.Option>\\n        <Menu.Option aria-disabled={true}>Disabled Item</Menu.Option>\\n        <Menu.Option aria-selected={true}>Selected Item</Menu.Option>\\n        <Menu.Option className=\\"focus\\" aria-selected={true}>\\n          Focused & Selected Item\\n        </Menu.Option>\\n        <Menu.Option className=\\"hover\\" aria-selected={true}>\\n          Hovered & Selected Item\\n        </Menu.Option>\\n        <Menu.Option className=\\"focus hover\\" aria-selected={true}>\\n          Focused & Hovered & Selected Item\\n        </Menu.Option>\\n        <Menu.Option aria-disabled={true} aria-selected={true}>\\n          Disabled Selected Item\\n        </Menu.Option>\\n        <Menu.Option>Wrapped Text Item Wrapped Text Item Wrapped Text Item</Menu.Option>\\n        <Menu.Divider />\\n        <Menu.Option>Menu item between dividers</Menu.Option>\\n        <Menu.Divider />\\n        <Menu.Option>\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option className=\\"focus\\">\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon (focused)</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option className=\\"hover\\">\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon (hovered)</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option className=\\"focus hover\\">\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon (focus & hovered)</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option aria-selected={true}>\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon (selected)</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option aria-selected={true} className=\\"focus\\">\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon (focused & selected)</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option aria-selected={true} className=\\"hover\\">\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon (hovered & selected)</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option aria-selected={true} className=\\"focus hover\\">\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon (focus & hovered & selected)</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option>\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon Wrapped Text Wrapped Text</Menu.Option.Text>\\n        </Menu.Option>\\n      </Menu.List>\\n    </Menu.Card>\\n  </Menu>\\n);\\n\\nconst MenuWithGroups = () => {\\n  return (\\n    <Menu initialSelectedIds={[\'0\']} initialCursorId=\\"non-existent\\">\\n      <Menu.Card style={{animation: \'none\', width: 300}}>\\n        <Menu.List>\\n          <Menu.Group title=\\"Group Heading One\\">\\n            <Menu.Item className=\\"focus\\">Group one, Item one (focused)</Menu.Item>\\n            <Menu.Item className=\\"hover\\">Group one, Item two (hovered)</Menu.Item>\\n          </Menu.Group>\\n          <Menu.Group title=\\"Group Heading Two\\">\\n            <Menu.Item>Group two, Item one</Menu.Item>\\n            <Menu.Item>Group two, Item two</Menu.Item>\\n          </Menu.Group>\\n        </Menu.List>\\n      </Menu.Card>\\n    </Menu>\\n  );\\n};\\n\\nexport const MenuOptionStates = {\\n  render: () => {\\n    return (\\n      <StaticStates>\\n        <Flex gap=\\"xs\\">\\n          <div>\\n            <h3>Normal</h3>\\n            <AllStatesMenuOption />\\n          </div>\\n          <div>\\n            <h3>Themed</h3>\\n            <CanvasProvider theme={{canvas: customColorTheme}}>\\n              <AllStatesMenuOption />\\n            </CanvasProvider>\\n          </div>\\n          <div>\\n            <h3>RTL</h3>\\n            <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\\n              <AllStatesMenuOption />\\n            </CanvasProvider>\\n          </div>\\n        </Flex>\\n      </StaticStates>\\n    );\\n  },\\n};\\n\\nexport const MenuGroups = {\\n  render: () => {\\n    return (\\n      <StaticStates>\\n        <Flex gap=\\"xs\\">\\n          <div>\\n            <h3>LTR</h3>\\n            <MenuWithGroups />\\n          </div>\\n          <div>\\n            <h3>RTL</h3>\\n            <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\\n              <MenuWithGroups />\\n            </CanvasProvider>\\n          </div>\\n        </Flex>\\n      </StaticStates>\\n    );\\n  },\\n};\\n";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  "MenuItemStates": {\n    "startLoc": {\n      "col": 30,\n      "line": 72\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 97\n    },\n    "startBody": {\n      "col": 30,\n      "line": 72\n    },\n    "endBody": {\n      "col": 1,\n      "line": 97\n    }\n  },\n  "MenuOptionStates": {\n    "startLoc": {\n      "col": 32,\n      "line": 185\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 210\n    },\n    "startBody": {\n      "col": 32,\n      "line": 185\n    },\n    "endBody": {\n      "col": 1,\n      "line": 210\n    }\n  },\n  "MenuGroups": {\n    "startLoc": {\n      "col": 26,\n      "line": 212\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 231\n    },\n    "startBody": {\n      "col": 26,\n      "line": 212\n    },\n    "endBody": {\n      "col": 1,\n      "line": 231\n    }\n  }\n};\n    \nimport React from \'react\';\n\nimport {CanvasProvider, ContentDirection} from \'@workday/canvas-kit-react/common\';\nimport {StaticStates} from \'@workday/canvas-kit-react/testing\';\nimport {saveAsIcon} from \'@workday/canvas-system-icons-web\';\n\nimport {customColorTheme} from \'../../../../utils/storybook\';\n\n// unreleased path\nimport {Menu} from \'@workday/canvas-kit-react/menu\';\nimport {Flex} from \'@workday/canvas-kit-react/layout\';\n\nconst fontDelay = 150; // best guess for the font delay to prevent incorrect Chromatic regressions\n\nexport default {\n  title: \'Testing/Popups/Menu\',\n  component: Menu,\n  parameters: {\n  "storySource": {\n    "source": "import React from \'react\';\\n\\nimport {CanvasProvider, ContentDirection} from \'@workday/canvas-kit-react/common\';\\nimport {StaticStates} from \'@workday/canvas-kit-react/testing\';\\nimport {saveAsIcon} from \'@workday/canvas-system-icons-web\';\\n\\nimport {customColorTheme} from \'../../../../utils/storybook\';\\n\\n// unreleased path\\nimport {Menu} from \'@workday/canvas-kit-react/menu\';\\nimport {Flex} from \'@workday/canvas-kit-react/layout\';\\n\\nconst fontDelay = 150; // best guess for the font delay to prevent incorrect Chromatic regressions\\n\\nexport default {\\n  title: \'Testing/Popups/Menu\',\\n  component: Menu,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n      delay: fontDelay,\\n    },\\n  },\\n};\\n\\nconst AllStatesMenuItem = () => (\\n  <Menu initialSelectedIds={[\'selected\']} initialCursorId=\\"non-existent\\">\\n    <Menu.Card style={{animation: \'none\', width: 300}}>\\n      <Menu.List>\\n        <Menu.Group title=\\"Group Heading One\\">\\n          <Menu.Item>Normal Item</Menu.Item>\\n          <Menu.Item className=\\"focus\\">Focused Item</Menu.Item>\\n          <Menu.Item className=\\"hover\\">Hovered Item</Menu.Item>\\n          <Menu.Item className=\\"focus hover\\">Focused & Hovered Item</Menu.Item>\\n          <Menu.Item aria-disabled={true}>Disabled Item</Menu.Item>\\n          <Menu.Item>Wrapped Text Item Wrapped Text Item Wrapped Text Item</Menu.Item>\\n          <Menu.Item>\\n            Superlonglinethatshouldbreakonitsownwithouthavingtodoanythingspecial\\n          </Menu.Item>\\n          <Menu.Divider />\\n          <Menu.Item>Menu item between dividers</Menu.Item>\\n          <Menu.Divider />\\n          <Menu.Item>\\n            <Menu.Item.Icon icon={saveAsIcon} />\\n            <Menu.Item.Text>Item with Icon</Menu.Item.Text>\\n          </Menu.Item>\\n          <Menu.Item className=\\"focus\\">\\n            <Menu.Item.Icon icon={saveAsIcon} />\\n            <Menu.Item.Text>Item with Icon (focused)</Menu.Item.Text>\\n          </Menu.Item>\\n          <Menu.Item className=\\"hover\\">\\n            <Menu.Item.Icon icon={saveAsIcon} />\\n            <Menu.Item.Text>Item with Icon (hovered)</Menu.Item.Text>\\n          </Menu.Item>\\n          <Menu.Item className=\\"focus hover\\">\\n            <Menu.Item.Icon icon={saveAsIcon} />\\n            <Menu.Item.Text>Item with Icon (focus & hovered)</Menu.Item.Text>\\n          </Menu.Item>\\n          <Menu.Item>\\n            <Menu.Item.Icon icon={saveAsIcon} />\\n            <Menu.Item.Text>Item with Icon Wrapped Text Wrapped Text</Menu.Item.Text>\\n          </Menu.Item>\\n        </Menu.Group>\\n        <Menu.Group title=\\"Group Heading Two\\">\\n          <Menu.Item>Menu item for group two</Menu.Item>\\n        </Menu.Group>\\n      </Menu.List>\\n    </Menu.Card>\\n  </Menu>\\n);\\n\\nexport const MenuItemStates = {\\n  render: () => {\\n    return (\\n      <StaticStates>\\n        <Flex gap=\\"xs\\">\\n          <div>\\n            <h3>Normal</h3>\\n            <AllStatesMenuItem />\\n          </div>\\n          <div>\\n            <h3>Themed</h3>\\n            <CanvasProvider theme={{canvas: customColorTheme}}>\\n              <AllStatesMenuItem />\\n            </CanvasProvider>\\n          </div>\\n          <div>\\n            <h3>RTL</h3>\\n            <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\\n              <AllStatesMenuItem />\\n            </CanvasProvider>\\n          </div>\\n        </Flex>\\n      </StaticStates>\\n    );\\n  },\\n};\\n\\nconst AllStatesMenuOption = () => (\\n  <Menu initialSelectedIds={[\'selected\']} initialCursorId=\\"non-existent\\">\\n    <Menu.Card style={{animation: \'none\', width: 300}}>\\n      <Menu.List>\\n        <Menu.Option>Normal Item</Menu.Option>\\n        <Menu.Option className=\\"focus\\">Focused Item</Menu.Option>\\n        <Menu.Option className=\\"hover\\">Hovered Item</Menu.Option>\\n        <Menu.Option className=\\"focus hover\\">Focused & Hovered Item</Menu.Option>\\n        <Menu.Option aria-disabled={true}>Disabled Item</Menu.Option>\\n        <Menu.Option aria-selected={true}>Selected Item</Menu.Option>\\n        <Menu.Option className=\\"focus\\" aria-selected={true}>\\n          Focused & Selected Item\\n        </Menu.Option>\\n        <Menu.Option className=\\"hover\\" aria-selected={true}>\\n          Hovered & Selected Item\\n        </Menu.Option>\\n        <Menu.Option className=\\"focus hover\\" aria-selected={true}>\\n          Focused & Hovered & Selected Item\\n        </Menu.Option>\\n        <Menu.Option aria-disabled={true} aria-selected={true}>\\n          Disabled Selected Item\\n        </Menu.Option>\\n        <Menu.Option>Wrapped Text Item Wrapped Text Item Wrapped Text Item</Menu.Option>\\n        <Menu.Divider />\\n        <Menu.Option>Menu item between dividers</Menu.Option>\\n        <Menu.Divider />\\n        <Menu.Option>\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option className=\\"focus\\">\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon (focused)</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option className=\\"hover\\">\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon (hovered)</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option className=\\"focus hover\\">\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon (focus & hovered)</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option aria-selected={true}>\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon (selected)</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option aria-selected={true} className=\\"focus\\">\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon (focused & selected)</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option aria-selected={true} className=\\"hover\\">\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon (hovered & selected)</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option aria-selected={true} className=\\"focus hover\\">\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon (focus & hovered & selected)</Menu.Option.Text>\\n        </Menu.Option>\\n        <Menu.Option>\\n          <Menu.Option.Icon icon={saveAsIcon} />\\n          <Menu.Option.Text>Item with Icon Wrapped Text Wrapped Text</Menu.Option.Text>\\n        </Menu.Option>\\n      </Menu.List>\\n    </Menu.Card>\\n  </Menu>\\n);\\n\\nconst MenuWithGroups = () => {\\n  return (\\n    <Menu initialSelectedIds={[\'0\']} initialCursorId=\\"non-existent\\">\\n      <Menu.Card style={{animation: \'none\', width: 300}}>\\n        <Menu.List>\\n          <Menu.Group title=\\"Group Heading One\\">\\n            <Menu.Item className=\\"focus\\">Group one, Item one (focused)</Menu.Item>\\n            <Menu.Item className=\\"hover\\">Group one, Item two (hovered)</Menu.Item>\\n          </Menu.Group>\\n          <Menu.Group title=\\"Group Heading Two\\">\\n            <Menu.Item>Group two, Item one</Menu.Item>\\n            <Menu.Item>Group two, Item two</Menu.Item>\\n          </Menu.Group>\\n        </Menu.List>\\n      </Menu.Card>\\n    </Menu>\\n  );\\n};\\n\\nexport const MenuOptionStates = {\\n  render: () => {\\n    return (\\n      <StaticStates>\\n        <Flex gap=\\"xs\\">\\n          <div>\\n            <h3>Normal</h3>\\n            <AllStatesMenuOption />\\n          </div>\\n          <div>\\n            <h3>Themed</h3>\\n            <CanvasProvider theme={{canvas: customColorTheme}}>\\n              <AllStatesMenuOption />\\n            </CanvasProvider>\\n          </div>\\n          <div>\\n            <h3>RTL</h3>\\n            <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\\n              <AllStatesMenuOption />\\n            </CanvasProvider>\\n          </div>\\n        </Flex>\\n      </StaticStates>\\n    );\\n  },\\n};\\n\\nexport const MenuGroups = {\\n  render: () => {\\n    return (\\n      <StaticStates>\\n        <Flex gap=\\"xs\\">\\n          <div>\\n            <h3>LTR</h3>\\n            <MenuWithGroups />\\n          </div>\\n          <div>\\n            <h3>RTL</h3>\\n            <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\\n              <MenuWithGroups />\\n            </CanvasProvider>\\n          </div>\\n        </Flex>\\n      </StaticStates>\\n    );\\n  },\\n};\\n",\n    "locationsMap": {\n      "menu-item-states": {\n        "startLoc": {\n          "col": 30,\n          "line": 72\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 97\n        },\n        "startBody": {\n          "col": 30,\n          "line": 72\n        },\n        "endBody": {\n          "col": 1,\n          "line": 97\n        }\n      },\n      "menu-option-states": {\n        "startLoc": {\n          "col": 32,\n          "line": 185\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 210\n        },\n        "startBody": {\n          "col": 32,\n          "line": 185\n        },\n        "endBody": {\n          "col": 1,\n          "line": 210\n        }\n      },\n      "menu-groups": {\n        "startLoc": {\n          "col": 26,\n          "line": 212\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 231\n        },\n        "startBody": {\n          "col": 26,\n          "line": 212\n        },\n        "endBody": {\n          "col": 1,\n          "line": 231\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n      delay: fontDelay,\n    },\n  },\n};\n\nconst AllStatesMenuItem = () => (\n  <Menu initialSelectedIds={[\'selected\']} initialCursorId="non-existent">\n    <Menu.Card style={{animation: \'none\', width: 300}}>\n      <Menu.List>\n        <Menu.Group title="Group Heading One">\n          <Menu.Item>Normal Item</Menu.Item>\n          <Menu.Item className="focus">Focused Item</Menu.Item>\n          <Menu.Item className="hover">Hovered Item</Menu.Item>\n          <Menu.Item className="focus hover">Focused & Hovered Item</Menu.Item>\n          <Menu.Item aria-disabled={true}>Disabled Item</Menu.Item>\n          <Menu.Item>Wrapped Text Item Wrapped Text Item Wrapped Text Item</Menu.Item>\n          <Menu.Item>\n            Superlonglinethatshouldbreakonitsownwithouthavingtodoanythingspecial\n          </Menu.Item>\n          <Menu.Divider />\n          <Menu.Item>Menu item between dividers</Menu.Item>\n          <Menu.Divider />\n          <Menu.Item>\n            <Menu.Item.Icon icon={saveAsIcon} />\n            <Menu.Item.Text>Item with Icon</Menu.Item.Text>\n          </Menu.Item>\n          <Menu.Item className="focus">\n            <Menu.Item.Icon icon={saveAsIcon} />\n            <Menu.Item.Text>Item with Icon (focused)</Menu.Item.Text>\n          </Menu.Item>\n          <Menu.Item className="hover">\n            <Menu.Item.Icon icon={saveAsIcon} />\n            <Menu.Item.Text>Item with Icon (hovered)</Menu.Item.Text>\n          </Menu.Item>\n          <Menu.Item className="focus hover">\n            <Menu.Item.Icon icon={saveAsIcon} />\n            <Menu.Item.Text>Item with Icon (focus & hovered)</Menu.Item.Text>\n          </Menu.Item>\n          <Menu.Item>\n            <Menu.Item.Icon icon={saveAsIcon} />\n            <Menu.Item.Text>Item with Icon Wrapped Text Wrapped Text</Menu.Item.Text>\n          </Menu.Item>\n        </Menu.Group>\n        <Menu.Group title="Group Heading Two">\n          <Menu.Item>Menu item for group two</Menu.Item>\n        </Menu.Group>\n      </Menu.List>\n    </Menu.Card>\n  </Menu>\n);\n\nexport const MenuItemStates = {\n  render: () => {\n    return (\n      <StaticStates>\n        <Flex gap="xs">\n          <div>\n            <h3>Normal</h3>\n            <AllStatesMenuItem />\n          </div>\n          <div>\n            <h3>Themed</h3>\n            <CanvasProvider theme={{canvas: customColorTheme}}>\n              <AllStatesMenuItem />\n            </CanvasProvider>\n          </div>\n          <div>\n            <h3>RTL</h3>\n            <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\n              <AllStatesMenuItem />\n            </CanvasProvider>\n          </div>\n        </Flex>\n      </StaticStates>\n    );\n  },\n};;\n\nconst AllStatesMenuOption = () => (\n  <Menu initialSelectedIds={[\'selected\']} initialCursorId="non-existent">\n    <Menu.Card style={{animation: \'none\', width: 300}}>\n      <Menu.List>\n        <Menu.Option>Normal Item</Menu.Option>\n        <Menu.Option className="focus">Focused Item</Menu.Option>\n        <Menu.Option className="hover">Hovered Item</Menu.Option>\n        <Menu.Option className="focus hover">Focused & Hovered Item</Menu.Option>\n        <Menu.Option aria-disabled={true}>Disabled Item</Menu.Option>\n        <Menu.Option aria-selected={true}>Selected Item</Menu.Option>\n        <Menu.Option className="focus" aria-selected={true}>\n          Focused & Selected Item\n        </Menu.Option>\n        <Menu.Option className="hover" aria-selected={true}>\n          Hovered & Selected Item\n        </Menu.Option>\n        <Menu.Option className="focus hover" aria-selected={true}>\n          Focused & Hovered & Selected Item\n        </Menu.Option>\n        <Menu.Option aria-disabled={true} aria-selected={true}>\n          Disabled Selected Item\n        </Menu.Option>\n        <Menu.Option>Wrapped Text Item Wrapped Text Item Wrapped Text Item</Menu.Option>\n        <Menu.Divider />\n        <Menu.Option>Menu item between dividers</Menu.Option>\n        <Menu.Divider />\n        <Menu.Option>\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option className="focus">\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon (focused)</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option className="hover">\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon (hovered)</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option className="focus hover">\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon (focus & hovered)</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option aria-selected={true}>\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon (selected)</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option aria-selected={true} className="focus">\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon (focused & selected)</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option aria-selected={true} className="hover">\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon (hovered & selected)</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option aria-selected={true} className="focus hover">\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon (focus & hovered & selected)</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option>\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon Wrapped Text Wrapped Text</Menu.Option.Text>\n        </Menu.Option>\n      </Menu.List>\n    </Menu.Card>\n  </Menu>\n);\n\nconst MenuWithGroups = () => {\n  return (\n    <Menu initialSelectedIds={[\'0\']} initialCursorId="non-existent">\n      <Menu.Card style={{animation: \'none\', width: 300}}>\n        <Menu.List>\n          <Menu.Group title="Group Heading One">\n            <Menu.Item className="focus">Group one, Item one (focused)</Menu.Item>\n            <Menu.Item className="hover">Group one, Item two (hovered)</Menu.Item>\n          </Menu.Group>\n          <Menu.Group title="Group Heading Two">\n            <Menu.Item>Group two, Item one</Menu.Item>\n            <Menu.Item>Group two, Item two</Menu.Item>\n          </Menu.Group>\n        </Menu.List>\n      </Menu.Card>\n    </Menu>\n  );\n};\n\nexport const MenuOptionStates = {\n  render: () => {\n    return (\n      <StaticStates>\n        <Flex gap="xs">\n          <div>\n            <h3>Normal</h3>\n            <AllStatesMenuOption />\n          </div>\n          <div>\n            <h3>Themed</h3>\n            <CanvasProvider theme={{canvas: customColorTheme}}>\n              <AllStatesMenuOption />\n            </CanvasProvider>\n          </div>\n          <div>\n            <h3>RTL</h3>\n            <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\n              <AllStatesMenuOption />\n            </CanvasProvider>\n          </div>\n        </Flex>\n      </StaticStates>\n    );\n  },\n};;\n\nexport const MenuGroups = {\n  render: () => {\n    return (\n      <StaticStates>\n        <Flex gap="xs">\n          <div>\n            <h3>LTR</h3>\n            <MenuWithGroups />\n          </div>\n          <div>\n            <h3>RTL</h3>\n            <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\n              <MenuWithGroups />\n            </CanvasProvider>\n          </div>\n        </Flex>\n      </StaticStates>\n    );\n  },\n};\n',locationsMap:{"menu-item-states":{startLoc:{col:30,line:195},endLoc:{col:1,line:220},startBody:{col:30,line:195},endBody:{col:1,line:220}},"menu-option-states":{startLoc:{col:32,line:308},endLoc:{col:1,line:333},startBody:{col:32,line:308},endBody:{col:1,line:333}},"menu-groups":{startLoc:{col:26,line:335},endLoc:{col:1,line:354},startBody:{col:26,line:335},endBody:{col:1,line:354}}}},storySource:{source:'import React from \'react\';\n\nimport {CanvasProvider, ContentDirection} from \'@workday/canvas-kit-react/common\';\nimport {StaticStates} from \'@workday/canvas-kit-react/testing\';\nimport {saveAsIcon} from \'@workday/canvas-system-icons-web\';\n\nimport {customColorTheme} from \'../../../../utils/storybook\';\n\n// unreleased path\nimport {Menu} from \'@workday/canvas-kit-react/menu\';\nimport {Flex} from \'@workday/canvas-kit-react/layout\';\n\nconst fontDelay = 150; // best guess for the font delay to prevent incorrect Chromatic regressions\n\nexport default {\n  title: \'Testing/Popups/Menu\',\n  component: Menu,\n  parameters: {\n    chromatic: {\n      disable: false,\n      delay: fontDelay,\n    },\n  },\n};\n\nconst AllStatesMenuItem = () => (\n  <Menu initialSelectedIds={[\'selected\']} initialCursorId="non-existent">\n    <Menu.Card style={{animation: \'none\', width: 300}}>\n      <Menu.List>\n        <Menu.Group title="Group Heading One">\n          <Menu.Item>Normal Item</Menu.Item>\n          <Menu.Item className="focus">Focused Item</Menu.Item>\n          <Menu.Item className="hover">Hovered Item</Menu.Item>\n          <Menu.Item className="focus hover">Focused & Hovered Item</Menu.Item>\n          <Menu.Item aria-disabled={true}>Disabled Item</Menu.Item>\n          <Menu.Item>Wrapped Text Item Wrapped Text Item Wrapped Text Item</Menu.Item>\n          <Menu.Item>\n            Superlonglinethatshouldbreakonitsownwithouthavingtodoanythingspecial\n          </Menu.Item>\n          <Menu.Divider />\n          <Menu.Item>Menu item between dividers</Menu.Item>\n          <Menu.Divider />\n          <Menu.Item>\n            <Menu.Item.Icon icon={saveAsIcon} />\n            <Menu.Item.Text>Item with Icon</Menu.Item.Text>\n          </Menu.Item>\n          <Menu.Item className="focus">\n            <Menu.Item.Icon icon={saveAsIcon} />\n            <Menu.Item.Text>Item with Icon (focused)</Menu.Item.Text>\n          </Menu.Item>\n          <Menu.Item className="hover">\n            <Menu.Item.Icon icon={saveAsIcon} />\n            <Menu.Item.Text>Item with Icon (hovered)</Menu.Item.Text>\n          </Menu.Item>\n          <Menu.Item className="focus hover">\n            <Menu.Item.Icon icon={saveAsIcon} />\n            <Menu.Item.Text>Item with Icon (focus & hovered)</Menu.Item.Text>\n          </Menu.Item>\n          <Menu.Item>\n            <Menu.Item.Icon icon={saveAsIcon} />\n            <Menu.Item.Text>Item with Icon Wrapped Text Wrapped Text</Menu.Item.Text>\n          </Menu.Item>\n        </Menu.Group>\n        <Menu.Group title="Group Heading Two">\n          <Menu.Item>Menu item for group two</Menu.Item>\n        </Menu.Group>\n      </Menu.List>\n    </Menu.Card>\n  </Menu>\n);\n\nexport const MenuItemStates = {\n  render: () => {\n    return (\n      <StaticStates>\n        <Flex gap="xs">\n          <div>\n            <h3>Normal</h3>\n            <AllStatesMenuItem />\n          </div>\n          <div>\n            <h3>Themed</h3>\n            <CanvasProvider theme={{canvas: customColorTheme}}>\n              <AllStatesMenuItem />\n            </CanvasProvider>\n          </div>\n          <div>\n            <h3>RTL</h3>\n            <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\n              <AllStatesMenuItem />\n            </CanvasProvider>\n          </div>\n        </Flex>\n      </StaticStates>\n    );\n  },\n};\n\nconst AllStatesMenuOption = () => (\n  <Menu initialSelectedIds={[\'selected\']} initialCursorId="non-existent">\n    <Menu.Card style={{animation: \'none\', width: 300}}>\n      <Menu.List>\n        <Menu.Option>Normal Item</Menu.Option>\n        <Menu.Option className="focus">Focused Item</Menu.Option>\n        <Menu.Option className="hover">Hovered Item</Menu.Option>\n        <Menu.Option className="focus hover">Focused & Hovered Item</Menu.Option>\n        <Menu.Option aria-disabled={true}>Disabled Item</Menu.Option>\n        <Menu.Option aria-selected={true}>Selected Item</Menu.Option>\n        <Menu.Option className="focus" aria-selected={true}>\n          Focused & Selected Item\n        </Menu.Option>\n        <Menu.Option className="hover" aria-selected={true}>\n          Hovered & Selected Item\n        </Menu.Option>\n        <Menu.Option className="focus hover" aria-selected={true}>\n          Focused & Hovered & Selected Item\n        </Menu.Option>\n        <Menu.Option aria-disabled={true} aria-selected={true}>\n          Disabled Selected Item\n        </Menu.Option>\n        <Menu.Option>Wrapped Text Item Wrapped Text Item Wrapped Text Item</Menu.Option>\n        <Menu.Divider />\n        <Menu.Option>Menu item between dividers</Menu.Option>\n        <Menu.Divider />\n        <Menu.Option>\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option className="focus">\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon (focused)</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option className="hover">\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon (hovered)</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option className="focus hover">\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon (focus & hovered)</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option aria-selected={true}>\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon (selected)</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option aria-selected={true} className="focus">\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon (focused & selected)</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option aria-selected={true} className="hover">\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon (hovered & selected)</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option aria-selected={true} className="focus hover">\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon (focus & hovered & selected)</Menu.Option.Text>\n        </Menu.Option>\n        <Menu.Option>\n          <Menu.Option.Icon icon={saveAsIcon} />\n          <Menu.Option.Text>Item with Icon Wrapped Text Wrapped Text</Menu.Option.Text>\n        </Menu.Option>\n      </Menu.List>\n    </Menu.Card>\n  </Menu>\n);\n\nconst MenuWithGroups = () => {\n  return (\n    <Menu initialSelectedIds={[\'0\']} initialCursorId="non-existent">\n      <Menu.Card style={{animation: \'none\', width: 300}}>\n        <Menu.List>\n          <Menu.Group title="Group Heading One">\n            <Menu.Item className="focus">Group one, Item one (focused)</Menu.Item>\n            <Menu.Item className="hover">Group one, Item two (hovered)</Menu.Item>\n          </Menu.Group>\n          <Menu.Group title="Group Heading Two">\n            <Menu.Item>Group two, Item one</Menu.Item>\n            <Menu.Item>Group two, Item two</Menu.Item>\n          </Menu.Group>\n        </Menu.List>\n      </Menu.Card>\n    </Menu>\n  );\n};\n\nexport const MenuOptionStates = {\n  render: () => {\n    return (\n      <StaticStates>\n        <Flex gap="xs">\n          <div>\n            <h3>Normal</h3>\n            <AllStatesMenuOption />\n          </div>\n          <div>\n            <h3>Themed</h3>\n            <CanvasProvider theme={{canvas: customColorTheme}}>\n              <AllStatesMenuOption />\n            </CanvasProvider>\n          </div>\n          <div>\n            <h3>RTL</h3>\n            <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\n              <AllStatesMenuOption />\n            </CanvasProvider>\n          </div>\n        </Flex>\n      </StaticStates>\n    );\n  },\n};\n\nexport const MenuGroups = {\n  render: () => {\n    return (\n      <StaticStates>\n        <Flex gap="xs">\n          <div>\n            <h3>LTR</h3>\n            <MenuWithGroups />\n          </div>\n          <div>\n            <h3>RTL</h3>\n            <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\n              <MenuWithGroups />\n            </CanvasProvider>\n          </div>\n        </Flex>\n      </StaticStates>\n    );\n  },\n};\n',locationsMap:{"menu-item-states":{startLoc:{col:30,line:72},endLoc:{col:1,line:97},startBody:{col:30,line:72},endBody:{col:1,line:97}},"menu-option-states":{startLoc:{col:32,line:185},endLoc:{col:1,line:210},startBody:{col:32,line:185},endBody:{col:1,line:210}},"menu-groups":{startLoc:{col:26,line:212},endLoc:{col:1,line:231},startBody:{col:26,line:212},endBody:{col:1,line:231}}}},chromatic:{disable:!1,delay:150}}};const AllStatesMenuItem=()=>(0,_jsxRuntime.jsx)(_menu.Menu,{initialSelectedIds:["selected"],initialCursorId:"non-existent",children:(0,_jsxRuntime.jsx)(_menu.Menu.Card,{style:{animation:"none",width:300},children:(0,_jsxRuntime.jsxs)(_menu.Menu.List,{children:[(0,_jsxRuntime.jsxs)(_menu.Menu.Group,{title:"Group Heading One",children:[(0,_jsxRuntime.jsx)(_menu.Menu.Item,{children:"Normal Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Item,{className:"focus",children:"Focused Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Item,{className:"hover",children:"Hovered Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Item,{className:"focus hover",children:"Focused & Hovered Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Item,{"aria-disabled":!0,children:"Disabled Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Item,{children:"Wrapped Text Item Wrapped Text Item Wrapped Text Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Item,{children:"Superlonglinethatshouldbreakonitsownwithouthavingtodoanythingspecial"}),(0,_jsxRuntime.jsx)(_menu.Menu.Divider,{}),(0,_jsxRuntime.jsx)(_menu.Menu.Item,{children:"Menu item between dividers"}),(0,_jsxRuntime.jsx)(_menu.Menu.Divider,{}),(0,_jsxRuntime.jsxs)(_menu.Menu.Item,{children:[(0,_jsxRuntime.jsx)(_menu.Menu.Item.Icon,{icon:_canvasSystemIconsWeb.saveAsIcon}),(0,_jsxRuntime.jsx)(_menu.Menu.Item.Text,{children:"Item with Icon"})]}),(0,_jsxRuntime.jsxs)(_menu.Menu.Item,{className:"focus",children:[(0,_jsxRuntime.jsx)(_menu.Menu.Item.Icon,{icon:_canvasSystemIconsWeb.saveAsIcon}),(0,_jsxRuntime.jsx)(_menu.Menu.Item.Text,{children:"Item with Icon (focused)"})]}),(0,_jsxRuntime.jsxs)(_menu.Menu.Item,{className:"hover",children:[(0,_jsxRuntime.jsx)(_menu.Menu.Item.Icon,{icon:_canvasSystemIconsWeb.saveAsIcon}),(0,_jsxRuntime.jsx)(_menu.Menu.Item.Text,{children:"Item with Icon (hovered)"})]}),(0,_jsxRuntime.jsxs)(_menu.Menu.Item,{className:"focus hover",children:[(0,_jsxRuntime.jsx)(_menu.Menu.Item.Icon,{icon:_canvasSystemIconsWeb.saveAsIcon}),(0,_jsxRuntime.jsx)(_menu.Menu.Item.Text,{children:"Item with Icon (focus & hovered)"})]}),(0,_jsxRuntime.jsxs)(_menu.Menu.Item,{children:[(0,_jsxRuntime.jsx)(_menu.Menu.Item.Icon,{icon:_canvasSystemIconsWeb.saveAsIcon}),(0,_jsxRuntime.jsx)(_menu.Menu.Item.Text,{children:"Item with Icon Wrapped Text Wrapped Text"})]})]}),(0,_jsxRuntime.jsx)(_menu.Menu.Group,{title:"Group Heading Two",children:(0,_jsxRuntime.jsx)(_menu.Menu.Item,{children:"Menu item for group two"})})]})})});AllStatesMenuItem.displayName="AllStatesMenuItem";exports.MenuItemStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsxs)(_layout.Flex,{gap:"xs",children:[(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("h3",{children:"Normal"}),(0,_jsxRuntime.jsx)(AllStatesMenuItem,{})]}),(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("h3",{children:"Themed"}),(0,_jsxRuntime.jsx)(_common.CanvasProvider,{theme:{canvas:_storybook.customColorTheme},children:(0,_jsxRuntime.jsx)(AllStatesMenuItem,{})})]}),(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("h3",{children:"RTL"}),(0,_jsxRuntime.jsx)(_common.CanvasProvider,{theme:{canvas:{direction:_common.ContentDirection.RTL}},children:(0,_jsxRuntime.jsx)(AllStatesMenuItem,{})})]})]})})};const AllStatesMenuOption=()=>(0,_jsxRuntime.jsx)(_menu.Menu,{initialSelectedIds:["selected"],initialCursorId:"non-existent",children:(0,_jsxRuntime.jsx)(_menu.Menu.Card,{style:{animation:"none",width:300},children:(0,_jsxRuntime.jsxs)(_menu.Menu.List,{children:[(0,_jsxRuntime.jsx)(_menu.Menu.Option,{children:"Normal Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Option,{className:"focus",children:"Focused Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Option,{className:"hover",children:"Hovered Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Option,{className:"focus hover",children:"Focused & Hovered Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Option,{"aria-disabled":!0,children:"Disabled Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Option,{"aria-selected":!0,children:"Selected Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Option,{className:"focus","aria-selected":!0,children:"Focused & Selected Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Option,{className:"hover","aria-selected":!0,children:"Hovered & Selected Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Option,{className:"focus hover","aria-selected":!0,children:"Focused & Hovered & Selected Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Option,{"aria-disabled":!0,"aria-selected":!0,children:"Disabled Selected Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Option,{children:"Wrapped Text Item Wrapped Text Item Wrapped Text Item"}),(0,_jsxRuntime.jsx)(_menu.Menu.Divider,{}),(0,_jsxRuntime.jsx)(_menu.Menu.Option,{children:"Menu item between dividers"}),(0,_jsxRuntime.jsx)(_menu.Menu.Divider,{}),(0,_jsxRuntime.jsxs)(_menu.Menu.Option,{children:[(0,_jsxRuntime.jsx)(_menu.Menu.Option.Icon,{icon:_canvasSystemIconsWeb.saveAsIcon}),(0,_jsxRuntime.jsx)(_menu.Menu.Option.Text,{children:"Item with Icon"})]}),(0,_jsxRuntime.jsxs)(_menu.Menu.Option,{className:"focus",children:[(0,_jsxRuntime.jsx)(_menu.Menu.Option.Icon,{icon:_canvasSystemIconsWeb.saveAsIcon}),(0,_jsxRuntime.jsx)(_menu.Menu.Option.Text,{children:"Item with Icon (focused)"})]}),(0,_jsxRuntime.jsxs)(_menu.Menu.Option,{className:"hover",children:[(0,_jsxRuntime.jsx)(_menu.Menu.Option.Icon,{icon:_canvasSystemIconsWeb.saveAsIcon}),(0,_jsxRuntime.jsx)(_menu.Menu.Option.Text,{children:"Item with Icon (hovered)"})]}),(0,_jsxRuntime.jsxs)(_menu.Menu.Option,{className:"focus hover",children:[(0,_jsxRuntime.jsx)(_menu.Menu.Option.Icon,{icon:_canvasSystemIconsWeb.saveAsIcon}),(0,_jsxRuntime.jsx)(_menu.Menu.Option.Text,{children:"Item with Icon (focus & hovered)"})]}),(0,_jsxRuntime.jsxs)(_menu.Menu.Option,{"aria-selected":!0,children:[(0,_jsxRuntime.jsx)(_menu.Menu.Option.Icon,{icon:_canvasSystemIconsWeb.saveAsIcon}),(0,_jsxRuntime.jsx)(_menu.Menu.Option.Text,{children:"Item with Icon (selected)"})]}),(0,_jsxRuntime.jsxs)(_menu.Menu.Option,{"aria-selected":!0,className:"focus",children:[(0,_jsxRuntime.jsx)(_menu.Menu.Option.Icon,{icon:_canvasSystemIconsWeb.saveAsIcon}),(0,_jsxRuntime.jsx)(_menu.Menu.Option.Text,{children:"Item with Icon (focused & selected)"})]}),(0,_jsxRuntime.jsxs)(_menu.Menu.Option,{"aria-selected":!0,className:"hover",children:[(0,_jsxRuntime.jsx)(_menu.Menu.Option.Icon,{icon:_canvasSystemIconsWeb.saveAsIcon}),(0,_jsxRuntime.jsx)(_menu.Menu.Option.Text,{children:"Item with Icon (hovered & selected)"})]}),(0,_jsxRuntime.jsxs)(_menu.Menu.Option,{"aria-selected":!0,className:"focus hover",children:[(0,_jsxRuntime.jsx)(_menu.Menu.Option.Icon,{icon:_canvasSystemIconsWeb.saveAsIcon}),(0,_jsxRuntime.jsx)(_menu.Menu.Option.Text,{children:"Item with Icon (focus & hovered & selected)"})]}),(0,_jsxRuntime.jsxs)(_menu.Menu.Option,{children:[(0,_jsxRuntime.jsx)(_menu.Menu.Option.Icon,{icon:_canvasSystemIconsWeb.saveAsIcon}),(0,_jsxRuntime.jsx)(_menu.Menu.Option.Text,{children:"Item with Icon Wrapped Text Wrapped Text"})]})]})})});AllStatesMenuOption.displayName="AllStatesMenuOption";const MenuWithGroups=()=>(0,_jsxRuntime.jsx)(_menu.Menu,{initialSelectedIds:["0"],initialCursorId:"non-existent",children:(0,_jsxRuntime.jsx)(_menu.Menu.Card,{style:{animation:"none",width:300},children:(0,_jsxRuntime.jsxs)(_menu.Menu.List,{children:[(0,_jsxRuntime.jsxs)(_menu.Menu.Group,{title:"Group Heading One",children:[(0,_jsxRuntime.jsx)(_menu.Menu.Item,{className:"focus",children:"Group one, Item one (focused)"}),(0,_jsxRuntime.jsx)(_menu.Menu.Item,{className:"hover",children:"Group one, Item two (hovered)"})]}),(0,_jsxRuntime.jsxs)(_menu.Menu.Group,{title:"Group Heading Two",children:[(0,_jsxRuntime.jsx)(_menu.Menu.Item,{children:"Group two, Item one"}),(0,_jsxRuntime.jsx)(_menu.Menu.Item,{children:"Group two, Item two"})]})]})})});MenuWithGroups.displayName="MenuWithGroups";exports.MenuOptionStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsxs)(_layout.Flex,{gap:"xs",children:[(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("h3",{children:"Normal"}),(0,_jsxRuntime.jsx)(AllStatesMenuOption,{})]}),(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("h3",{children:"Themed"}),(0,_jsxRuntime.jsx)(_common.CanvasProvider,{theme:{canvas:_storybook.customColorTheme},children:(0,_jsxRuntime.jsx)(AllStatesMenuOption,{})})]}),(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("h3",{children:"RTL"}),(0,_jsxRuntime.jsx)(_common.CanvasProvider,{theme:{canvas:{direction:_common.ContentDirection.RTL}},children:(0,_jsxRuntime.jsx)(AllStatesMenuOption,{})})]})]})})},exports.MenuGroups={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsxs)(_layout.Flex,{gap:"xs",children:[(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("h3",{children:"LTR"}),(0,_jsxRuntime.jsx)(MenuWithGroups,{})]}),(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("h3",{children:"RTL"}),(0,_jsxRuntime.jsx)(_common.CanvasProvider,{theme:{canvas:{direction:_common.ContentDirection.RTL}},children:(0,_jsxRuntime.jsx)(MenuWithGroups,{})})]})]})})};module.exports.__namedExportsOrder=["MenuOptionStates","MenuItemStates","MenuGroups"]},"./node_modules/react-innertext/index.js":module=>{var reduceJsxToString=function(previous,current){return previous+innerText(current)},innerText=function(jsx){return null===jsx||"boolean"==typeof jsx||void 0===jsx?"":"number"==typeof jsx?jsx.toString():"string"==typeof jsx?jsx:Array.isArray(jsx)?jsx.reduce(reduceJsxToString,""):function(jsx){return Object.prototype.hasOwnProperty.call(jsx,"props")}(jsx)&&Object.prototype.hasOwnProperty.call(jsx.props,"children")?innerText(jsx.props.children):""};innerText.default=innerText,module.exports=innerText},"./node_modules/react-virtual/dist/react-virtual.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{defaultRangeExtractor:()=>defaultRangeExtractor,useVirtual:()=>useVirtual});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var rafId,props=["bottom","height","left","right","top","width"],observedNodes=new Map,run=function run(){var changedStates=[];observedNodes.forEach((function(state,node){var newRect=node.getBoundingClientRect();(function rectChanged(a,b){return void 0===a&&(a={}),void 0===b&&(b={}),props.some((function(prop){return a[prop]!==b[prop]}))})(newRect,state.rect)&&(state.rect=newRect,changedStates.push(state))})),changedStates.forEach((function(state){state.callbacks.forEach((function(cb){return cb(state.rect)}))})),rafId=window.requestAnimationFrame(run)};var useIsomorphicLayoutEffect="undefined"!=typeof window?react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect:react__WEBPACK_IMPORTED_MODULE_0__.useEffect;function useRect(nodeRef,initialRect){void 0===initialRect&&(initialRect={width:0,height:0});var _React$useState=react__WEBPACK_IMPORTED_MODULE_0__.useState(nodeRef.current),element=_React$useState[0],setElement=_React$useState[1],_React$useReducer=react__WEBPACK_IMPORTED_MODULE_0__.useReducer(rectReducer,initialRect),rect=_React$useReducer[0],dispatch=_React$useReducer[1],initialRectSet=react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1);return useIsomorphicLayoutEffect((function(){nodeRef.current!==element&&setElement(nodeRef.current)})),useIsomorphicLayoutEffect((function(){if(element&&!initialRectSet.current){initialRectSet.current=!0;var _rect=element.getBoundingClientRect();dispatch({rect:_rect})}}),[element]),react__WEBPACK_IMPORTED_MODULE_0__.useEffect((function(){if(element){var observer=function observeRect(node,cb){return{observe:function observe(){var wasEmpty=0===observedNodes.size;observedNodes.has(node)?observedNodes.get(node).callbacks.push(cb):observedNodes.set(node,{rect:void 0,hasRectChanged:!1,callbacks:[cb]}),wasEmpty&&run()},unobserve:function unobserve(){var state=observedNodes.get(node);if(state){var index=state.callbacks.indexOf(cb);index>=0&&state.callbacks.splice(index,1),state.callbacks.length||observedNodes.delete(node),observedNodes.size||cancelAnimationFrame(rafId)}}}}(element,(function(rect){dispatch({rect})}));return observer.observe(),function(){observer.unobserve()}}}),[element]),rect}function rectReducer(state,action){var rect=action.rect;return state.height!==rect.height||state.width!==rect.width?rect:state}var defaultEstimateSize=function defaultEstimateSize(){return 50},defaultKeyExtractor=function defaultKeyExtractor(index){return index},defaultMeasureSize=function defaultMeasureSize(el,horizontal){return el[horizontal?"offsetWidth":"offsetHeight"]},defaultRangeExtractor=function defaultRangeExtractor(range){for(var start=Math.max(range.start-range.overscan,0),end=Math.min(range.end+range.overscan,range.size-1),arr=[],i=start;i<=end;i++)arr.push(i);return arr};function useVirtual(_ref){var _measurements,_ref$size=_ref.size,size=void 0===_ref$size?0:_ref$size,_ref$estimateSize=_ref.estimateSize,estimateSize=void 0===_ref$estimateSize?defaultEstimateSize:_ref$estimateSize,_ref$overscan=_ref.overscan,overscan=void 0===_ref$overscan?1:_ref$overscan,_ref$paddingStart=_ref.paddingStart,paddingStart=void 0===_ref$paddingStart?0:_ref$paddingStart,_ref$paddingEnd=_ref.paddingEnd,paddingEnd=void 0===_ref$paddingEnd?0:_ref$paddingEnd,parentRef=_ref.parentRef,horizontal=_ref.horizontal,scrollToFn=_ref.scrollToFn,useObserver=_ref.useObserver,initialRect=_ref.initialRect,onScrollElement=_ref.onScrollElement,scrollOffsetFn=_ref.scrollOffsetFn,_ref$keyExtractor=_ref.keyExtractor,keyExtractor=void 0===_ref$keyExtractor?defaultKeyExtractor:_ref$keyExtractor,_ref$measureSize=_ref.measureSize,measureSize=void 0===_ref$measureSize?defaultMeasureSize:_ref$measureSize,_ref$rangeExtractor=_ref.rangeExtractor,rangeExtractor=void 0===_ref$rangeExtractor?defaultRangeExtractor:_ref$rangeExtractor,sizeKey=horizontal?"width":"height",scrollKey=horizontal?"scrollLeft":"scrollTop",latestRef=react__WEBPACK_IMPORTED_MODULE_0__.useRef({scrollOffset:0,measurements:[]}),_React$useState=react__WEBPACK_IMPORTED_MODULE_0__.useState(0),scrollOffset=_React$useState[0],setScrollOffset=_React$useState[1];latestRef.current.scrollOffset=scrollOffset;var outerSize=(useObserver||useRect)(parentRef,initialRect)[sizeKey];latestRef.current.outerSize=outerSize;var defaultScrollToFn=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((function(offset){parentRef.current&&(parentRef.current[scrollKey]=offset)}),[parentRef,scrollKey]),resolvedScrollToFn=scrollToFn||defaultScrollToFn;scrollToFn=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((function(offset){resolvedScrollToFn(offset,defaultScrollToFn)}),[defaultScrollToFn,resolvedScrollToFn]);var _React$useState2=react__WEBPACK_IMPORTED_MODULE_0__.useState({}),measuredCache=_React$useState2[0],setMeasuredCache=_React$useState2[1],measure=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((function(){return setMeasuredCache({})}),[]),pendingMeasuredCacheIndexesRef=react__WEBPACK_IMPORTED_MODULE_0__.useRef([]),measurements=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){var min=pendingMeasuredCacheIndexesRef.current.length>0?Math.min.apply(Math,pendingMeasuredCacheIndexesRef.current):0;pendingMeasuredCacheIndexesRef.current=[];for(var measurements=latestRef.current.measurements.slice(0,min),i=min;i<size;i++){var key=keyExtractor(i),measuredSize=measuredCache[key],_start=measurements[i-1]?measurements[i-1].end:paddingStart,_size="number"==typeof measuredSize?measuredSize:estimateSize(i),_end=_start+_size;measurements[i]={index:i,start:_start,size:_size,end:_end,key}}return measurements}),[estimateSize,measuredCache,paddingStart,size,keyExtractor]),totalSize=((null==(_measurements=measurements[size-1])?void 0:_measurements.end)||paddingStart)+paddingEnd;latestRef.current.measurements=measurements,latestRef.current.totalSize=totalSize;var element=onScrollElement?onScrollElement.current:parentRef.current,scrollOffsetFnRef=react__WEBPACK_IMPORTED_MODULE_0__.useRef(scrollOffsetFn);scrollOffsetFnRef.current=scrollOffsetFn,useIsomorphicLayoutEffect((function(){if(element){var onScroll=function onScroll(event){var offset=scrollOffsetFnRef.current?scrollOffsetFnRef.current(event):element[scrollKey];setScrollOffset(offset)};return onScroll(),element.addEventListener("scroll",onScroll,{capture:!1,passive:!0}),function(){element.removeEventListener("scroll",onScroll)}}setScrollOffset(0)}),[element,scrollKey]);var _calculateRange=function calculateRange(_ref4){var measurements=_ref4.measurements,outerSize=_ref4.outerSize,scrollOffset=_ref4.scrollOffset,size=measurements.length-1,getOffset=function getOffset(index){return measurements[index].start},start=findNearestBinarySearch(0,size,getOffset,scrollOffset),end=start;for(;end<size&&measurements[end].end<scrollOffset+outerSize;)end++;return{start,end}}(latestRef.current),start=_calculateRange.start,end=_calculateRange.end,indexes=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return rangeExtractor({start,end,overscan,size:measurements.length})}),[start,end,overscan,measurements.length,rangeExtractor]),measureSizeRef=react__WEBPACK_IMPORTED_MODULE_0__.useRef(measureSize);measureSizeRef.current=measureSize;var virtualItems=react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){for(var virtualItems=[],_loop=function _loop(k,len){var i=indexes[k],item=_extends(_extends({},measurements[i]),{},{measureRef:function measureRef(el){if(el){var measuredSize=measureSizeRef.current(el,horizontal);if(measuredSize!==item.size){var _scrollOffset=latestRef.current.scrollOffset;item.start<_scrollOffset&&defaultScrollToFn(_scrollOffset+(measuredSize-item.size)),pendingMeasuredCacheIndexesRef.current.push(i),setMeasuredCache((function(old){var _extends2;return _extends(_extends({},old),{},((_extends2={})[item.key]=measuredSize,_extends2))}))}}}});virtualItems.push(item)},k=0,len=indexes.length;k<len;k++)_loop(k);return virtualItems}),[indexes,defaultScrollToFn,horizontal,measurements]),mountedRef=react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1);useIsomorphicLayoutEffect((function(){mountedRef.current&&setMeasuredCache({}),mountedRef.current=!0}),[estimateSize]);var scrollToOffset=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((function(toOffset,_temp){var _ref2$align=(void 0===_temp?{}:_temp).align,align=void 0===_ref2$align?"start":_ref2$align,_latestRef$current=latestRef.current,scrollOffset=_latestRef$current.scrollOffset,outerSize=_latestRef$current.outerSize;"auto"===align&&(align=toOffset<=scrollOffset?"start":toOffset>=scrollOffset+outerSize?"end":"start"),"start"===align?scrollToFn(toOffset):"end"===align?scrollToFn(toOffset-outerSize):"center"===align&&scrollToFn(toOffset-outerSize/2)}),[scrollToFn]),tryScrollToIndex=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((function(index,_temp2){var _ref3=void 0===_temp2?{}:_temp2,_ref3$align=_ref3.align,align=void 0===_ref3$align?"auto":_ref3$align,rest=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_ref3,["align"]),_latestRef$current2=latestRef.current,measurements=_latestRef$current2.measurements,scrollOffset=_latestRef$current2.scrollOffset,outerSize=_latestRef$current2.outerSize,measurement=measurements[Math.max(0,Math.min(index,size-1))];if(measurement){if("auto"===align)if(measurement.end>=scrollOffset+outerSize)align="end";else{if(!(measurement.start<=scrollOffset))return;align="start"}var toOffset="center"===align?measurement.start+measurement.size/2:"end"===align?measurement.end:measurement.start;scrollToOffset(toOffset,_extends({align},rest))}}),[scrollToOffset,size]),scrollToIndex=react__WEBPACK_IMPORTED_MODULE_0__.useCallback((function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];tryScrollToIndex.apply(void 0,args),requestAnimationFrame((function(){tryScrollToIndex.apply(void 0,args)}))}),[tryScrollToIndex]);return{virtualItems,totalSize,scrollToOffset,scrollToIndex,measure}}var findNearestBinarySearch=function findNearestBinarySearch(low,high,getCurrentValue,value){for(;low<=high;){var middle=(low+high)/2|0,currentValue=getCurrentValue(middle);if(currentValue<value)low=middle+1;else{if(!(currentValue>value))return middle;high=middle-1}}return low>0?low-1:0}}}]);