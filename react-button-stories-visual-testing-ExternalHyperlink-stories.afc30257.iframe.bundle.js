"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[6919],{"./modules/react/button/stories/visual-testing/ExternalHyperlink.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.ExternalHyperlinkStates=void 0;var _react=__webpack_require__("./node_modules/@emotion/react/dist/emotion-react.browser.esm.js"),_react2=function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}(__webpack_require__("./node_modules/react/index.js")),_common=__webpack_require__("./modules/react/common/index.ts"),_testing=__webpack_require__("./modules/react/testing/index.ts"),_button=__webpack_require__("./modules/react/button/index.ts"),_utils=__webpack_require__("./modules/react/button/stories/visual-testing/utils.tsx"),_layout=__webpack_require__("./modules/react/layout/index.ts"),_text=__webpack_require__("./modules/react/text/index.ts");exports.default={title:"Testing/Buttons/Button/ExternalHyperlink",component:_button.ExternalHyperlink,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"/** @jsxRuntime classic */\\n/** @jsx jsx */\\nimport {jsx} from '@emotion/react';\\nimport React from 'react';\\nimport {CanvasProvider, ContentDirection} from '@workday/canvas-kit-react/common';\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {ExternalHyperlink} from '@workday/canvas-kit-react/button';\\nimport {Container} from './utils';\\nimport {Box, Flex} from '@workday/canvas-kit-react/layout';\\nimport {BodyText, Subtext} from '@workday/canvas-kit-react/text';\\n\\nexport default {\\n  title: 'Testing/Buttons/Button/ExternalHyperlink',\\n  component: ExternalHyperlink,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const ExternalHyperlinkStates = {\\n  render: () => (\\n    <React.Fragment>\\n      <StaticStates>\\n        <ComponentStatesTable\\n          rowProps={permutateProps({\\n            variant: [\\n              {label: 'Default', value: undefined},\\n              {label: 'Inverse', value: 'inverse'},\\n            ],\\n          })}\\n          columnProps={permutateProps({\\n            className: [\\n              {label: 'Default', value: ''},\\n              {label: 'Hover', value: 'hover'},\\n              {label: 'Focus', value: 'focus'},\\n              {label: 'Focus Hover', value: 'focus hover'},\\n              {label: 'Active', value: 'active'},\\n              {label: 'Active Hover', value: 'active hover'},\\n              {label: 'Visited', value: 'visited'},\\n            ],\\n          })}\\n        >\\n          {(props: any) => (\\n            <Container blue={props.variant === 'inverse'}>\\n              <Subtext as=\\\"span\\\" size=\\\"large\\\" variant={props.variant}>\\n                Here's a <ExternalHyperlink {...props}>Link</ExternalHyperlink> to something\\n              </Subtext>\\n            </Container>\\n          )}\\n        </ComponentStatesTable>\\n      </StaticStates>\\n      <Flex flexDirection=\\\"column\\\" gap=\\\"xxs\\\">\\n        <h3>Typography</h3>\\n        <Subtext size=\\\"large\\\">\\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n        </Subtext>\\n        <BodyText size=\\\"small\\\">\\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n        </BodyText>\\n        <BodyText size=\\\"medium\\\">\\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n        </BodyText>\\n        <BodyText size=\\\"large\\\">\\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n        </BodyText>\\n      </Flex>\\n      <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\\n        <Flex flexDirection=\\\"column\\\" gap=\\\"xxs\\\">\\n          <Subtext size=\\\"large\\\">\\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n          </Subtext>\\n          <BodyText size=\\\"small\\\">\\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n          </BodyText>\\n          <BodyText size=\\\"medium\\\">\\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n          </BodyText>\\n          <BodyText size=\\\"large\\\">\\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n          </BodyText>\\n        </Flex>\\n      </CanvasProvider>\\n    </React.Fragment>\\n  ),\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"ExternalHyperlinkStates\": {\n    \"startLoc\": {\n      \"col\": 39,\n      \"line\": 26\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 91\n    },\n    \"startBody\": {\n      \"col\": 39,\n      \"line\": 26\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 91\n    }\n  }\n};\n    \n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport {jsx} from '@emotion/react';\nimport React from 'react';\nimport {CanvasProvider, ContentDirection} from '@workday/canvas-kit-react/common';\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {ExternalHyperlink} from '@workday/canvas-kit-react/button';\nimport {Container} from './utils';\nimport {Box, Flex} from '@workday/canvas-kit-react/layout';\nimport {BodyText, Subtext} from '@workday/canvas-kit-react/text';\n\nexport default {\n  title: 'Testing/Buttons/Button/ExternalHyperlink',\n  component: ExternalHyperlink,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"/** @jsxRuntime classic */\\n/** @jsx jsx */\\nimport {jsx} from '@emotion/react';\\nimport React from 'react';\\nimport {CanvasProvider, ContentDirection} from '@workday/canvas-kit-react/common';\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {ExternalHyperlink} from '@workday/canvas-kit-react/button';\\nimport {Container} from './utils';\\nimport {Box, Flex} from '@workday/canvas-kit-react/layout';\\nimport {BodyText, Subtext} from '@workday/canvas-kit-react/text';\\n\\nexport default {\\n  title: 'Testing/Buttons/Button/ExternalHyperlink',\\n  component: ExternalHyperlink,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const ExternalHyperlinkStates = {\\n  render: () => (\\n    <React.Fragment>\\n      <StaticStates>\\n        <ComponentStatesTable\\n          rowProps={permutateProps({\\n            variant: [\\n              {label: 'Default', value: undefined},\\n              {label: 'Inverse', value: 'inverse'},\\n            ],\\n          })}\\n          columnProps={permutateProps({\\n            className: [\\n              {label: 'Default', value: ''},\\n              {label: 'Hover', value: 'hover'},\\n              {label: 'Focus', value: 'focus'},\\n              {label: 'Focus Hover', value: 'focus hover'},\\n              {label: 'Active', value: 'active'},\\n              {label: 'Active Hover', value: 'active hover'},\\n              {label: 'Visited', value: 'visited'},\\n            ],\\n          })}\\n        >\\n          {(props: any) => (\\n            <Container blue={props.variant === 'inverse'}>\\n              <Subtext as=\\\"span\\\" size=\\\"large\\\" variant={props.variant}>\\n                Here's a <ExternalHyperlink {...props}>Link</ExternalHyperlink> to something\\n              </Subtext>\\n            </Container>\\n          )}\\n        </ComponentStatesTable>\\n      </StaticStates>\\n      <Flex flexDirection=\\\"column\\\" gap=\\\"xxs\\\">\\n        <h3>Typography</h3>\\n        <Subtext size=\\\"large\\\">\\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n        </Subtext>\\n        <BodyText size=\\\"small\\\">\\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n        </BodyText>\\n        <BodyText size=\\\"medium\\\">\\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n        </BodyText>\\n        <BodyText size=\\\"large\\\">\\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n        </BodyText>\\n      </Flex>\\n      <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\\n        <Flex flexDirection=\\\"column\\\" gap=\\\"xxs\\\">\\n          <Subtext size=\\\"large\\\">\\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n          </Subtext>\\n          <BodyText size=\\\"small\\\">\\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n          </BodyText>\\n          <BodyText size=\\\"medium\\\">\\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n          </BodyText>\\n          <BodyText size=\\\"large\\\">\\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\\n          </BodyText>\\n        </Flex>\\n      </CanvasProvider>\\n    </React.Fragment>\\n  ),\\n};\\n\",\n    \"locationsMap\": {\n      \"external-hyperlink-states\": {\n        \"startLoc\": {\n          \"col\": 39,\n          \"line\": 26\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 91\n        },\n        \"startBody\": {\n          \"col\": 39,\n          \"line\": 26\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 91\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const ExternalHyperlinkStates = {\n  render: () => (\n    <React.Fragment>\n      <StaticStates>\n        <ComponentStatesTable\n          rowProps={permutateProps({\n            variant: [\n              {label: 'Default', value: undefined},\n              {label: 'Inverse', value: 'inverse'},\n            ],\n          })}\n          columnProps={permutateProps({\n            className: [\n              {label: 'Default', value: ''},\n              {label: 'Hover', value: 'hover'},\n              {label: 'Focus', value: 'focus'},\n              {label: 'Focus Hover', value: 'focus hover'},\n              {label: 'Active', value: 'active'},\n              {label: 'Active Hover', value: 'active hover'},\n              {label: 'Visited', value: 'visited'},\n            ],\n          })}\n        >\n          {(props: any) => (\n            <Container blue={props.variant === 'inverse'}>\n              <Subtext as=\"span\" size=\"large\" variant={props.variant}>\n                Here's a <ExternalHyperlink {...props}>Link</ExternalHyperlink> to something\n              </Subtext>\n            </Container>\n          )}\n        </ComponentStatesTable>\n      </StaticStates>\n      <Flex flexDirection=\"column\" gap=\"xxs\">\n        <h3>Typography</h3>\n        <Subtext size=\"large\">\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n        </Subtext>\n        <BodyText size=\"small\">\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n        </BodyText>\n        <BodyText size=\"medium\">\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n        </BodyText>\n        <BodyText size=\"large\">\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n        </BodyText>\n      </Flex>\n      <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\n        <Flex flexDirection=\"column\" gap=\"xxs\">\n          <Subtext size=\"large\">\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n          </Subtext>\n          <BodyText size=\"small\">\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n          </BodyText>\n          <BodyText size=\"medium\">\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n          </BodyText>\n          <BodyText size=\"large\">\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n          </BodyText>\n        </Flex>\n      </CanvasProvider>\n    </React.Fragment>\n  ),\n};\n",locationsMap:{"external-hyperlink-states":{startLoc:{col:39,line:77},endLoc:{col:1,line:142},startBody:{col:39,line:77},endBody:{col:1,line:142}}}},storySource:{source:"/** @jsxRuntime classic */\n/** @jsx jsx */\nimport {jsx} from '@emotion/react';\nimport React from 'react';\nimport {CanvasProvider, ContentDirection} from '@workday/canvas-kit-react/common';\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {ExternalHyperlink} from '@workday/canvas-kit-react/button';\nimport {Container} from './utils';\nimport {Box, Flex} from '@workday/canvas-kit-react/layout';\nimport {BodyText, Subtext} from '@workday/canvas-kit-react/text';\n\nexport default {\n  title: 'Testing/Buttons/Button/ExternalHyperlink',\n  component: ExternalHyperlink,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const ExternalHyperlinkStates = {\n  render: () => (\n    <React.Fragment>\n      <StaticStates>\n        <ComponentStatesTable\n          rowProps={permutateProps({\n            variant: [\n              {label: 'Default', value: undefined},\n              {label: 'Inverse', value: 'inverse'},\n            ],\n          })}\n          columnProps={permutateProps({\n            className: [\n              {label: 'Default', value: ''},\n              {label: 'Hover', value: 'hover'},\n              {label: 'Focus', value: 'focus'},\n              {label: 'Focus Hover', value: 'focus hover'},\n              {label: 'Active', value: 'active'},\n              {label: 'Active Hover', value: 'active hover'},\n              {label: 'Visited', value: 'visited'},\n            ],\n          })}\n        >\n          {(props: any) => (\n            <Container blue={props.variant === 'inverse'}>\n              <Subtext as=\"span\" size=\"large\" variant={props.variant}>\n                Here's a <ExternalHyperlink {...props}>Link</ExternalHyperlink> to something\n              </Subtext>\n            </Container>\n          )}\n        </ComponentStatesTable>\n      </StaticStates>\n      <Flex flexDirection=\"column\" gap=\"xxs\">\n        <h3>Typography</h3>\n        <Subtext size=\"large\">\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n        </Subtext>\n        <BodyText size=\"small\">\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n        </BodyText>\n        <BodyText size=\"medium\">\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n        </BodyText>\n        <BodyText size=\"large\">\n          The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n        </BodyText>\n      </Flex>\n      <CanvasProvider theme={{canvas: {direction: ContentDirection.RTL}}}>\n        <Flex flexDirection=\"column\" gap=\"xxs\">\n          <Subtext size=\"large\">\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n          </Subtext>\n          <BodyText size=\"small\">\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n          </BodyText>\n          <BodyText size=\"medium\">\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n          </BodyText>\n          <BodyText size=\"large\">\n            The quick <ExternalHyperlink>brown fox</ExternalHyperlink> jumps over the lazy dog\n          </BodyText>\n        </Flex>\n      </CanvasProvider>\n    </React.Fragment>\n  ),\n};\n",locationsMap:{"external-hyperlink-states":{startLoc:{col:39,line:26},endLoc:{col:1,line:91},startBody:{col:39,line:26},endBody:{col:1,line:91}}}},chromatic:{disable:!1}}};exports.ExternalHyperlinkStates={render:()=>(0,_react.jsx)(_react2.default.Fragment,null,(0,_react.jsx)(_testing.StaticStates,null,(0,_react.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({variant:[{label:"Default",value:void 0},{label:"Inverse",value:"inverse"}]}),columnProps:(0,_testing.permutateProps)({className:[{label:"Default",value:""},{label:"Hover",value:"hover"},{label:"Focus",value:"focus"},{label:"Focus Hover",value:"focus hover"},{label:"Active",value:"active"},{label:"Active Hover",value:"active hover"},{label:"Visited",value:"visited"}]})},(props=>(0,_react.jsx)(_utils.Container,{blue:"inverse"===props.variant},(0,_react.jsx)(_text.Subtext,{as:"span",size:"large",variant:props.variant},"Here's a ",(0,_react.jsx)(_button.ExternalHyperlink,props,"Link")," to something"))))),(0,_react.jsx)(_layout.Flex,{flexDirection:"column",gap:"xxs"},(0,_react.jsx)("h3",null,"Typography"),(0,_react.jsx)(_text.Subtext,{size:"large"},"The quick ",(0,_react.jsx)(_button.ExternalHyperlink,null,"brown fox")," jumps over the lazy dog"),(0,_react.jsx)(_text.BodyText,{size:"small"},"The quick ",(0,_react.jsx)(_button.ExternalHyperlink,null,"brown fox")," jumps over the lazy dog"),(0,_react.jsx)(_text.BodyText,{size:"medium"},"The quick ",(0,_react.jsx)(_button.ExternalHyperlink,null,"brown fox")," jumps over the lazy dog"),(0,_react.jsx)(_text.BodyText,{size:"large"},"The quick ",(0,_react.jsx)(_button.ExternalHyperlink,null,"brown fox")," jumps over the lazy dog")),(0,_react.jsx)(_common.CanvasProvider,{theme:{canvas:{direction:_common.ContentDirection.RTL}}},(0,_react.jsx)(_layout.Flex,{flexDirection:"column",gap:"xxs"},(0,_react.jsx)(_text.Subtext,{size:"large"},"The quick ",(0,_react.jsx)(_button.ExternalHyperlink,null,"brown fox")," jumps over the lazy dog"),(0,_react.jsx)(_text.BodyText,{size:"small"},"The quick ",(0,_react.jsx)(_button.ExternalHyperlink,null,"brown fox")," jumps over the lazy dog"),(0,_react.jsx)(_text.BodyText,{size:"medium"},"The quick ",(0,_react.jsx)(_button.ExternalHyperlink,null,"brown fox")," jumps over the lazy dog"),(0,_react.jsx)(_text.BodyText,{size:"large"},"The quick ",(0,_react.jsx)(_button.ExternalHyperlink,null,"brown fox")," jumps over the lazy dog"))))};module.exports.__namedExportsOrder=["ExternalHyperlinkStates"]},"./modules/react/button/stories/visual-testing/utils.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.stateTableColumnProps=exports.Container=void 0;var _react=__webpack_require__("./node_modules/@emotion/react/dist/emotion-react.browser.esm.js"),systemIcons=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/@workday/canvas-system-icons-web/dist/es6/index.js"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}const buttonLayout={display:"flex",alignItems:"center",justifyContent:"center"},blueBackground={...buttonLayout,backgroundColor:"#0875e1",padding:"12px",borderRadius:"4px"},Container=props=>(0,_react.jsx)("div",{css:props.blue?blueBackground:buttonLayout},props.children);exports.Container=Container,Container.displayName="Container";exports.stateTableColumnProps=[{label:"Default ",props:{className:"",disabled:!1}},{label:"Default Disabled",props:{className:"",disabled:!0}},{label:"Hover ",props:{className:"hover",disabled:!1}},{label:"Hover Disabled",props:{className:"hover",disabled:!0}},{label:"Focus ",props:{className:"focus",disabled:!1}},{label:"Focus Hover ",props:{className:"focus hover",disabled:!1}},{label:"Active ",props:{className:"active",disabled:!1}},{label:"Active Hover ",props:{className:"active hover",disabled:!1}}];const systemIconArray=[];for(const icon in systemIcons)systemIcons[icon].filename&&systemIconArray.push(systemIcons[icon])}}]);