"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[7197],{"./modules/react/tooltip/stories/testing.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.PlacementsFocus=exports.Placements=exports.Overflow=exports.NonInteractive=void 0;var React=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_popup=__webpack_require__("./modules/react/popup/index.ts"),_tooltip=__webpack_require__("./modules/react/tooltip/index.ts"),_canvasSystemIconsWeb=__webpack_require__("./node_modules/@workday/canvas-system-icons-web/dist/es6/index.js"),_card=__webpack_require__("./modules/react/card/index.ts"),_button=__webpack_require__("./modules/react/button/index.ts"),_testing=__webpack_require__("./modules/react/testing/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}exports.default={parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import * as React from 'react';\\nimport {Popper, Placement} from '@workday/canvas-kit-react/popup';\\nimport {TooltipContainer, Tooltip, OverflowTooltip} from '@workday/canvas-kit-react/tooltip';\\nimport {resetIcon} from '@workday/canvas-system-icons-web';\\nimport {Card} from '@workday/canvas-kit-react/card';\\nimport {SecondaryButton} from '@workday/canvas-kit-react/button';\\nimport {StaticStates} from '@workday/canvas-kit-react/testing';\\n\\nexport default {\\n  title: 'Testing/Popups/Tooltip',\\n  component: Tooltip,\\n};\\n\\nexport const NonInteractive = {\\n  render: () => {\\n    return (\\n      <Tooltip title=\\\"Test\\\">\\n        <span data-testid=\\\"non-interactive\\\">Non-interactive Tooltip</span>\\n      </Tooltip>\\n    );\\n  },\\n};\\n\\nexport const Overflow = {\\n  render: () => {\\n    return (\\n      <OverflowTooltip>\\n        <SecondaryButton data-testid=\\\"overflow-tooltip\\\" icon={resetIcon} style={{maxWidth: 200}}>\\n          Super Mega Ultra Long Content With Max Width On The Button with Icon\\n        </SecondaryButton>\\n      </OverflowTooltip>\\n    );\\n  },\\n};\\n\\nexport const Placements = {\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n  render: () => {\\n    const ref = React.useRef<HTMLDivElement>(null);\\n\\n    const placements: Placement[] = [\\n      'top-start',\\n      'top',\\n      'top-end',\\n      'right-start',\\n      'right',\\n      'right-end',\\n      'bottom-end',\\n      'bottom',\\n      'bottom-start',\\n      'left-end',\\n      'left',\\n      'left-start',\\n    ];\\n    return (\\n      <div\\n        style={{\\n          display: 'inline-block',\\n          overflow: 'auto',\\n          padding: 100,\\n        }}\\n      >\\n        <Card\\n          ref={ref}\\n          style={{\\n            width: 300,\\n            height: 300,\\n            display: 'flex',\\n            alignItems: 'center',\\n            justifyContent: 'center',\\n          }}\\n        >\\n          <Card.Body>\\n            Target: We set font to sans serif so we don't have to wait for roboto to load\\n          </Card.Body>\\n        </Card>\\n        {placements.map(placement => (\\n          <Popper\\n            key={placement}\\n            placement={placement}\\n            popperOptions={{\\n              modifiers: [\\n                // keep the tooltips from moving - no matter what!\\n                {name: 'flip', enabled: false},\\n                {name: 'preventOverflow', enabled: false},\\n                {name: 'fallbackModifier', enabled: false},\\n              ],\\n            }}\\n            open={true}\\n            anchorElement={ref}\\n          >\\n            <TooltipContainer style={{fontFamily: 'sans-serif'}} transformOrigin={null}>\\n              {placement}\\n            </TooltipContainer>\\n          </Popper>\\n        ))}\\n      </div>\\n    );\\n  },\\n};\\n\\nexport const PlacementsFocus = {\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n  render: () => {\\n    const ref = React.useRef<HTMLButtonElement>(null);\\n\\n    React.useEffect(() => {\\n      document.body.setAttribute('data-whatinput', 'keyboard');\\n    }, []);\\n\\n    const placements: Placement[] = [\\n      'top-start',\\n      'top',\\n      'top-end',\\n      'right-start',\\n      'right',\\n      'right-end',\\n      'bottom-end',\\n      'bottom',\\n      'bottom-start',\\n      'left-end',\\n      'left',\\n      'left-start',\\n    ];\\n    return (\\n      <StaticStates>\\n        <div\\n          style={{\\n            display: 'inline-block',\\n            overflow: 'auto',\\n            padding: 100,\\n          }}\\n        >\\n          <SecondaryButton\\n            style={{\\n              width: 300,\\n              height: 300,\\n              display: 'flex',\\n              alignItems: 'center',\\n              justifyContent: 'center',\\n              borderRadius: 4,\\n            }}\\n            className=\\\"focus\\\"\\n            ref={ref}\\n          >\\n            <span style={{whiteSpace: 'normal', textOverflow: 'initial', overflow: 'visible'}}>\\n              Target: We set font to sans serif so we don't have to wait for roboto to load\\n            </span>\\n          </SecondaryButton>\\n          {placements.map(placement => (\\n            <Popper\\n              key={placement}\\n              placement={placement}\\n              popperOptions={{\\n                modifiers: [\\n                  // keep the tooltips from moving - no matter what!\\n                  {name: 'flip', enabled: false},\\n                  {name: 'preventOverflow', enabled: false},\\n                  {name: 'fallbackModifier', enabled: false},\\n                ],\\n              }}\\n              open={true}\\n              anchorElement={ref}\\n            >\\n              <TooltipContainer style={{fontFamily: 'sans-serif'}} transformOrigin={null}>\\n                {placement}\\n              </TooltipContainer>\\n            </Popper>\\n          ))}\\n        </div>\\n      </StaticStates>\\n    );\\n  },\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"NonInteractive\": {\n    \"startLoc\": {\n      \"col\": 30,\n      \"line\": 14\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 22\n    },\n    \"startBody\": {\n      \"col\": 30,\n      \"line\": 14\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 22\n    }\n  },\n  \"Overflow\": {\n    \"startLoc\": {\n      \"col\": 24,\n      \"line\": 24\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 34\n    },\n    \"startBody\": {\n      \"col\": 24,\n      \"line\": 24\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 34\n    }\n  },\n  \"Placements\": {\n    \"startLoc\": {\n      \"col\": 26,\n      \"line\": 36\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 104\n    },\n    \"startBody\": {\n      \"col\": 26,\n      \"line\": 36\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 104\n    }\n  },\n  \"PlacementsFocus\": {\n    \"startLoc\": {\n      \"col\": 31,\n      \"line\": 106\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 182\n    },\n    \"startBody\": {\n      \"col\": 31,\n      \"line\": 106\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 182\n    }\n  }\n};\n    \nimport * as React from 'react';\nimport {Popper, Placement} from '@workday/canvas-kit-react/popup';\nimport {TooltipContainer, Tooltip, OverflowTooltip} from '@workday/canvas-kit-react/tooltip';\nimport {resetIcon} from '@workday/canvas-system-icons-web';\nimport {Card} from '@workday/canvas-kit-react/card';\nimport {SecondaryButton} from '@workday/canvas-kit-react/button';\nimport {StaticStates} from '@workday/canvas-kit-react/testing';\n\nexport default {parameters: {\n  \"storySource\": {\n    \"source\": \"import * as React from 'react';\\nimport {Popper, Placement} from '@workday/canvas-kit-react/popup';\\nimport {TooltipContainer, Tooltip, OverflowTooltip} from '@workday/canvas-kit-react/tooltip';\\nimport {resetIcon} from '@workday/canvas-system-icons-web';\\nimport {Card} from '@workday/canvas-kit-react/card';\\nimport {SecondaryButton} from '@workday/canvas-kit-react/button';\\nimport {StaticStates} from '@workday/canvas-kit-react/testing';\\n\\nexport default {\\n  title: 'Testing/Popups/Tooltip',\\n  component: Tooltip,\\n};\\n\\nexport const NonInteractive = {\\n  render: () => {\\n    return (\\n      <Tooltip title=\\\"Test\\\">\\n        <span data-testid=\\\"non-interactive\\\">Non-interactive Tooltip</span>\\n      </Tooltip>\\n    );\\n  },\\n};\\n\\nexport const Overflow = {\\n  render: () => {\\n    return (\\n      <OverflowTooltip>\\n        <SecondaryButton data-testid=\\\"overflow-tooltip\\\" icon={resetIcon} style={{maxWidth: 200}}>\\n          Super Mega Ultra Long Content With Max Width On The Button with Icon\\n        </SecondaryButton>\\n      </OverflowTooltip>\\n    );\\n  },\\n};\\n\\nexport const Placements = {\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n  render: () => {\\n    const ref = React.useRef<HTMLDivElement>(null);\\n\\n    const placements: Placement[] = [\\n      'top-start',\\n      'top',\\n      'top-end',\\n      'right-start',\\n      'right',\\n      'right-end',\\n      'bottom-end',\\n      'bottom',\\n      'bottom-start',\\n      'left-end',\\n      'left',\\n      'left-start',\\n    ];\\n    return (\\n      <div\\n        style={{\\n          display: 'inline-block',\\n          overflow: 'auto',\\n          padding: 100,\\n        }}\\n      >\\n        <Card\\n          ref={ref}\\n          style={{\\n            width: 300,\\n            height: 300,\\n            display: 'flex',\\n            alignItems: 'center',\\n            justifyContent: 'center',\\n          }}\\n        >\\n          <Card.Body>\\n            Target: We set font to sans serif so we don't have to wait for roboto to load\\n          </Card.Body>\\n        </Card>\\n        {placements.map(placement => (\\n          <Popper\\n            key={placement}\\n            placement={placement}\\n            popperOptions={{\\n              modifiers: [\\n                // keep the tooltips from moving - no matter what!\\n                {name: 'flip', enabled: false},\\n                {name: 'preventOverflow', enabled: false},\\n                {name: 'fallbackModifier', enabled: false},\\n              ],\\n            }}\\n            open={true}\\n            anchorElement={ref}\\n          >\\n            <TooltipContainer style={{fontFamily: 'sans-serif'}} transformOrigin={null}>\\n              {placement}\\n            </TooltipContainer>\\n          </Popper>\\n        ))}\\n      </div>\\n    );\\n  },\\n};\\n\\nexport const PlacementsFocus = {\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n  render: () => {\\n    const ref = React.useRef<HTMLButtonElement>(null);\\n\\n    React.useEffect(() => {\\n      document.body.setAttribute('data-whatinput', 'keyboard');\\n    }, []);\\n\\n    const placements: Placement[] = [\\n      'top-start',\\n      'top',\\n      'top-end',\\n      'right-start',\\n      'right',\\n      'right-end',\\n      'bottom-end',\\n      'bottom',\\n      'bottom-start',\\n      'left-end',\\n      'left',\\n      'left-start',\\n    ];\\n    return (\\n      <StaticStates>\\n        <div\\n          style={{\\n            display: 'inline-block',\\n            overflow: 'auto',\\n            padding: 100,\\n          }}\\n        >\\n          <SecondaryButton\\n            style={{\\n              width: 300,\\n              height: 300,\\n              display: 'flex',\\n              alignItems: 'center',\\n              justifyContent: 'center',\\n              borderRadius: 4,\\n            }}\\n            className=\\\"focus\\\"\\n            ref={ref}\\n          >\\n            <span style={{whiteSpace: 'normal', textOverflow: 'initial', overflow: 'visible'}}>\\n              Target: We set font to sans serif so we don't have to wait for roboto to load\\n            </span>\\n          </SecondaryButton>\\n          {placements.map(placement => (\\n            <Popper\\n              key={placement}\\n              placement={placement}\\n              popperOptions={{\\n                modifiers: [\\n                  // keep the tooltips from moving - no matter what!\\n                  {name: 'flip', enabled: false},\\n                  {name: 'preventOverflow', enabled: false},\\n                  {name: 'fallbackModifier', enabled: false},\\n                ],\\n              }}\\n              open={true}\\n              anchorElement={ref}\\n            >\\n              <TooltipContainer style={{fontFamily: 'sans-serif'}} transformOrigin={null}>\\n                {placement}\\n              </TooltipContainer>\\n            </Popper>\\n          ))}\\n        </div>\\n      </StaticStates>\\n    );\\n  },\\n};\\n\",\n    \"locationsMap\": {\n      \"non-interactive\": {\n        \"startLoc\": {\n          \"col\": 30,\n          \"line\": 14\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 22\n        },\n        \"startBody\": {\n          \"col\": 30,\n          \"line\": 14\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 22\n        }\n      },\n      \"overflow\": {\n        \"startLoc\": {\n          \"col\": 24,\n          \"line\": 24\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 34\n        },\n        \"startBody\": {\n          \"col\": 24,\n          \"line\": 24\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 34\n        }\n      },\n      \"placements\": {\n        \"startLoc\": {\n          \"col\": 26,\n          \"line\": 36\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 104\n        },\n        \"startBody\": {\n          \"col\": 26,\n          \"line\": 36\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 104\n        }\n      },\n      \"placements-focus\": {\n        \"startLoc\": {\n          \"col\": 31,\n          \"line\": 106\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 182\n        },\n        \"startBody\": {\n          \"col\": 31,\n          \"line\": 106\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 182\n        }\n      }\n    }\n  }\n,},\n  title: 'Testing/Popups/Tooltip',\n  component: Tooltip,\n};\n\nexport const NonInteractive = {\n  render: () => {\n    return (\n      <Tooltip title=\"Test\">\n        <span data-testid=\"non-interactive\">Non-interactive Tooltip</span>\n      </Tooltip>\n    );\n  },\n};;\n\nexport const Overflow = {\n  render: () => {\n    return (\n      <OverflowTooltip>\n        <SecondaryButton data-testid=\"overflow-tooltip\" icon={resetIcon} style={{maxWidth: 200}}>\n          Super Mega Ultra Long Content With Max Width On The Button with Icon\n        </SecondaryButton>\n      </OverflowTooltip>\n    );\n  },\n};;\n\nexport const Placements = {\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n  render: () => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    const placements: Placement[] = [\n      'top-start',\n      'top',\n      'top-end',\n      'right-start',\n      'right',\n      'right-end',\n      'bottom-end',\n      'bottom',\n      'bottom-start',\n      'left-end',\n      'left',\n      'left-start',\n    ];\n    return (\n      <div\n        style={{\n          display: 'inline-block',\n          overflow: 'auto',\n          padding: 100,\n        }}\n      >\n        <Card\n          ref={ref}\n          style={{\n            width: 300,\n            height: 300,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Card.Body>\n            Target: We set font to sans serif so we don't have to wait for roboto to load\n          </Card.Body>\n        </Card>\n        {placements.map(placement => (\n          <Popper\n            key={placement}\n            placement={placement}\n            popperOptions={{\n              modifiers: [\n                // keep the tooltips from moving - no matter what!\n                {name: 'flip', enabled: false},\n                {name: 'preventOverflow', enabled: false},\n                {name: 'fallbackModifier', enabled: false},\n              ],\n            }}\n            open={true}\n            anchorElement={ref}\n          >\n            <TooltipContainer style={{fontFamily: 'sans-serif'}} transformOrigin={null}>\n              {placement}\n            </TooltipContainer>\n          </Popper>\n        ))}\n      </div>\n    );\n  },\n};;\n\nexport const PlacementsFocus = {\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n  render: () => {\n    const ref = React.useRef<HTMLButtonElement>(null);\n\n    React.useEffect(() => {\n      document.body.setAttribute('data-whatinput', 'keyboard');\n    }, []);\n\n    const placements: Placement[] = [\n      'top-start',\n      'top',\n      'top-end',\n      'right-start',\n      'right',\n      'right-end',\n      'bottom-end',\n      'bottom',\n      'bottom-start',\n      'left-end',\n      'left',\n      'left-start',\n    ];\n    return (\n      <StaticStates>\n        <div\n          style={{\n            display: 'inline-block',\n            overflow: 'auto',\n            padding: 100,\n          }}\n        >\n          <SecondaryButton\n            style={{\n              width: 300,\n              height: 300,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              borderRadius: 4,\n            }}\n            className=\"focus\"\n            ref={ref}\n          >\n            <span style={{whiteSpace: 'normal', textOverflow: 'initial', overflow: 'visible'}}>\n              Target: We set font to sans serif so we don't have to wait for roboto to load\n            </span>\n          </SecondaryButton>\n          {placements.map(placement => (\n            <Popper\n              key={placement}\n              placement={placement}\n              popperOptions={{\n                modifiers: [\n                  // keep the tooltips from moving - no matter what!\n                  {name: 'flip', enabled: false},\n                  {name: 'preventOverflow', enabled: false},\n                  {name: 'fallbackModifier', enabled: false},\n                ],\n              }}\n              open={true}\n              anchorElement={ref}\n            >\n              <TooltipContainer style={{fontFamily: 'sans-serif'}} transformOrigin={null}>\n                {placement}\n              </TooltipContainer>\n            </Popper>\n          ))}\n        </div>\n      </StaticStates>\n    );\n  },\n};\n",locationsMap:{"non-interactive":{startLoc:{col:30,line:173},endLoc:{col:1,line:181},startBody:{col:30,line:173},endBody:{col:1,line:181}},overflow:{startLoc:{col:24,line:183},endLoc:{col:1,line:193},startBody:{col:24,line:183},endBody:{col:1,line:193}},placements:{startLoc:{col:26,line:195},endLoc:{col:1,line:263},startBody:{col:26,line:195},endBody:{col:1,line:263}},"placements-focus":{startLoc:{col:31,line:265},endLoc:{col:1,line:341},startBody:{col:31,line:265},endBody:{col:1,line:341}}}},storySource:{source:"import * as React from 'react';\nimport {Popper, Placement} from '@workday/canvas-kit-react/popup';\nimport {TooltipContainer, Tooltip, OverflowTooltip} from '@workday/canvas-kit-react/tooltip';\nimport {resetIcon} from '@workday/canvas-system-icons-web';\nimport {Card} from '@workday/canvas-kit-react/card';\nimport {SecondaryButton} from '@workday/canvas-kit-react/button';\nimport {StaticStates} from '@workday/canvas-kit-react/testing';\n\nexport default {\n  title: 'Testing/Popups/Tooltip',\n  component: Tooltip,\n};\n\nexport const NonInteractive = {\n  render: () => {\n    return (\n      <Tooltip title=\"Test\">\n        <span data-testid=\"non-interactive\">Non-interactive Tooltip</span>\n      </Tooltip>\n    );\n  },\n};\n\nexport const Overflow = {\n  render: () => {\n    return (\n      <OverflowTooltip>\n        <SecondaryButton data-testid=\"overflow-tooltip\" icon={resetIcon} style={{maxWidth: 200}}>\n          Super Mega Ultra Long Content With Max Width On The Button with Icon\n        </SecondaryButton>\n      </OverflowTooltip>\n    );\n  },\n};\n\nexport const Placements = {\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n  render: () => {\n    const ref = React.useRef<HTMLDivElement>(null);\n\n    const placements: Placement[] = [\n      'top-start',\n      'top',\n      'top-end',\n      'right-start',\n      'right',\n      'right-end',\n      'bottom-end',\n      'bottom',\n      'bottom-start',\n      'left-end',\n      'left',\n      'left-start',\n    ];\n    return (\n      <div\n        style={{\n          display: 'inline-block',\n          overflow: 'auto',\n          padding: 100,\n        }}\n      >\n        <Card\n          ref={ref}\n          style={{\n            width: 300,\n            height: 300,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Card.Body>\n            Target: We set font to sans serif so we don't have to wait for roboto to load\n          </Card.Body>\n        </Card>\n        {placements.map(placement => (\n          <Popper\n            key={placement}\n            placement={placement}\n            popperOptions={{\n              modifiers: [\n                // keep the tooltips from moving - no matter what!\n                {name: 'flip', enabled: false},\n                {name: 'preventOverflow', enabled: false},\n                {name: 'fallbackModifier', enabled: false},\n              ],\n            }}\n            open={true}\n            anchorElement={ref}\n          >\n            <TooltipContainer style={{fontFamily: 'sans-serif'}} transformOrigin={null}>\n              {placement}\n            </TooltipContainer>\n          </Popper>\n        ))}\n      </div>\n    );\n  },\n};\n\nexport const PlacementsFocus = {\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n  render: () => {\n    const ref = React.useRef<HTMLButtonElement>(null);\n\n    React.useEffect(() => {\n      document.body.setAttribute('data-whatinput', 'keyboard');\n    }, []);\n\n    const placements: Placement[] = [\n      'top-start',\n      'top',\n      'top-end',\n      'right-start',\n      'right',\n      'right-end',\n      'bottom-end',\n      'bottom',\n      'bottom-start',\n      'left-end',\n      'left',\n      'left-start',\n    ];\n    return (\n      <StaticStates>\n        <div\n          style={{\n            display: 'inline-block',\n            overflow: 'auto',\n            padding: 100,\n          }}\n        >\n          <SecondaryButton\n            style={{\n              width: 300,\n              height: 300,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              borderRadius: 4,\n            }}\n            className=\"focus\"\n            ref={ref}\n          >\n            <span style={{whiteSpace: 'normal', textOverflow: 'initial', overflow: 'visible'}}>\n              Target: We set font to sans serif so we don't have to wait for roboto to load\n            </span>\n          </SecondaryButton>\n          {placements.map(placement => (\n            <Popper\n              key={placement}\n              placement={placement}\n              popperOptions={{\n                modifiers: [\n                  // keep the tooltips from moving - no matter what!\n                  {name: 'flip', enabled: false},\n                  {name: 'preventOverflow', enabled: false},\n                  {name: 'fallbackModifier', enabled: false},\n                ],\n              }}\n              open={true}\n              anchorElement={ref}\n            >\n              <TooltipContainer style={{fontFamily: 'sans-serif'}} transformOrigin={null}>\n                {placement}\n              </TooltipContainer>\n            </Popper>\n          ))}\n        </div>\n      </StaticStates>\n    );\n  },\n};\n",locationsMap:{"non-interactive":{startLoc:{col:30,line:14},endLoc:{col:1,line:22},startBody:{col:30,line:14},endBody:{col:1,line:22}},overflow:{startLoc:{col:24,line:24},endLoc:{col:1,line:34},startBody:{col:24,line:24},endBody:{col:1,line:34}},placements:{startLoc:{col:26,line:36},endLoc:{col:1,line:104},startBody:{col:26,line:36},endBody:{col:1,line:104}},"placements-focus":{startLoc:{col:31,line:106},endLoc:{col:1,line:182},startBody:{col:31,line:106},endBody:{col:1,line:182}}}}},title:"Testing/Popups/Tooltip",component:_tooltip.Tooltip};exports.NonInteractive={render:()=>(0,_jsxRuntime.jsx)(_tooltip.Tooltip,{title:"Test",children:(0,_jsxRuntime.jsx)("span",{"data-testid":"non-interactive",children:"Non-interactive Tooltip"})})},exports.Overflow={render:()=>(0,_jsxRuntime.jsx)(_tooltip.OverflowTooltip,{children:(0,_jsxRuntime.jsx)(_button.SecondaryButton,{"data-testid":"overflow-tooltip",icon:_canvasSystemIconsWeb.resetIcon,style:{maxWidth:200},children:"Super Mega Ultra Long Content With Max Width On The Button with Icon"})})},exports.Placements={parameters:{chromatic:{disable:!1}},render:()=>{const ref=React.useRef(null);return(0,_jsxRuntime.jsxs)("div",{style:{display:"inline-block",overflow:"auto",padding:100},children:[(0,_jsxRuntime.jsx)(_card.Card,{ref,style:{width:300,height:300,display:"flex",alignItems:"center",justifyContent:"center"},children:(0,_jsxRuntime.jsx)(_card.Card.Body,{children:"Target: We set font to sans serif so we don't have to wait for roboto to load"})}),["top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"].map((placement=>(0,_jsxRuntime.jsx)(_popup.Popper,{placement,popperOptions:{modifiers:[{name:"flip",enabled:!1},{name:"preventOverflow",enabled:!1},{name:"fallbackModifier",enabled:!1}]},open:!0,anchorElement:ref,children:(0,_jsxRuntime.jsx)(_tooltip.TooltipContainer,{style:{fontFamily:"sans-serif"},transformOrigin:null,children:placement})},placement)))]})}},exports.PlacementsFocus={parameters:{chromatic:{disable:!1}},render:()=>{const ref=React.useRef(null);React.useEffect((()=>{document.body.setAttribute("data-whatinput","keyboard")}),[]);return(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsxs)("div",{style:{display:"inline-block",overflow:"auto",padding:100},children:[(0,_jsxRuntime.jsx)(_button.SecondaryButton,{style:{width:300,height:300,display:"flex",alignItems:"center",justifyContent:"center",borderRadius:4},className:"focus",ref,children:(0,_jsxRuntime.jsx)("span",{style:{whiteSpace:"normal",textOverflow:"initial",overflow:"visible"},children:"Target: We set font to sans serif so we don't have to wait for roboto to load"})}),["top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"].map((placement=>(0,_jsxRuntime.jsx)(_popup.Popper,{placement,popperOptions:{modifiers:[{name:"flip",enabled:!1},{name:"preventOverflow",enabled:!1},{name:"fallbackModifier",enabled:!1}]},open:!0,anchorElement:ref,children:(0,_jsxRuntime.jsx)(_tooltip.TooltipContainer,{style:{fontFamily:"sans-serif"},transformOrigin:null,children:placement})},placement)))]})})}};module.exports.__namedExportsOrder=["PlacementsFocus","Placements","Overflow","NonInteractive"]},"./node_modules/react-innertext/index.js":module=>{var reduceJsxToString=function(previous,current){return previous+innerText(current)},innerText=function(jsx){return null===jsx||"boolean"==typeof jsx||void 0===jsx?"":"number"==typeof jsx?jsx.toString():"string"==typeof jsx?jsx:Array.isArray(jsx)?jsx.reduce(reduceJsxToString,""):function(jsx){return Object.prototype.hasOwnProperty.call(jsx,"props")}(jsx)&&Object.prototype.hasOwnProperty.call(jsx.props,"children")?innerText(jsx.props.children):""};innerText.default=innerText,module.exports=innerText}}]);