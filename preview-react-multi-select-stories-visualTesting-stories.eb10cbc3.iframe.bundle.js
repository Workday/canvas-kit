"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[1019],{"./modules/preview-react/multi-select/stories/visualTesting.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.MultiSelectThemedStates=exports.MultiSelectStates=void 0;(function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n})(__webpack_require__("./node_modules/react/index.js"));var _testing=__webpack_require__("./modules/react/testing/index.ts"),_storybook=__webpack_require__("./utils/storybook/index.ts"),_multiSelect=__webpack_require__("./modules/preview-react/multi-select/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}exports.default={title:"Testing/Inputs/MultiSelect",component:_multiSelect.MultiSelect,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import * as React from 'react';\\n\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {customColorTheme} from '../../../../utils/storybook';\\n\\nimport {MultiSelect} from '@workday/canvas-kit-preview-react/multi-select';\\n\\nexport default {\\n  title: 'Testing/Inputs/MultiSelect',\\n  component: MultiSelect,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const MultiSelectStates = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps(\\n        {\\n          value: [\\n            {value: '', label: 'No Value'},\\n            {value: 'With Value', label: 'With Value'},\\n          ],\\n          searchInput: [\\n            {value: false, label: 'No Search'},\\n            {value: true, label: 'Search'},\\n          ],\\n          placeholder: [{value: 'Placeholder', label: 'Placeholder'}],\\n          error: [\\n            {value: undefined, label: ''},\\n            {value: 'alert', label: 'Alert'},\\n            {value: 'error', label: 'Error'},\\n          ],\\n        },\\n        props => {\\n          if (props.value === '' && !props.placeholder) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n      columnProps={permutateProps(\\n        {\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n          ],\\n          disabled: [\\n            {label: '', value: false},\\n            {label: 'Disabled', value: true},\\n          ],\\n        },\\n        props => {\\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n    >\\n      {({searchInput, ...props}) => {\\n        const InputComponent = searchInput ? MultiSelect.SearchInput : MultiSelect.Input;\\n        return (\\n          <MultiSelect items={['With Value']} initialSelectedIds={props.value ? [props.value] : []}>\\n            <InputComponent\\n              {...props}\\n              style={{minWidth: 60, width: 140}}\\n              onChange={() => {}} // eslint-disable-line no-empty-function\\n            />\\n          </MultiSelect>\\n        );\\n      }}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\\nexport const MultiSelectThemedStates = () => <MultiSelectStates />;\\nMultiSelectThemedStates.parameters = {\\n  canvasProviderDecorator: {\\n    theme: customColorTheme,\\n  },\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"MultiSelectStates\": {\n    \"startLoc\": {\n      \"col\": 33,\n      \"line\": 22\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 86\n    },\n    \"startBody\": {\n      \"col\": 33,\n      \"line\": 22\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 86\n    }\n  },\n  \"MultiSelectThemedStates\": {\n    \"startLoc\": {\n      \"col\": 39,\n      \"line\": 88\n    },\n    \"endLoc\": {\n      \"col\": 66,\n      \"line\": 88\n    },\n    \"startBody\": {\n      \"col\": 39,\n      \"line\": 88\n    },\n    \"endBody\": {\n      \"col\": 66,\n      \"line\": 88\n    }\n  }\n};\n    \nimport * as React from 'react';\n\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {customColorTheme} from '../../../../utils/storybook';\n\nimport {MultiSelect} from '@workday/canvas-kit-preview-react/multi-select';\n\nexport default {\n  title: 'Testing/Inputs/MultiSelect',\n  component: MultiSelect,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import * as React from 'react';\\n\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {customColorTheme} from '../../../../utils/storybook';\\n\\nimport {MultiSelect} from '@workday/canvas-kit-preview-react/multi-select';\\n\\nexport default {\\n  title: 'Testing/Inputs/MultiSelect',\\n  component: MultiSelect,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const MultiSelectStates = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps(\\n        {\\n          value: [\\n            {value: '', label: 'No Value'},\\n            {value: 'With Value', label: 'With Value'},\\n          ],\\n          searchInput: [\\n            {value: false, label: 'No Search'},\\n            {value: true, label: 'Search'},\\n          ],\\n          placeholder: [{value: 'Placeholder', label: 'Placeholder'}],\\n          error: [\\n            {value: undefined, label: ''},\\n            {value: 'alert', label: 'Alert'},\\n            {value: 'error', label: 'Error'},\\n          ],\\n        },\\n        props => {\\n          if (props.value === '' && !props.placeholder) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n      columnProps={permutateProps(\\n        {\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n          ],\\n          disabled: [\\n            {label: '', value: false},\\n            {label: 'Disabled', value: true},\\n          ],\\n        },\\n        props => {\\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n    >\\n      {({searchInput, ...props}) => {\\n        const InputComponent = searchInput ? MultiSelect.SearchInput : MultiSelect.Input;\\n        return (\\n          <MultiSelect items={['With Value']} initialSelectedIds={props.value ? [props.value] : []}>\\n            <InputComponent\\n              {...props}\\n              style={{minWidth: 60, width: 140}}\\n              onChange={() => {}} \\n            />\\n          </MultiSelect>\\n        );\\n      }}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\\nexport const MultiSelectThemedStates = () => <MultiSelectStates />;\\nMultiSelectThemedStates.parameters = {\\n  canvasProviderDecorator: {\\n    theme: customColorTheme,\\n  },\\n};\\n\",\n    \"locationsMap\": {\n      \"multi-select-states\": {\n        \"startLoc\": {\n          \"col\": 33,\n          \"line\": 22\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 86\n        },\n        \"startBody\": {\n          \"col\": 33,\n          \"line\": 22\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 86\n        }\n      },\n      \"multi-select-themed-states\": {\n        \"startLoc\": {\n          \"col\": 39,\n          \"line\": 88\n        },\n        \"endLoc\": {\n          \"col\": 66,\n          \"line\": 88\n        },\n        \"startBody\": {\n          \"col\": 39,\n          \"line\": 88\n        },\n        \"endBody\": {\n          \"col\": 66,\n          \"line\": 88\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const MultiSelectStates = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps(\n        {\n          value: [\n            {value: '', label: 'No Value'},\n            {value: 'With Value', label: 'With Value'},\n          ],\n          searchInput: [\n            {value: false, label: 'No Search'},\n            {value: true, label: 'Search'},\n          ],\n          placeholder: [{value: 'Placeholder', label: 'Placeholder'}],\n          error: [\n            {value: undefined, label: ''},\n            {value: 'alert', label: 'Alert'},\n            {value: 'error', label: 'Error'},\n          ],\n        },\n        props => {\n          if (props.value === '' && !props.placeholder) {\n            return false;\n          }\n          return true;\n        }\n      )}\n      columnProps={permutateProps(\n        {\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n          ],\n          disabled: [\n            {label: '', value: false},\n            {label: 'Disabled', value: true},\n          ],\n        },\n        props => {\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\n            return false;\n          }\n          return true;\n        }\n      )}\n    >\n      {({searchInput, ...props}) => {\n        const InputComponent = searchInput ? MultiSelect.SearchInput : MultiSelect.Input;\n        return (\n          <MultiSelect items={['With Value']} initialSelectedIds={props.value ? [props.value] : []}>\n            <InputComponent\n              {...props}\n              style={{minWidth: 60, width: 140}}\n              onChange={() => {}} \n            />\n          </MultiSelect>\n        );\n      }}\n    </ComponentStatesTable>\n  </StaticStates>\n);;\n\nexport const MultiSelectThemedStates = () => <MultiSelectStates />;\nMultiSelectThemedStates.parameters = {\n  canvasProviderDecorator: {\n    theme: customColorTheme,\n  },\n};\n",locationsMap:{"multi-select-states":{startLoc:{col:33,line:109},endLoc:{col:1,line:173},startBody:{col:33,line:109},endBody:{col:1,line:173}},"multi-select-themed-states":{startLoc:{col:39,line:175},endLoc:{col:66,line:175},startBody:{col:39,line:175},endBody:{col:66,line:175}}}},storySource:{source:"import * as React from 'react';\n\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {customColorTheme} from '../../../../utils/storybook';\n\nimport {MultiSelect} from '@workday/canvas-kit-preview-react/multi-select';\n\nexport default {\n  title: 'Testing/Inputs/MultiSelect',\n  component: MultiSelect,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const MultiSelectStates = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps(\n        {\n          value: [\n            {value: '', label: 'No Value'},\n            {value: 'With Value', label: 'With Value'},\n          ],\n          searchInput: [\n            {value: false, label: 'No Search'},\n            {value: true, label: 'Search'},\n          ],\n          placeholder: [{value: 'Placeholder', label: 'Placeholder'}],\n          error: [\n            {value: undefined, label: ''},\n            {value: 'alert', label: 'Alert'},\n            {value: 'error', label: 'Error'},\n          ],\n        },\n        props => {\n          if (props.value === '' && !props.placeholder) {\n            return false;\n          }\n          return true;\n        }\n      )}\n      columnProps={permutateProps(\n        {\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n          ],\n          disabled: [\n            {label: '', value: false},\n            {label: 'Disabled', value: true},\n          ],\n        },\n        props => {\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\n            return false;\n          }\n          return true;\n        }\n      )}\n    >\n      {({searchInput, ...props}) => {\n        const InputComponent = searchInput ? MultiSelect.SearchInput : MultiSelect.Input;\n        return (\n          <MultiSelect items={['With Value']} initialSelectedIds={props.value ? [props.value] : []}>\n            <InputComponent\n              {...props}\n              style={{minWidth: 60, width: 140}}\n              onChange={() => {}} \n            />\n          </MultiSelect>\n        );\n      }}\n    </ComponentStatesTable>\n  </StaticStates>\n);\n\nexport const MultiSelectThemedStates = () => <MultiSelectStates />;\nMultiSelectThemedStates.parameters = {\n  canvasProviderDecorator: {\n    theme: customColorTheme,\n  },\n};\n",locationsMap:{"multi-select-states":{startLoc:{col:33,line:22},endLoc:{col:1,line:86},startBody:{col:33,line:22},endBody:{col:1,line:86}},"multi-select-themed-states":{startLoc:{col:39,line:88},endLoc:{col:66,line:88},startBody:{col:39,line:88},endBody:{col:66,line:88}}}},chromatic:{disable:!1}}};const MultiSelectStates=()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({value:[{value:"",label:"No Value"},{value:"With Value",label:"With Value"}],searchInput:[{value:!1,label:"No Search"},{value:!0,label:"Search"}],placeholder:[{value:"Placeholder",label:"Placeholder"}],error:[{value:void 0,label:""},{value:"alert",label:"Alert"},{value:"error",label:"Error"}]},(props=>!(""===props.value&&!props.placeholder))),columnProps:(0,_testing.permutateProps)({className:[{label:"Default",value:""},{label:"Hover",value:"hover"},{label:"Focus",value:"focus"},{label:"Focus Hover",value:"focus hover"},{label:"Active",value:"active"},{label:"Active Hover",value:"active hover"}],disabled:[{label:"",value:!1},{label:"Disabled",value:!0}]},(props=>!(props.disabled&&!["","hover"].includes(props.className)))),children:({searchInput,...props})=>{const InputComponent=searchInput?_multiSelect.MultiSelect.SearchInput:_multiSelect.MultiSelect.Input;return(0,_jsxRuntime.jsx)(_multiSelect.MultiSelect,{items:["With Value"],initialSelectedIds:props.value?[props.value]:[],children:(0,_jsxRuntime.jsx)(InputComponent,{...props,style:{minWidth:60,width:140},onChange:()=>{}})})}})});exports.MultiSelectStates=MultiSelectStates,MultiSelectStates.displayName="MultiSelectStates";const MultiSelectThemedStates=()=>(0,_jsxRuntime.jsx)(MultiSelectStates,{});exports.MultiSelectThemedStates=MultiSelectThemedStates,MultiSelectThemedStates.displayName="MultiSelectThemedStates",MultiSelectThemedStates.parameters={canvasProviderDecorator:{theme:_storybook.customColorTheme}},module.exports.__namedExportsOrder=["MultiSelectThemedStates","MultiSelectStates"]}}]);