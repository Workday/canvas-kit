"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[6269],{"./modules/react/text-area/stories/visualTesting.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.TextAreaThemedStates=exports.TextAreaStates=exports.default=void 0;var React=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_testing=__webpack_require__("./modules/react/testing/index.ts"),_storybook=__webpack_require__("./utils/storybook/index.ts"),_textArea=__webpack_require__("./modules/react/text-area/index.ts");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var _default={title:"Testing/Inputs/Text Area",component:_textArea.TextArea,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import * as React from 'react';\\n\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {customColorTheme} from '../../../../utils/storybook';\\n\\nimport {TextArea} from '@workday/canvas-kit-react/text-area';\\n\\nexport default {\\n  title: 'Testing/Inputs/Text Area',\\n  component: TextArea,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const TextAreaStates = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps(\\n        {\\n          value: [\\n            {value: 'Input value', label: 'With Value'},\\n            {value: '', label: 'No Value'},\\n          ],\\n          placeholder: [{value: 'Placeholder', label: 'Placeholder'}],\\n          error: [\\n            {value: undefined, label: ''},\\n            {value: TextArea.ErrorType.Alert, label: 'Alert'},\\n            {value: TextArea.ErrorType.Error, label: 'Error'},\\n          ],\\n        },\\n        props => {\\n          if (props.value === '' && !props.placeholder) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n      columnProps={permutateProps(\\n        {\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n          ],\\n          disabled: [\\n            {label: '', value: false},\\n            {label: 'Disabled', value: true},\\n          ],\\n        },\\n        props => {\\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n    >\\n      {props => (\\n        <TextArea\\n          {...props}\\n          style={{minWidth: 60, width: 100}}\\n          onChange={() => {}} // eslint-disable-line no-empty-function\\n        />\\n      )}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\\nexport const TextAreaThemedStates = () => <TextAreaStates />;\\nTextAreaThemedStates.parameters = {\\n  canvasProviderDecorator: {\\n    theme: customColorTheme,\\n  },\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"TextAreaStates\": {\n    \"startLoc\": {\n      \"col\": 30,\n      \"line\": 22\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 77\n    },\n    \"startBody\": {\n      \"col\": 30,\n      \"line\": 22\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 77\n    }\n  },\n  \"TextAreaThemedStates\": {\n    \"startLoc\": {\n      \"col\": 36,\n      \"line\": 79\n    },\n    \"endLoc\": {\n      \"col\": 60,\n      \"line\": 79\n    },\n    \"startBody\": {\n      \"col\": 36,\n      \"line\": 79\n    },\n    \"endBody\": {\n      \"col\": 60,\n      \"line\": 79\n    }\n  }\n};\n    \nimport * as React from 'react';\n\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {customColorTheme} from '../../../../utils/storybook';\n\nimport {TextArea} from '@workday/canvas-kit-react/text-area';\n\nexport default {\n  title: 'Testing/Inputs/Text Area',\n  component: TextArea,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import * as React from 'react';\\n\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {customColorTheme} from '../../../../utils/storybook';\\n\\nimport {TextArea} from '@workday/canvas-kit-react/text-area';\\n\\nexport default {\\n  title: 'Testing/Inputs/Text Area',\\n  component: TextArea,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const TextAreaStates = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps(\\n        {\\n          value: [\\n            {value: 'Input value', label: 'With Value'},\\n            {value: '', label: 'No Value'},\\n          ],\\n          placeholder: [{value: 'Placeholder', label: 'Placeholder'}],\\n          error: [\\n            {value: undefined, label: ''},\\n            {value: TextArea.ErrorType.Alert, label: 'Alert'},\\n            {value: TextArea.ErrorType.Error, label: 'Error'},\\n          ],\\n        },\\n        props => {\\n          if (props.value === '' && !props.placeholder) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n      columnProps={permutateProps(\\n        {\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n          ],\\n          disabled: [\\n            {label: '', value: false},\\n            {label: 'Disabled', value: true},\\n          ],\\n        },\\n        props => {\\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n    >\\n      {props => (\\n        <TextArea\\n          {...props}\\n          style={{minWidth: 60, width: 100}}\\n          onChange={() => {}} \\n        />\\n      )}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\\nexport const TextAreaThemedStates = () => <TextAreaStates />;\\nTextAreaThemedStates.parameters = {\\n  canvasProviderDecorator: {\\n    theme: customColorTheme,\\n  },\\n};\\n\",\n    \"locationsMap\": {\n      \"text-area-states\": {\n        \"startLoc\": {\n          \"col\": 30,\n          \"line\": 22\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 77\n        },\n        \"startBody\": {\n          \"col\": 30,\n          \"line\": 22\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 77\n        }\n      },\n      \"text-area-themed-states\": {\n        \"startLoc\": {\n          \"col\": 36,\n          \"line\": 79\n        },\n        \"endLoc\": {\n          \"col\": 60,\n          \"line\": 79\n        },\n        \"startBody\": {\n          \"col\": 36,\n          \"line\": 79\n        },\n        \"endBody\": {\n          \"col\": 60,\n          \"line\": 79\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const TextAreaStates = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps(\n        {\n          value: [\n            {value: 'Input value', label: 'With Value'},\n            {value: '', label: 'No Value'},\n          ],\n          placeholder: [{value: 'Placeholder', label: 'Placeholder'}],\n          error: [\n            {value: undefined, label: ''},\n            {value: TextArea.ErrorType.Alert, label: 'Alert'},\n            {value: TextArea.ErrorType.Error, label: 'Error'},\n          ],\n        },\n        props => {\n          if (props.value === '' && !props.placeholder) {\n            return false;\n          }\n          return true;\n        }\n      )}\n      columnProps={permutateProps(\n        {\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n          ],\n          disabled: [\n            {label: '', value: false},\n            {label: 'Disabled', value: true},\n          ],\n        },\n        props => {\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\n            return false;\n          }\n          return true;\n        }\n      )}\n    >\n      {props => (\n        <TextArea\n          {...props}\n          style={{minWidth: 60, width: 100}}\n          onChange={() => {}} \n        />\n      )}\n    </ComponentStatesTable>\n  </StaticStates>\n);;\n\nexport const TextAreaThemedStates = () => <TextAreaStates />;\nTextAreaThemedStates.parameters = {\n  canvasProviderDecorator: {\n    theme: customColorTheme,\n  },\n};\n",locationsMap:{"text-area-states":{startLoc:{col:30,line:109},endLoc:{col:1,line:164},startBody:{col:30,line:109},endBody:{col:1,line:164}},"text-area-themed-states":{startLoc:{col:36,line:166},endLoc:{col:60,line:166},startBody:{col:36,line:166},endBody:{col:60,line:166}}}},storySource:{source:"import * as React from 'react';\n\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {customColorTheme} from '../../../../utils/storybook';\n\nimport {TextArea} from '@workday/canvas-kit-react/text-area';\n\nexport default {\n  title: 'Testing/Inputs/Text Area',\n  component: TextArea,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const TextAreaStates = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps(\n        {\n          value: [\n            {value: 'Input value', label: 'With Value'},\n            {value: '', label: 'No Value'},\n          ],\n          placeholder: [{value: 'Placeholder', label: 'Placeholder'}],\n          error: [\n            {value: undefined, label: ''},\n            {value: TextArea.ErrorType.Alert, label: 'Alert'},\n            {value: TextArea.ErrorType.Error, label: 'Error'},\n          ],\n        },\n        props => {\n          if (props.value === '' && !props.placeholder) {\n            return false;\n          }\n          return true;\n        }\n      )}\n      columnProps={permutateProps(\n        {\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n          ],\n          disabled: [\n            {label: '', value: false},\n            {label: 'Disabled', value: true},\n          ],\n        },\n        props => {\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\n            return false;\n          }\n          return true;\n        }\n      )}\n    >\n      {props => (\n        <TextArea\n          {...props}\n          style={{minWidth: 60, width: 100}}\n          onChange={() => {}} \n        />\n      )}\n    </ComponentStatesTable>\n  </StaticStates>\n);\n\nexport const TextAreaThemedStates = () => <TextAreaStates />;\nTextAreaThemedStates.parameters = {\n  canvasProviderDecorator: {\n    theme: customColorTheme,\n  },\n};\n",locationsMap:{"text-area-states":{startLoc:{col:30,line:22},endLoc:{col:1,line:77},startBody:{col:30,line:22},endBody:{col:1,line:77}},"text-area-themed-states":{startLoc:{col:36,line:79},endLoc:{col:60,line:79},startBody:{col:36,line:79},endBody:{col:60,line:79}}}},chromatic:{disable:!1}}};exports.default=_default;const TextAreaStates=()=>React.createElement(_testing.StaticStates,null,React.createElement(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({value:[{value:"Input value",label:"With Value"},{value:"",label:"No Value"}],placeholder:[{value:"Placeholder",label:"Placeholder"}],error:[{value:void 0,label:""},{value:_textArea.TextArea.ErrorType.Alert,label:"Alert"},{value:_textArea.TextArea.ErrorType.Error,label:"Error"}]},(props=>!(""===props.value&&!props.placeholder))),columnProps:(0,_testing.permutateProps)({className:[{label:"Default",value:""},{label:"Hover",value:"hover"},{label:"Focus",value:"focus"},{label:"Focus Hover",value:"focus hover"},{label:"Active",value:"active"},{label:"Active Hover",value:"active hover"}],disabled:[{label:"",value:!1},{label:"Disabled",value:!0}]},(props=>!(props.disabled&&!["","hover"].includes(props.className))))},(props=>React.createElement(_textArea.TextArea,_extends({},props,{style:{minWidth:60,width:100},onChange:()=>{}})))));exports.TextAreaStates=TextAreaStates,TextAreaStates.displayName="TextAreaStates";const TextAreaThemedStates=()=>React.createElement(TextAreaStates,null);exports.TextAreaThemedStates=TextAreaThemedStates,TextAreaThemedStates.displayName="TextAreaThemedStates",TextAreaThemedStates.parameters={canvasProviderDecorator:{theme:_storybook.customColorTheme}},module.exports.__namedExportsOrder=["TextAreaThemedStates","TextAreaStates"]},"./modules/react/text-area/index.ts":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0});var _TextArea=__webpack_require__("./modules/react/text-area/lib/TextArea.tsx");Object.keys(_TextArea).forEach((function(key){"default"!==key&&"__esModule"!==key&&(key in exports&&exports[key]===_TextArea[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _TextArea[key]}}))}));const __docs=[];var _window$__updateDocs,_window;window.__updateDocs?null===(_window$__updateDocs=(_window=window).__updateDocs)||void 0===_window$__updateDocs||_window$__updateDocs.call(_window,__docs):window.__docs=(window.__docs||[]).concat(__docs)},"./modules/react/text-area/lib/TextArea.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.TextArea=exports.textAreaStencil=exports.TextAreaResizeDirection=void 0;var React=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_common=__webpack_require__("./modules/react/common/index.ts"),_canvasKitStyling=__webpack_require__("./modules/styling/index.ts"),_textInput=__webpack_require__("./modules/react/text-input/index.ts");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const TextAreaResizeDirection={None:"none",Both:"both",Horizontal:"horizontal",Vertical:"vertical"};exports.TextAreaResizeDirection=TextAreaResizeDirection;const textAreaStencil=(0,_canvasKitStyling.createStencil)({extends:_textInput.textInputStencil,base:{name:"kn023t",styles:"box-sizing:border-box;min-height:var(--cnvs-sys-space-x16);min-width:calc(calc(var(--cnvs-sys-space-x20) * 3) + var(--cnvs-sys-space-x10));&::webkit-resizer{display:none;}"},modifiers:{resize:{both:{name:"kn023u",styles:"resize:both;"},horizontal:{name:"kn023v",styles:"resize:horizontal;"},vertical:{name:"kn023w",styles:"resize:vertical;"},none:{name:"kn023x",styles:"resize:none;"}}},defaultModifiers:{resize:"both"}},"text-area-3e725a");exports.textAreaStencil=textAreaStencil;const TextArea=(0,_common.createComponent)("textarea")({displayName:"TextArea",Component:({resize=TextAreaResizeDirection.Both,grow,error,...elemProps},ref,Element)=>React.createElement(Element,_extends({ref},(0,_canvasKitStyling.handleCsProp)(elemProps,textAreaStencil({error,grow,resize})))),subComponents:{ErrorType:_common.ErrorType,ResizeDirection:TextAreaResizeDirection}});exports.TextArea=TextArea;const __docs=[{name:"ValueOf",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx",description:"",declarations:[{name:"ValueOf",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{},type:{kind:"type",typeParameters:[{kind:"typeParameter",name:"T",required:!0}],value:{kind:"symbol",name:"ValueOf",value:"ValueOf<T>"}}},{name:"TextAreaProps",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx",description:"",declarations:[{name:"TextAreaProps",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{},type:{kind:"object",properties:[{kind:"property",name:"error",required:!1,type:{kind:"symbol",name:"ErrorType",value:"ErrorType"},description:"The type of error associated with the TextArea (if applicable).",declarations:[{name:"error",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{}},{kind:"property",name:"resize",required:!1,type:{kind:"symbol",name:"TextAreaResizeDirection"},description:"The resize constraints of the TextArea.",declarations:[{name:"resize",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{default:"TextArea.ResizeDirection.Both"}},{kind:"property",name:"grow",required:!1,type:{kind:"primitive",value:"boolean"},description:"True if the component should grow to its container's width. False otherwise.",declarations:[{name:"grow",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/common/lib/types.ts"}],tags:{}}]}},{name:"TextAreaResizeDirection",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx",description:"",declarations:[{name:"TextAreaResizeDirection",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{},type:{kind:"object",properties:[{kind:"property",name:"None",defaultValue:{kind:"string",value:"none"},type:{kind:"string",value:"none"},required:!0,description:"",declarations:[{name:"None",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{}},{kind:"property",name:"Both",defaultValue:{kind:"string",value:"both"},type:{kind:"string",value:"both"},required:!0,description:"",declarations:[{name:"Both",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{}},{kind:"property",name:"Horizontal",defaultValue:{kind:"string",value:"horizontal"},type:{kind:"string",value:"horizontal"},required:!0,description:"",declarations:[{name:"Horizontal",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{}},{kind:"property",name:"Vertical",defaultValue:{kind:"string",value:"vertical"},type:{kind:"string",value:"vertical"},required:!0,description:"",declarations:[{name:"Vertical",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{}}]}},{name:"textAreaStencil",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx",description:"",declarations:[{name:"textAreaStencil",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{},type:{kind:"function",parameters:[{kind:"parameter",name:"options",type:{kind:"conditional",check:{kind:"tuple",value:[{kind:"generic",name:"E"}]},extends:{kind:"tuple",value:[{kind:"primitive",value:"never"}]},trueType:{kind:"intersection",value:[{kind:"symbol",name:"ModifierValuesStencil",value:"ModifierValuesStencil<M, V>"},{kind:"generic",name:"VariableValuesStencil"}]},falseType:{kind:"conditional",check:{kind:"generic",name:"E"},extends:{kind:"symbol",name:"BaseStencil",typeParameters:[{kind:"infer",value:{kind:"typeParameter",name:"ME",required:!0}},{kind:"infer",value:{kind:"typeParameter",name:"VE",required:!0}},{kind:"primitive",value:"any"},{kind:"primitive",value:"any"}],value:"BaseStencil<M, V, E, ID>"},trueType:{kind:"intersection",value:[{kind:"symbol",name:"ModifierValuesStencil",typeParameters:[{kind:"intersection",value:[{kind:"generic",name:"ME"},{kind:"generic",name:"M"}]}],value:"ModifierValuesStencil<M, V>"},{kind:"symbol",name:"VariableValuesStencil",typeParameters:[{kind:"intersection",value:[{kind:"generic",name:"VE"},{kind:"generic",name:"V"}]}],value:"VariableValuesStencil<V>"}]},falseType:{kind:"primitive",value:"never"}}},required:!1,rest:!1,description:"",declarations:[{name:"options",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}}],members:[{kind:"property",name:"vars",required:!0,type:{kind:"generic",name:"StencilDefaultVars"},description:"",declarations:[{name:"vars",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"base",required:!0,type:{kind:"primitive",value:"string"},description:"",declarations:[{name:"base",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"modifiers",required:!0,type:{kind:"conditional",check:{kind:"tuple",value:[{kind:"generic",name:"E"}]},extends:{kind:"tuple",value:[{kind:"symbol",name:"BaseStencil",typeParameters:[{kind:"infer",value:{kind:"typeParameter",name:"ME",required:!0}},{kind:"infer",value:{kind:"typeParameter",name:"VE",required:!0}},{kind:"primitive",value:"any"},{kind:"primitive",value:"any"}],value:"BaseStencil<M, V, E, ID>"}]},trueType:{kind:"symbol",name:"StencilModifierReturn",value:"StencilModifierReturn<ME & M, VE & V>"},falseType:{kind:"symbol",name:"StencilModifierReturn",typeParameters:[{kind:"generic",name:"M"},{kind:"generic",name:"V"}],value:"StencilModifierReturn<M, V>"}},description:"",declarations:[{name:"modifiers",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"defaultModifiers",required:!0,type:{kind:"conditional",check:{kind:"tuple",value:[{kind:"generic",name:"E"}]},extends:{kind:"tuple",value:[{kind:"symbol",name:"BaseStencil",typeParameters:[{kind:"infer",value:{kind:"typeParameter",name:"ME",required:!0}},{kind:"primitive",value:"any"},{kind:"primitive",value:"any"},{kind:"primitive",value:"any"}],value:"BaseStencil<M, V, E, ID>"}]},trueType:{kind:"symbol",name:"StencilDefaultModifierReturn",value:"StencilDefaultModifierReturn<ME & M>"},falseType:{kind:"symbol",name:"StencilDefaultModifierReturn",typeParameters:[{kind:"generic",name:"M"}],value:"StencilDefaultModifierReturn<M>"}},description:"",declarations:[{name:"defaultModifiers",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"__extends",required:!1,type:{kind:"generic",name:"E"},description:"",declarations:[{name:"__extends",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"__vars",required:!0,type:{kind:"generic",name:"V"},description:"",declarations:[{name:"__vars",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"__modifiers",required:!0,type:{kind:"generic",name:"M"},description:"",declarations:[{name:"__modifiers",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"__id",required:!0,type:{kind:"generic",name:"ID"},description:"",declarations:[{name:"__id",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}}],returnType:{kind:"object",properties:[{kind:"property",name:"className",required:!0,type:{kind:"primitive",value:"string"},description:"",declarations:[{name:"className",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"style",required:!1,type:{kind:"external",name:"Record",url:"https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type",typeParameters:[{kind:"primitive",value:"string"},{kind:"primitive",value:"string"}]},description:"",declarations:[{name:"style",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}}]}}},{name:"TextArea",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx",description:"",declarations:[{name:"TextArea",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{},type:{kind:"enhancedComponent",componentType:"regular",displayName:"TextArea",props:[{kind:"property",name:"error",required:!1,type:{kind:"symbol",name:"ErrorType",value:"ErrorType"},description:"The type of error associated with the TextArea (if applicable).",declarations:[{name:"error",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{}},{kind:"property",name:"resize",required:!1,type:{kind:"symbol",name:"TextAreaResizeDirection"},description:"The resize constraints of the TextArea.",declarations:[{name:"resize",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{default:"TextArea.ResizeDirection.Both"},defaultValue:{kind:"symbol",name:"TextArea.ResizeDirection.Both",value:"TextArea.ResizeDirection.Both"}},{kind:"property",name:"grow",required:!1,type:{kind:"primitive",value:"boolean"},description:"True if the component should grow to its container's width. False otherwise.",declarations:[{name:"grow",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/common/lib/types.ts"}],tags:{}},{kind:"property",name:"children",description:"",tags:{},declarations:[],type:{kind:"external",name:"React.ReactNode",url:"https://reactjs.org/docs/rendering-elements.html"}},{kind:"property",name:"as",description:"Optional override of the default element used by the component. Any valid tag or Component. If you provided a Component, this component should forward the ref using `React.forwardRef`and spread extra props to a root element.\n\n**Note:** Not all elements make sense and some elements may cause accessibility issues. Change this value with care.",tags:{},declarations:[],type:{kind:"external",name:"React.ElementType",url:"https://developer.mozilla.org/en-US/docs/Web/API/element"},defaultValue:{kind:"external",name:"textarea",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea"}},{kind:"property",name:"ref",description:"Optional ref. If the component represents an element, this ref will be a reference to the real DOM element of the component. If `as` is set to an element, it will be that element. If `as` is a component, the reference will be to that component (or element if the component uses `React.forwardRef`).",tags:{},declarations:[],type:{kind:"external",name:"React.Ref",url:"https://reactjs.org/docs/refs-and-the-dom.html",typeParameters:[{kind:"typeParameter",name:"R",required:!0,defaultValue:{kind:"external",name:"textarea",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea"}}]}}],baseElement:{kind:"external",name:"textarea",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea"},subComponents:[{name:"ErrorType",symbol:"ErrorType",description:"",declarations:[{name:"ErrorType",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{}},{name:"ResizeDirection",symbol:"TextAreaResizeDirection",description:"",declarations:[{name:"ResizeDirection",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/text-area/lib/TextArea.tsx"}],tags:{}}]}}];var _window$__updateDocs,_window;window.__updateDocs?null===(_window$__updateDocs=(_window=window).__updateDocs)||void 0===_window$__updateDocs||_window$__updateDocs.call(_window,__docs):window.__docs=(window.__docs||[]).concat(__docs)}}]);