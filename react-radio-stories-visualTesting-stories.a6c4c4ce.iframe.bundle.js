"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[7885],{"./modules/react/radio/stories/visualTesting.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.RadioThemedStates=exports.RadioStates=exports.RadioInverseThemedStates=exports.InverseRadioStates=void 0;var React=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_testing=__webpack_require__("./modules/react/testing/index.ts"),_storybook=__webpack_require__("./utils/storybook/index.ts"),_radio=__webpack_require__("./modules/react/radio/index.ts"),_formField=__webpack_require__("./modules/react/form-field/index.ts");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}exports.default={title:"Testing/Inputs/Radio",component:_radio.RadioGroup,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import * as React from 'react';\\n\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {customColorTheme} from '../../../../utils/storybook';\\n\\nimport {Radio, RadioGroup} from '@workday/canvas-kit-react/radio';\\nimport {FormField} from '@workday/canvas-kit-react/form-field';\\n\\nexport default {\\n  title: 'Testing/Inputs/Radio',\\n  component: RadioGroup,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nconst testGroup = (\\n  <FormField.Input as={RadioGroup} name=\\\"contact\\\" value={'email'}>\\n    <Radio id=\\\"1\\\" value=\\\"email\\\" label=\\\"E-mail\\\" />\\n    <Radio id=\\\"2\\\" value=\\\"phone\\\" label=\\\"Phone\\\" />\\n    <Radio id=\\\"3\\\" value=\\\"fax\\\" label=\\\"Fax (disabled)\\\" disabled={true} />\\n    <Radio\\n      id=\\\"4\\\"\\n      value=\\\"mail\\\"\\n      label=\\\"Mail (US Postal Service aka USPS), a longer than normal label\\\"\\n    />\\n  </FormField.Input>\\n);\\n\\nexport const RadioStates = () => (\\n  <div>\\n    <h3>Radio</h3>\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          checked: [\\n            {value: true, label: 'Checked'},\\n            {value: false, label: 'Unchecked'},\\n          ],\\n        })}\\n        columnProps={permutateProps(\\n          {\\n            className: [\\n              {label: 'Default', value: ''},\\n              {label: 'Hover', value: 'hover'},\\n              {label: 'Focus', value: 'focus'},\\n              {label: 'Focus Hover', value: 'focus hover'},\\n              {label: 'Active', value: 'active'},\\n              {label: 'Active Hover', value: 'active hover'},\\n            ],\\n            disabled: [\\n              {label: '', value: false},\\n              {label: 'Disabled', value: true},\\n            ],\\n          },\\n          props => {\\n            if (props.disabled && !['', 'hover'].includes(props.className)) {\\n              return false;\\n            }\\n            return true;\\n          }\\n        )}\\n      >\\n        {props => (\\n          <Radio\\n            {...props}\\n            onChange={() => {}} // eslint-disable-line no-empty-function\\n            label=\\\"Radio\\\"\\n          />\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n\\n    <h3>Radio Group</h3>\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          error: [\\n            {value: undefined, label: 'No Error'},\\n            {value: 'alert', label: 'Alert'},\\n            {value: 'error', label: 'Error'},\\n          ],\\n        })}\\n        columnProps={[\\n          {\\n            label: 'Left Label',\\n            props: {label: 'Contact', orientation: 'horizontal'},\\n          },\\n          {\\n            label: 'Top Label',\\n            props: {label: 'Contact'},\\n          },\\n        ]}\\n      >\\n        {props => (\\n          <FormField as=\\\"fieldset\\\" {...props}>\\n            <FormField.Label>{props.label}</FormField.Label>\\n            {props.orientation === 'horizontal' ? (\\n              <FormField.Container>\\n                {testGroup}\\n                {props.error && <FormField.Hint>hintText</FormField.Hint>}\\n              </FormField.Container>\\n            ) : (\\n              <>\\n                {testGroup}\\n                {props.error && <FormField.Hint>hintText</FormField.Hint>}\\n              </>\\n            )}\\n          </FormField>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n    <h3>Radio Group (grow)</h3>\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          error: [\\n            {value: undefined, label: 'No Error'},\\n            {value: 'alert', label: 'Alert'},\\n            {value: 'error', label: 'Error'},\\n          ],\\n        })}\\n        columnProps={[\\n          {\\n            label: 'Grow',\\n            props: {label: 'Contact', grow: true},\\n          },\\n        ]}\\n      >\\n        {props => (\\n          <FormField as=\\\"fieldset\\\" {...props} cs={{width: props.grow ? '100%' : undefined}}>\\n            <FormField.Label>{props.label}</FormField.Label>\\n            {testGroup}\\n            {props.orientation === 'horizontal' && (\\n              <FormField.Container>\\n                {testGroup} {props.error && <FormField.Hint>hintText</FormField.Hint>}\\n              </FormField.Container>\\n            )}\\n            {props.error && <FormField.Hint>hintText</FormField.Hint>}\\n          </FormField>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n\\n    <h3>RadioGroup (wrapping)</h3>\\n    <div style={{maxWidth: 480}}>\\n      <FormField orientation=\\\"horizontal\\\" as=\\\"fieldset\\\">\\n        <FormField.Label as=\\\"legend\\\">\\n          Really long label. Really long label. Really long label. Really long label. Really long\\n          label. Really long label.\\n        </FormField.Label>\\n        {testGroup}\\n      </FormField>\\n      <FormField as=\\\"fieldset\\\">\\n        <FormField.Label as=\\\"legend\\\">\\n          Really long label. Really long label. Really long label. Really long label. Really long\\n          label. Really long label. Really long label. Really long label. Really long label. Really\\n          long label. Really long label. Really long label. Really long label. Really long label.\\n          Really long label. Really long label. Really long label. Really long label. Really long\\n          label. Really long label. Really long label. Really long label. Really long label. Really\\n          long label. Really long label. Really long label.\\n        </FormField.Label>\\n        {testGroup}\\n      </FormField>\\n    </div>\\n  </div>\\n);\\n\\nexport const InverseRadioStates = () => (\\n  <div>\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          checked: [\\n            {value: true, label: 'Checked'},\\n            {value: false, label: 'Unchecked'},\\n          ],\\n        })}\\n        columnProps={permutateProps(\\n          {\\n            className: [\\n              {label: 'Default', value: ''},\\n              {label: 'Hover', value: 'hover'},\\n              {label: 'Focus', value: 'focus'},\\n              {label: 'Focus Hover', value: 'focus hover'},\\n              {label: 'Active', value: 'active'},\\n              {label: 'Active Hover', value: 'active hover'},\\n            ],\\n            disabled: [\\n              {label: '', value: false},\\n              {label: 'Disabled', value: true},\\n            ],\\n          },\\n          props => {\\n            if (props.disabled && !['', 'hover'].includes(props.className)) {\\n              return false;\\n            }\\n            return true;\\n          }\\n        )}\\n      >\\n        {props => (\\n          <div style={{backgroundColor: '#0875e1', padding: '12px', borderRadius: '4px'}}>\\n            <Radio\\n              {...props}\\n              variant=\\\"inverse\\\"\\n              onChange={() => {}} // eslint-disable-line no-empty-function\\n              label=\\\"Radio\\\"\\n            />\\n          </div>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  </div>\\n);\\n\\nexport const RadioThemedStates = () => <RadioStates />;\\nRadioThemedStates.parameters = {\\n  canvasProviderDecorator: {\\n    theme: customColorTheme,\\n  },\\n};\\n\\nexport const RadioInverseThemedStates = () => <InverseRadioStates />;\\nRadioInverseThemedStates.parameters = {\\n  canvasProviderDecorator: {\\n    theme: customColorTheme,\\n  },\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"RadioStates\": {\n    \"startLoc\": {\n      \"col\": 27,\n      \"line\": 36\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 173\n    },\n    \"startBody\": {\n      \"col\": 27,\n      \"line\": 36\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 173\n    }\n  },\n  \"InverseRadioStates\": {\n    \"startLoc\": {\n      \"col\": 34,\n      \"line\": 175\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 221\n    },\n    \"startBody\": {\n      \"col\": 34,\n      \"line\": 175\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 221\n    }\n  },\n  \"RadioThemedStates\": {\n    \"startLoc\": {\n      \"col\": 33,\n      \"line\": 223\n    },\n    \"endLoc\": {\n      \"col\": 54,\n      \"line\": 223\n    },\n    \"startBody\": {\n      \"col\": 33,\n      \"line\": 223\n    },\n    \"endBody\": {\n      \"col\": 54,\n      \"line\": 223\n    }\n  },\n  \"RadioInverseThemedStates\": {\n    \"startLoc\": {\n      \"col\": 40,\n      \"line\": 230\n    },\n    \"endLoc\": {\n      \"col\": 68,\n      \"line\": 230\n    },\n    \"startBody\": {\n      \"col\": 40,\n      \"line\": 230\n    },\n    \"endBody\": {\n      \"col\": 68,\n      \"line\": 230\n    }\n  }\n};\n    \nimport * as React from 'react';\n\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {customColorTheme} from '../../../../utils/storybook';\n\nimport {Radio, RadioGroup} from '@workday/canvas-kit-react/radio';\nimport {FormField} from '@workday/canvas-kit-react/form-field';\n\nexport default {\n  title: 'Testing/Inputs/Radio',\n  component: RadioGroup,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import * as React from 'react';\\n\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {customColorTheme} from '../../../../utils/storybook';\\n\\nimport {Radio, RadioGroup} from '@workday/canvas-kit-react/radio';\\nimport {FormField} from '@workday/canvas-kit-react/form-field';\\n\\nexport default {\\n  title: 'Testing/Inputs/Radio',\\n  component: RadioGroup,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nconst testGroup = (\\n  <FormField.Input as={RadioGroup} name=\\\"contact\\\" value={'email'}>\\n    <Radio id=\\\"1\\\" value=\\\"email\\\" label=\\\"E-mail\\\" />\\n    <Radio id=\\\"2\\\" value=\\\"phone\\\" label=\\\"Phone\\\" />\\n    <Radio id=\\\"3\\\" value=\\\"fax\\\" label=\\\"Fax (disabled)\\\" disabled={true} />\\n    <Radio\\n      id=\\\"4\\\"\\n      value=\\\"mail\\\"\\n      label=\\\"Mail (US Postal Service aka USPS), a longer than normal label\\\"\\n    />\\n  </FormField.Input>\\n);\\n\\nexport const RadioStates = () => (\\n  <div>\\n    <h3>Radio</h3>\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          checked: [\\n            {value: true, label: 'Checked'},\\n            {value: false, label: 'Unchecked'},\\n          ],\\n        })}\\n        columnProps={permutateProps(\\n          {\\n            className: [\\n              {label: 'Default', value: ''},\\n              {label: 'Hover', value: 'hover'},\\n              {label: 'Focus', value: 'focus'},\\n              {label: 'Focus Hover', value: 'focus hover'},\\n              {label: 'Active', value: 'active'},\\n              {label: 'Active Hover', value: 'active hover'},\\n            ],\\n            disabled: [\\n              {label: '', value: false},\\n              {label: 'Disabled', value: true},\\n            ],\\n          },\\n          props => {\\n            if (props.disabled && !['', 'hover'].includes(props.className)) {\\n              return false;\\n            }\\n            return true;\\n          }\\n        )}\\n      >\\n        {props => (\\n          <Radio\\n            {...props}\\n            onChange={() => {}} \\n            label=\\\"Radio\\\"\\n          />\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n\\n    <h3>Radio Group</h3>\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          error: [\\n            {value: undefined, label: 'No Error'},\\n            {value: 'alert', label: 'Alert'},\\n            {value: 'error', label: 'Error'},\\n          ],\\n        })}\\n        columnProps={[\\n          {\\n            label: 'Left Label',\\n            props: {label: 'Contact', orientation: 'horizontal'},\\n          },\\n          {\\n            label: 'Top Label',\\n            props: {label: 'Contact'},\\n          },\\n        ]}\\n      >\\n        {props => (\\n          <FormField as=\\\"fieldset\\\" {...props}>\\n            <FormField.Label>{props.label}</FormField.Label>\\n            {props.orientation === 'horizontal' ? (\\n              <FormField.Container>\\n                {testGroup}\\n                {props.error && <FormField.Hint>hintText</FormField.Hint>}\\n              </FormField.Container>\\n            ) : (\\n              <>\\n                {testGroup}\\n                {props.error && <FormField.Hint>hintText</FormField.Hint>}\\n              </>\\n            )}\\n          </FormField>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n    <h3>Radio Group (grow)</h3>\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          error: [\\n            {value: undefined, label: 'No Error'},\\n            {value: 'alert', label: 'Alert'},\\n            {value: 'error', label: 'Error'},\\n          ],\\n        })}\\n        columnProps={[\\n          {\\n            label: 'Grow',\\n            props: {label: 'Contact', grow: true},\\n          },\\n        ]}\\n      >\\n        {props => (\\n          <FormField as=\\\"fieldset\\\" {...props} cs={{width: props.grow ? '100%' : undefined}}>\\n            <FormField.Label>{props.label}</FormField.Label>\\n            {testGroup}\\n            {props.orientation === 'horizontal' && (\\n              <FormField.Container>\\n                {testGroup} {props.error && <FormField.Hint>hintText</FormField.Hint>}\\n              </FormField.Container>\\n            )}\\n            {props.error && <FormField.Hint>hintText</FormField.Hint>}\\n          </FormField>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n\\n    <h3>RadioGroup (wrapping)</h3>\\n    <div style={{maxWidth: 480}}>\\n      <FormField orientation=\\\"horizontal\\\" as=\\\"fieldset\\\">\\n        <FormField.Label as=\\\"legend\\\">\\n          Really long label. Really long label. Really long label. Really long label. Really long\\n          label. Really long label.\\n        </FormField.Label>\\n        {testGroup}\\n      </FormField>\\n      <FormField as=\\\"fieldset\\\">\\n        <FormField.Label as=\\\"legend\\\">\\n          Really long label. Really long label. Really long label. Really long label. Really long\\n          label. Really long label. Really long label. Really long label. Really long label. Really\\n          long label. Really long label. Really long label. Really long label. Really long label.\\n          Really long label. Really long label. Really long label. Really long label. Really long\\n          label. Really long label. Really long label. Really long label. Really long label. Really\\n          long label. Really long label. Really long label.\\n        </FormField.Label>\\n        {testGroup}\\n      </FormField>\\n    </div>\\n  </div>\\n);\\n\\nexport const InverseRadioStates = () => (\\n  <div>\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          checked: [\\n            {value: true, label: 'Checked'},\\n            {value: false, label: 'Unchecked'},\\n          ],\\n        })}\\n        columnProps={permutateProps(\\n          {\\n            className: [\\n              {label: 'Default', value: ''},\\n              {label: 'Hover', value: 'hover'},\\n              {label: 'Focus', value: 'focus'},\\n              {label: 'Focus Hover', value: 'focus hover'},\\n              {label: 'Active', value: 'active'},\\n              {label: 'Active Hover', value: 'active hover'},\\n            ],\\n            disabled: [\\n              {label: '', value: false},\\n              {label: 'Disabled', value: true},\\n            ],\\n          },\\n          props => {\\n            if (props.disabled && !['', 'hover'].includes(props.className)) {\\n              return false;\\n            }\\n            return true;\\n          }\\n        )}\\n      >\\n        {props => (\\n          <div style={{backgroundColor: '#0875e1', padding: '12px', borderRadius: '4px'}}>\\n            <Radio\\n              {...props}\\n              variant=\\\"inverse\\\"\\n              onChange={() => {}} \\n              label=\\\"Radio\\\"\\n            />\\n          </div>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  </div>\\n);\\n\\nexport const RadioThemedStates = () => <RadioStates />;\\nRadioThemedStates.parameters = {\\n  canvasProviderDecorator: {\\n    theme: customColorTheme,\\n  },\\n};\\n\\nexport const RadioInverseThemedStates = () => <InverseRadioStates />;\\nRadioInverseThemedStates.parameters = {\\n  canvasProviderDecorator: {\\n    theme: customColorTheme,\\n  },\\n};\\n\",\n    \"locationsMap\": {\n      \"radio-states\": {\n        \"startLoc\": {\n          \"col\": 27,\n          \"line\": 36\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 173\n        },\n        \"startBody\": {\n          \"col\": 27,\n          \"line\": 36\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 173\n        }\n      },\n      \"inverse-radio-states\": {\n        \"startLoc\": {\n          \"col\": 34,\n          \"line\": 175\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 221\n        },\n        \"startBody\": {\n          \"col\": 34,\n          \"line\": 175\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 221\n        }\n      },\n      \"radio-themed-states\": {\n        \"startLoc\": {\n          \"col\": 33,\n          \"line\": 223\n        },\n        \"endLoc\": {\n          \"col\": 54,\n          \"line\": 223\n        },\n        \"startBody\": {\n          \"col\": 33,\n          \"line\": 223\n        },\n        \"endBody\": {\n          \"col\": 54,\n          \"line\": 223\n        }\n      },\n      \"radio-inverse-themed-states\": {\n        \"startLoc\": {\n          \"col\": 40,\n          \"line\": 230\n        },\n        \"endLoc\": {\n          \"col\": 68,\n          \"line\": 230\n        },\n        \"startBody\": {\n          \"col\": 40,\n          \"line\": 230\n        },\n        \"endBody\": {\n          \"col\": 68,\n          \"line\": 230\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nconst testGroup = (\n  <FormField.Input as={RadioGroup} name=\"contact\" value={'email'}>\n    <Radio id=\"1\" value=\"email\" label=\"E-mail\" />\n    <Radio id=\"2\" value=\"phone\" label=\"Phone\" />\n    <Radio id=\"3\" value=\"fax\" label=\"Fax (disabled)\" disabled={true} />\n    <Radio\n      id=\"4\"\n      value=\"mail\"\n      label=\"Mail (US Postal Service aka USPS), a longer than normal label\"\n    />\n  </FormField.Input>\n);\n\nexport const RadioStates = () => (\n  <div>\n    <h3>Radio</h3>\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          checked: [\n            {value: true, label: 'Checked'},\n            {value: false, label: 'Unchecked'},\n          ],\n        })}\n        columnProps={permutateProps(\n          {\n            className: [\n              {label: 'Default', value: ''},\n              {label: 'Hover', value: 'hover'},\n              {label: 'Focus', value: 'focus'},\n              {label: 'Focus Hover', value: 'focus hover'},\n              {label: 'Active', value: 'active'},\n              {label: 'Active Hover', value: 'active hover'},\n            ],\n            disabled: [\n              {label: '', value: false},\n              {label: 'Disabled', value: true},\n            ],\n          },\n          props => {\n            if (props.disabled && !['', 'hover'].includes(props.className)) {\n              return false;\n            }\n            return true;\n          }\n        )}\n      >\n        {props => (\n          <Radio\n            {...props}\n            onChange={() => {}} \n            label=\"Radio\"\n          />\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n\n    <h3>Radio Group</h3>\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          error: [\n            {value: undefined, label: 'No Error'},\n            {value: 'alert', label: 'Alert'},\n            {value: 'error', label: 'Error'},\n          ],\n        })}\n        columnProps={[\n          {\n            label: 'Left Label',\n            props: {label: 'Contact', orientation: 'horizontal'},\n          },\n          {\n            label: 'Top Label',\n            props: {label: 'Contact'},\n          },\n        ]}\n      >\n        {props => (\n          <FormField as=\"fieldset\" {...props}>\n            <FormField.Label>{props.label}</FormField.Label>\n            {props.orientation === 'horizontal' ? (\n              <FormField.Container>\n                {testGroup}\n                {props.error && <FormField.Hint>hintText</FormField.Hint>}\n              </FormField.Container>\n            ) : (\n              <>\n                {testGroup}\n                {props.error && <FormField.Hint>hintText</FormField.Hint>}\n              </>\n            )}\n          </FormField>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n    <h3>Radio Group (grow)</h3>\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          error: [\n            {value: undefined, label: 'No Error'},\n            {value: 'alert', label: 'Alert'},\n            {value: 'error', label: 'Error'},\n          ],\n        })}\n        columnProps={[\n          {\n            label: 'Grow',\n            props: {label: 'Contact', grow: true},\n          },\n        ]}\n      >\n        {props => (\n          <FormField as=\"fieldset\" {...props} cs={{width: props.grow ? '100%' : undefined}}>\n            <FormField.Label>{props.label}</FormField.Label>\n            {testGroup}\n            {props.orientation === 'horizontal' && (\n              <FormField.Container>\n                {testGroup} {props.error && <FormField.Hint>hintText</FormField.Hint>}\n              </FormField.Container>\n            )}\n            {props.error && <FormField.Hint>hintText</FormField.Hint>}\n          </FormField>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n\n    <h3>RadioGroup (wrapping)</h3>\n    <div style={{maxWidth: 480}}>\n      <FormField orientation=\"horizontal\" as=\"fieldset\">\n        <FormField.Label as=\"legend\">\n          Really long label. Really long label. Really long label. Really long label. Really long\n          label. Really long label.\n        </FormField.Label>\n        {testGroup}\n      </FormField>\n      <FormField as=\"fieldset\">\n        <FormField.Label as=\"legend\">\n          Really long label. Really long label. Really long label. Really long label. Really long\n          label. Really long label. Really long label. Really long label. Really long label. Really\n          long label. Really long label. Really long label. Really long label. Really long label.\n          Really long label. Really long label. Really long label. Really long label. Really long\n          label. Really long label. Really long label. Really long label. Really long label. Really\n          long label. Really long label. Really long label.\n        </FormField.Label>\n        {testGroup}\n      </FormField>\n    </div>\n  </div>\n);;\n\nexport const InverseRadioStates = () => (\n  <div>\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          checked: [\n            {value: true, label: 'Checked'},\n            {value: false, label: 'Unchecked'},\n          ],\n        })}\n        columnProps={permutateProps(\n          {\n            className: [\n              {label: 'Default', value: ''},\n              {label: 'Hover', value: 'hover'},\n              {label: 'Focus', value: 'focus'},\n              {label: 'Focus Hover', value: 'focus hover'},\n              {label: 'Active', value: 'active'},\n              {label: 'Active Hover', value: 'active hover'},\n            ],\n            disabled: [\n              {label: '', value: false},\n              {label: 'Disabled', value: true},\n            ],\n          },\n          props => {\n            if (props.disabled && !['', 'hover'].includes(props.className)) {\n              return false;\n            }\n            return true;\n          }\n        )}\n      >\n        {props => (\n          <div style={{backgroundColor: '#0875e1', padding: '12px', borderRadius: '4px'}}>\n            <Radio\n              {...props}\n              variant=\"inverse\"\n              onChange={() => {}} \n              label=\"Radio\"\n            />\n          </div>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  </div>\n);;\n\nexport const RadioThemedStates = () => <RadioStates />;;\nRadioThemedStates.parameters = {\n  canvasProviderDecorator: {\n    theme: customColorTheme,\n  },\n};\n\nexport const RadioInverseThemedStates = () => <InverseRadioStates />;\nRadioInverseThemedStates.parameters = {\n  canvasProviderDecorator: {\n    theme: customColorTheme,\n  },\n};\n",locationsMap:{"radio-states":{startLoc:{col:27,line:195},endLoc:{col:1,line:332},startBody:{col:27,line:195},endBody:{col:1,line:332}},"inverse-radio-states":{startLoc:{col:34,line:334},endLoc:{col:1,line:380},startBody:{col:34,line:334},endBody:{col:1,line:380}},"radio-themed-states":{startLoc:{col:33,line:382},endLoc:{col:54,line:382},startBody:{col:33,line:382},endBody:{col:54,line:382}},"radio-inverse-themed-states":{startLoc:{col:40,line:389},endLoc:{col:68,line:389},startBody:{col:40,line:389},endBody:{col:68,line:389}}}},storySource:{source:"import * as React from 'react';\n\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {customColorTheme} from '../../../../utils/storybook';\n\nimport {Radio, RadioGroup} from '@workday/canvas-kit-react/radio';\nimport {FormField} from '@workday/canvas-kit-react/form-field';\n\nexport default {\n  title: 'Testing/Inputs/Radio',\n  component: RadioGroup,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nconst testGroup = (\n  <FormField.Input as={RadioGroup} name=\"contact\" value={'email'}>\n    <Radio id=\"1\" value=\"email\" label=\"E-mail\" />\n    <Radio id=\"2\" value=\"phone\" label=\"Phone\" />\n    <Radio id=\"3\" value=\"fax\" label=\"Fax (disabled)\" disabled={true} />\n    <Radio\n      id=\"4\"\n      value=\"mail\"\n      label=\"Mail (US Postal Service aka USPS), a longer than normal label\"\n    />\n  </FormField.Input>\n);\n\nexport const RadioStates = () => (\n  <div>\n    <h3>Radio</h3>\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          checked: [\n            {value: true, label: 'Checked'},\n            {value: false, label: 'Unchecked'},\n          ],\n        })}\n        columnProps={permutateProps(\n          {\n            className: [\n              {label: 'Default', value: ''},\n              {label: 'Hover', value: 'hover'},\n              {label: 'Focus', value: 'focus'},\n              {label: 'Focus Hover', value: 'focus hover'},\n              {label: 'Active', value: 'active'},\n              {label: 'Active Hover', value: 'active hover'},\n            ],\n            disabled: [\n              {label: '', value: false},\n              {label: 'Disabled', value: true},\n            ],\n          },\n          props => {\n            if (props.disabled && !['', 'hover'].includes(props.className)) {\n              return false;\n            }\n            return true;\n          }\n        )}\n      >\n        {props => (\n          <Radio\n            {...props}\n            onChange={() => {}} \n            label=\"Radio\"\n          />\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n\n    <h3>Radio Group</h3>\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          error: [\n            {value: undefined, label: 'No Error'},\n            {value: 'alert', label: 'Alert'},\n            {value: 'error', label: 'Error'},\n          ],\n        })}\n        columnProps={[\n          {\n            label: 'Left Label',\n            props: {label: 'Contact', orientation: 'horizontal'},\n          },\n          {\n            label: 'Top Label',\n            props: {label: 'Contact'},\n          },\n        ]}\n      >\n        {props => (\n          <FormField as=\"fieldset\" {...props}>\n            <FormField.Label>{props.label}</FormField.Label>\n            {props.orientation === 'horizontal' ? (\n              <FormField.Container>\n                {testGroup}\n                {props.error && <FormField.Hint>hintText</FormField.Hint>}\n              </FormField.Container>\n            ) : (\n              <>\n                {testGroup}\n                {props.error && <FormField.Hint>hintText</FormField.Hint>}\n              </>\n            )}\n          </FormField>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n    <h3>Radio Group (grow)</h3>\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          error: [\n            {value: undefined, label: 'No Error'},\n            {value: 'alert', label: 'Alert'},\n            {value: 'error', label: 'Error'},\n          ],\n        })}\n        columnProps={[\n          {\n            label: 'Grow',\n            props: {label: 'Contact', grow: true},\n          },\n        ]}\n      >\n        {props => (\n          <FormField as=\"fieldset\" {...props} cs={{width: props.grow ? '100%' : undefined}}>\n            <FormField.Label>{props.label}</FormField.Label>\n            {testGroup}\n            {props.orientation === 'horizontal' && (\n              <FormField.Container>\n                {testGroup} {props.error && <FormField.Hint>hintText</FormField.Hint>}\n              </FormField.Container>\n            )}\n            {props.error && <FormField.Hint>hintText</FormField.Hint>}\n          </FormField>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n\n    <h3>RadioGroup (wrapping)</h3>\n    <div style={{maxWidth: 480}}>\n      <FormField orientation=\"horizontal\" as=\"fieldset\">\n        <FormField.Label as=\"legend\">\n          Really long label. Really long label. Really long label. Really long label. Really long\n          label. Really long label.\n        </FormField.Label>\n        {testGroup}\n      </FormField>\n      <FormField as=\"fieldset\">\n        <FormField.Label as=\"legend\">\n          Really long label. Really long label. Really long label. Really long label. Really long\n          label. Really long label. Really long label. Really long label. Really long label. Really\n          long label. Really long label. Really long label. Really long label. Really long label.\n          Really long label. Really long label. Really long label. Really long label. Really long\n          label. Really long label. Really long label. Really long label. Really long label. Really\n          long label. Really long label. Really long label.\n        </FormField.Label>\n        {testGroup}\n      </FormField>\n    </div>\n  </div>\n);\n\nexport const InverseRadioStates = () => (\n  <div>\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          checked: [\n            {value: true, label: 'Checked'},\n            {value: false, label: 'Unchecked'},\n          ],\n        })}\n        columnProps={permutateProps(\n          {\n            className: [\n              {label: 'Default', value: ''},\n              {label: 'Hover', value: 'hover'},\n              {label: 'Focus', value: 'focus'},\n              {label: 'Focus Hover', value: 'focus hover'},\n              {label: 'Active', value: 'active'},\n              {label: 'Active Hover', value: 'active hover'},\n            ],\n            disabled: [\n              {label: '', value: false},\n              {label: 'Disabled', value: true},\n            ],\n          },\n          props => {\n            if (props.disabled && !['', 'hover'].includes(props.className)) {\n              return false;\n            }\n            return true;\n          }\n        )}\n      >\n        {props => (\n          <div style={{backgroundColor: '#0875e1', padding: '12px', borderRadius: '4px'}}>\n            <Radio\n              {...props}\n              variant=\"inverse\"\n              onChange={() => {}} \n              label=\"Radio\"\n            />\n          </div>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  </div>\n);\n\nexport const RadioThemedStates = () => <RadioStates />;\nRadioThemedStates.parameters = {\n  canvasProviderDecorator: {\n    theme: customColorTheme,\n  },\n};\n\nexport const RadioInverseThemedStates = () => <InverseRadioStates />;\nRadioInverseThemedStates.parameters = {\n  canvasProviderDecorator: {\n    theme: customColorTheme,\n  },\n};\n",locationsMap:{"radio-states":{startLoc:{col:27,line:36},endLoc:{col:1,line:173},startBody:{col:27,line:36},endBody:{col:1,line:173}},"inverse-radio-states":{startLoc:{col:34,line:175},endLoc:{col:1,line:221},startBody:{col:34,line:175},endBody:{col:1,line:221}},"radio-themed-states":{startLoc:{col:33,line:223},endLoc:{col:54,line:223},startBody:{col:33,line:223},endBody:{col:54,line:223}},"radio-inverse-themed-states":{startLoc:{col:40,line:230},endLoc:{col:68,line:230},startBody:{col:40,line:230},endBody:{col:68,line:230}}}},chromatic:{disable:!1}}};const testGroup=React.createElement(_formField.FormField.Input,{as:_radio.RadioGroup,name:"contact",value:"email"},React.createElement(_radio.Radio,{id:"1",value:"email",label:"E-mail"}),React.createElement(_radio.Radio,{id:"2",value:"phone",label:"Phone"}),React.createElement(_radio.Radio,{id:"3",value:"fax",label:"Fax (disabled)",disabled:!0}),React.createElement(_radio.Radio,{id:"4",value:"mail",label:"Mail (US Postal Service aka USPS), a longer than normal label"})),RadioStates=()=>React.createElement("div",null,React.createElement("h3",null,"Radio"),React.createElement(_testing.StaticStates,null,React.createElement(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({checked:[{value:!0,label:"Checked"},{value:!1,label:"Unchecked"}]}),columnProps:(0,_testing.permutateProps)({className:[{label:"Default",value:""},{label:"Hover",value:"hover"},{label:"Focus",value:"focus"},{label:"Focus Hover",value:"focus hover"},{label:"Active",value:"active"},{label:"Active Hover",value:"active hover"}],disabled:[{label:"",value:!1},{label:"Disabled",value:!0}]},(props=>!(props.disabled&&!["","hover"].includes(props.className))))},(props=>React.createElement(_radio.Radio,_extends({},props,{onChange:()=>{},label:"Radio"}))))),React.createElement("h3",null,"Radio Group"),React.createElement(_testing.StaticStates,null,React.createElement(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({error:[{value:void 0,label:"No Error"},{value:"alert",label:"Alert"},{value:"error",label:"Error"}]}),columnProps:[{label:"Left Label",props:{label:"Contact",orientation:"horizontal"}},{label:"Top Label",props:{label:"Contact"}}]},(props=>React.createElement(_formField.FormField,_extends({as:"fieldset"},props),React.createElement(_formField.FormField.Label,null,props.label),"horizontal"===props.orientation?React.createElement(_formField.FormField.Container,null,testGroup,props.error&&React.createElement(_formField.FormField.Hint,null,"hintText")):React.createElement(React.Fragment,null,testGroup,props.error&&React.createElement(_formField.FormField.Hint,null,"hintText")))))),React.createElement("h3",null,"Radio Group (grow)"),React.createElement(_testing.StaticStates,null,React.createElement(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({error:[{value:void 0,label:"No Error"},{value:"alert",label:"Alert"},{value:"error",label:"Error"}]}),columnProps:[{label:"Grow",props:{label:"Contact",grow:!0}}]},(props=>React.createElement(_formField.FormField,_extends({as:"fieldset"},props,{cs:{width:props.grow?"100%":void 0}}),React.createElement(_formField.FormField.Label,null,props.label),testGroup,"horizontal"===props.orientation&&React.createElement(_formField.FormField.Container,null,testGroup," ",props.error&&React.createElement(_formField.FormField.Hint,null,"hintText")),props.error&&React.createElement(_formField.FormField.Hint,null,"hintText"))))),React.createElement("h3",null,"RadioGroup (wrapping)"),React.createElement("div",{style:{maxWidth:480}},React.createElement(_formField.FormField,{orientation:"horizontal",as:"fieldset"},React.createElement(_formField.FormField.Label,{as:"legend"},"Really long label. Really long label. Really long label. Really long label. Really long label. Really long label."),testGroup),React.createElement(_formField.FormField,{as:"fieldset"},React.createElement(_formField.FormField.Label,{as:"legend"},"Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label. Really long label."),testGroup)));exports.RadioStates=RadioStates,RadioStates.displayName="RadioStates";const InverseRadioStates=()=>React.createElement("div",null,React.createElement(_testing.StaticStates,null,React.createElement(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({checked:[{value:!0,label:"Checked"},{value:!1,label:"Unchecked"}]}),columnProps:(0,_testing.permutateProps)({className:[{label:"Default",value:""},{label:"Hover",value:"hover"},{label:"Focus",value:"focus"},{label:"Focus Hover",value:"focus hover"},{label:"Active",value:"active"},{label:"Active Hover",value:"active hover"}],disabled:[{label:"",value:!1},{label:"Disabled",value:!0}]},(props=>!(props.disabled&&!["","hover"].includes(props.className))))},(props=>React.createElement("div",{style:{backgroundColor:"#0875e1",padding:"12px",borderRadius:"4px"}},React.createElement(_radio.Radio,_extends({},props,{variant:"inverse",onChange:()=>{},label:"Radio"})))))));exports.InverseRadioStates=InverseRadioStates,InverseRadioStates.displayName="InverseRadioStates";const RadioThemedStates=()=>React.createElement(RadioStates,null);exports.RadioThemedStates=RadioThemedStates,RadioThemedStates.displayName="RadioThemedStates",RadioThemedStates.parameters={canvasProviderDecorator:{theme:_storybook.customColorTheme}};const RadioInverseThemedStates=()=>React.createElement(InverseRadioStates,null);exports.RadioInverseThemedStates=RadioInverseThemedStates,RadioInverseThemedStates.displayName="RadioInverseThemedStates",RadioInverseThemedStates.parameters={canvasProviderDecorator:{theme:_storybook.customColorTheme}},module.exports.__namedExportsOrder=["RadioThemedStates","RadioStates","RadioInverseThemedStates","InverseRadioStates"]}}]);