"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[9471],{"./modules/react/text/stories/testing.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.TitleStates=exports.TextStates=exports.SubtextStates=exports.LabelStates=exports.HeadingStates=exports.BodyTextStates=void 0;(function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}})(__webpack_require__("./node_modules/react/index.js"));var _testing=__webpack_require__("./modules/react/testing/index.ts"),_=__webpack_require__("./modules/react/text/index.ts"),_layout=__webpack_require__("./modules/react/layout/index.ts"),_canvasKitStyling=__webpack_require__("./modules/styling/index.ts"),_canvasTokensWeb=__webpack_require__("./node_modules/@workday/canvas-tokens-web/dist/es6/index.js"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");const inverseBackground=(0,_canvasKitStyling.createStyles)({backgroundColor:_canvasTokensWeb.system.color.bg.primary.strong});exports.default={title:"Testing/Containers/Text",component:_.Text,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import React from 'react';\\nimport {ComponentStatesTable, StaticStates} from '@workday/canvas-kit-react/testing';\\nimport {BodyText, Heading, LabelText, Subtext, Text, Title} from '../';\\nimport {Box} from '@workday/canvas-kit-react/layout';\\nimport {createStyles} from '@workday/canvas-kit-styling';\\nimport {system} from '@workday/canvas-tokens-web';\\n\\ntype TypeStateProp = {size: 'small' | 'medium' | 'large'; variant?: 'error' | 'hint' | 'inverse'};\\n\\nconst inverseBackground = createStyles({\\n  backgroundColor: system.color.bg.primary.strong,\\n});\\n\\nexport default {\\n  title: 'Testing/Containers/Text',\\n  component: Text,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const TextStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {\\n            label: 'Default',\\n            props: {},\\n          },\\n          {\\n            label: 'With font-size as a token value of 8',\\n            props: {fontSize: 8},\\n          },\\n          {\\n            label: 'With regular font-size value of 1.25rem',\\n            props: {fontSize: '1.25rem'},\\n          },\\n          {\\n            label: 'With regular font-weigth value of 400',\\n            props: {fontWeight: 400},\\n          },\\n          {\\n            label: 'With font-weigth as a token value of regular',\\n            props: {fontWeight: 'regular', as: 'h3'},\\n          },\\n          {\\n            label: 'With monospace font-family value',\\n            props: {fontFamily: 'monospace'},\\n          },\\n          {\\n            label: 'With color',\\n            props: {color: system.color.static.blue.soft},\\n          },\\n          {\\n            label: 'With color as color token name',\\n            props: {color: 'blueberry300'},\\n          },\\n          {\\n            label: 'With variant',\\n            props: {variant: 'error'},\\n          },\\n          {\\n            label: 'With letter-spacing of 0.5rem',\\n            props: {letterSpacing: '0.5rem'},\\n          },\\n          {\\n            label: 'With line-height of 2.5rem',\\n            props: {lineHeight: '2.5rem'},\\n          },\\n          {\\n            label: 'Aligned to the right',\\n            props: {textAlign: 'right'},\\n          },\\n          {\\n            label: 'With text-decoration',\\n            props: {textDecoration: 'underline'},\\n          },\\n          {\\n            label: 'Transformed to uppercase',\\n            props: {textTransform: 'uppercase'},\\n          },\\n          {\\n            label: 'With text-shadow',\\n            props: {textShadow: `2px 2px ${system.color.static.blue.soft}`},\\n          },\\n          {\\n            label: 'With white-space changed to nowrap',\\n            props: {whiteSpace: 'nowrap'},\\n          },\\n          {\\n            label: 'With word-break changed to break-all',\\n            props: {wordBreak: 'break-all'},\\n          },\\n        ]}\\n        columnProps={[{label: 'Examples', props: {}}]}\\n      >\\n        {props => (\\n          <Box width={350}>\\n            <Text as=\\\"p\\\" {...props}>\\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n            </Text>\\n          </Box>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const TitleStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'Small Size', props: {size: 'small'}},\\n          {label: 'Medium Size', props: {size: 'medium'}},\\n          {label: 'Large Size', props: {size: 'large'}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Default',\\n            props: {},\\n          },\\n          {\\n            label: 'Hint variant',\\n            props: {variant: 'hint'},\\n          },\\n          {\\n            label: 'Error variant',\\n            props: {variant: 'error'},\\n          },\\n          {\\n            label: 'Inverse variant',\\n            props: {variant: 'inverse'},\\n          },\\n        ]}\\n      >\\n        {(props: TypeStateProp) => (\\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\\n            <Title {...props}>Lorem ipsum title.</Title>\\n          </Box>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const HeadingStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'Small Size', props: {size: 'small'}},\\n          {label: 'Medium Size', props: {size: 'medium'}},\\n          {label: 'Large Size', props: {size: 'large'}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Examples',\\n            props: {},\\n          },\\n          {\\n            label: 'Hint variant',\\n            props: {variant: 'hint'},\\n          },\\n          {\\n            label: 'Error variant',\\n            props: {variant: 'error'},\\n          },\\n          {\\n            label: 'Inverse variant',\\n            props: {variant: 'inverse'},\\n          },\\n        ]}\\n      >\\n        {(props: TypeStateProp) => (\\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\\n            <Heading {...props}>Lorem ipsum title.</Heading>\\n          </Box>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const SubtextStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'Small Size', props: {size: 'small'}},\\n          {label: 'Medium Size', props: {size: 'medium'}},\\n          {label: 'Large Size', props: {size: 'large'}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Examples',\\n            props: {},\\n          },\\n          {\\n            label: 'Hint variant',\\n            props: {variant: 'hint'},\\n          },\\n          {\\n            label: 'Error variant',\\n            props: {variant: 'error'},\\n          },\\n          {\\n            label: 'Inverse variant',\\n            props: {variant: 'inverse'},\\n          },\\n        ]}\\n      >\\n        {(props: TypeStateProp) => (\\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\\n            <Subtext {...props}>Lorem ipsum title.</Subtext>\\n          </Box>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const BodyTextStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'Small Size', props: {size: 'small'}},\\n          {label: 'Medium Size', props: {size: 'medium'}},\\n          {label: 'Large Size', props: {size: 'large'}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Examples',\\n            props: {},\\n          },\\n          {\\n            label: 'Hint variant',\\n            props: {variant: 'hint'},\\n          },\\n          {\\n            label: 'Error variant',\\n            props: {variant: 'error'},\\n          },\\n          {\\n            label: 'Inverse variant',\\n            props: {variant: 'inverse'},\\n          },\\n        ]}\\n      >\\n        {(props: TypeStateProp) => (\\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\\n            <BodyText {...props}>Lorem ipsum title.</BodyText>\\n          </Box>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const LabelStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'Default', props: {}},\\n          {label: 'Disabled', props: {disabled: true}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Examples',\\n            props: {},\\n          },\\n          {\\n            label: 'Hint variant',\\n            props: {variant: 'hint'},\\n          },\\n          {\\n            label: 'Error variant',\\n            props: {variant: 'error'},\\n          },\\n          {\\n            label: 'Inverse variant',\\n            props: {variant: 'inverse'},\\n          },\\n        ]}\\n      >\\n        {(props: TypeStateProp) => (\\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\\n            <LabelText {...props}>Lorem ipsum title.</LabelText>\\n          </Box>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"TextStates\": {\n    \"startLoc\": {\n      \"col\": 26,\n      \"line\": 24\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 110\n    },\n    \"startBody\": {\n      \"col\": 26,\n      \"line\": 24\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 110\n    }\n  },\n  \"TitleStates\": {\n    \"startLoc\": {\n      \"col\": 27,\n      \"line\": 112\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 148\n    },\n    \"startBody\": {\n      \"col\": 27,\n      \"line\": 112\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 148\n    }\n  },\n  \"HeadingStates\": {\n    \"startLoc\": {\n      \"col\": 29,\n      \"line\": 150\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 186\n    },\n    \"startBody\": {\n      \"col\": 29,\n      \"line\": 150\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 186\n    }\n  },\n  \"SubtextStates\": {\n    \"startLoc\": {\n      \"col\": 29,\n      \"line\": 188\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 224\n    },\n    \"startBody\": {\n      \"col\": 29,\n      \"line\": 188\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 224\n    }\n  },\n  \"BodyTextStates\": {\n    \"startLoc\": {\n      \"col\": 30,\n      \"line\": 226\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 262\n    },\n    \"startBody\": {\n      \"col\": 30,\n      \"line\": 226\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 262\n    }\n  },\n  \"LabelStates\": {\n    \"startLoc\": {\n      \"col\": 27,\n      \"line\": 264\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 299\n    },\n    \"startBody\": {\n      \"col\": 27,\n      \"line\": 264\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 299\n    }\n  }\n};\n    \nimport React from 'react';\nimport {ComponentStatesTable, StaticStates} from '@workday/canvas-kit-react/testing';\nimport {BodyText, Heading, LabelText, Subtext, Text, Title} from '../';\nimport {Box} from '@workday/canvas-kit-react/layout';\nimport {createStyles} from '@workday/canvas-kit-styling';\nimport {system} from '@workday/canvas-tokens-web';\n\ntype TypeStateProp = {size: 'small' | 'medium' | 'large'; variant?: 'error' | 'hint' | 'inverse'};\n\nconst inverseBackground = createStyles({\n  backgroundColor: system.color.bg.primary.strong,\n});\n\nexport default {\n  title: 'Testing/Containers/Text',\n  component: Text,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import React from 'react';\\nimport {ComponentStatesTable, StaticStates} from '@workday/canvas-kit-react/testing';\\nimport {BodyText, Heading, LabelText, Subtext, Text, Title} from '../';\\nimport {Box} from '@workday/canvas-kit-react/layout';\\nimport {createStyles} from '@workday/canvas-kit-styling';\\nimport {system} from '@workday/canvas-tokens-web';\\n\\ntype TypeStateProp = {size: 'small' | 'medium' | 'large'; variant?: 'error' | 'hint' | 'inverse'};\\n\\nconst inverseBackground = createStyles({\\n  backgroundColor: system.color.bg.primary.strong,\\n});\\n\\nexport default {\\n  title: 'Testing/Containers/Text',\\n  component: Text,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const TextStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {\\n            label: 'Default',\\n            props: {},\\n          },\\n          {\\n            label: 'With font-size as a token value of 8',\\n            props: {fontSize: 8},\\n          },\\n          {\\n            label: 'With regular font-size value of 1.25rem',\\n            props: {fontSize: '1.25rem'},\\n          },\\n          {\\n            label: 'With regular font-weigth value of 400',\\n            props: {fontWeight: 400},\\n          },\\n          {\\n            label: 'With font-weigth as a token value of regular',\\n            props: {fontWeight: 'regular', as: 'h3'},\\n          },\\n          {\\n            label: 'With monospace font-family value',\\n            props: {fontFamily: 'monospace'},\\n          },\\n          {\\n            label: 'With color',\\n            props: {color: system.color.static.blue.soft},\\n          },\\n          {\\n            label: 'With color as color token name',\\n            props: {color: 'blueberry300'},\\n          },\\n          {\\n            label: 'With variant',\\n            props: {variant: 'error'},\\n          },\\n          {\\n            label: 'With letter-spacing of 0.5rem',\\n            props: {letterSpacing: '0.5rem'},\\n          },\\n          {\\n            label: 'With line-height of 2.5rem',\\n            props: {lineHeight: '2.5rem'},\\n          },\\n          {\\n            label: 'Aligned to the right',\\n            props: {textAlign: 'right'},\\n          },\\n          {\\n            label: 'With text-decoration',\\n            props: {textDecoration: 'underline'},\\n          },\\n          {\\n            label: 'Transformed to uppercase',\\n            props: {textTransform: 'uppercase'},\\n          },\\n          {\\n            label: 'With text-shadow',\\n            props: {textShadow: `2px 2px ${system.color.static.blue.soft}`},\\n          },\\n          {\\n            label: 'With white-space changed to nowrap',\\n            props: {whiteSpace: 'nowrap'},\\n          },\\n          {\\n            label: 'With word-break changed to break-all',\\n            props: {wordBreak: 'break-all'},\\n          },\\n        ]}\\n        columnProps={[{label: 'Examples', props: {}}]}\\n      >\\n        {props => (\\n          <Box width={350}>\\n            <Text as=\\\"p\\\" {...props}>\\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n            </Text>\\n          </Box>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const TitleStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'Small Size', props: {size: 'small'}},\\n          {label: 'Medium Size', props: {size: 'medium'}},\\n          {label: 'Large Size', props: {size: 'large'}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Default',\\n            props: {},\\n          },\\n          {\\n            label: 'Hint variant',\\n            props: {variant: 'hint'},\\n          },\\n          {\\n            label: 'Error variant',\\n            props: {variant: 'error'},\\n          },\\n          {\\n            label: 'Inverse variant',\\n            props: {variant: 'inverse'},\\n          },\\n        ]}\\n      >\\n        {(props: TypeStateProp) => (\\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\\n            <Title {...props}>Lorem ipsum title.</Title>\\n          </Box>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const HeadingStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'Small Size', props: {size: 'small'}},\\n          {label: 'Medium Size', props: {size: 'medium'}},\\n          {label: 'Large Size', props: {size: 'large'}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Examples',\\n            props: {},\\n          },\\n          {\\n            label: 'Hint variant',\\n            props: {variant: 'hint'},\\n          },\\n          {\\n            label: 'Error variant',\\n            props: {variant: 'error'},\\n          },\\n          {\\n            label: 'Inverse variant',\\n            props: {variant: 'inverse'},\\n          },\\n        ]}\\n      >\\n        {(props: TypeStateProp) => (\\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\\n            <Heading {...props}>Lorem ipsum title.</Heading>\\n          </Box>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const SubtextStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'Small Size', props: {size: 'small'}},\\n          {label: 'Medium Size', props: {size: 'medium'}},\\n          {label: 'Large Size', props: {size: 'large'}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Examples',\\n            props: {},\\n          },\\n          {\\n            label: 'Hint variant',\\n            props: {variant: 'hint'},\\n          },\\n          {\\n            label: 'Error variant',\\n            props: {variant: 'error'},\\n          },\\n          {\\n            label: 'Inverse variant',\\n            props: {variant: 'inverse'},\\n          },\\n        ]}\\n      >\\n        {(props: TypeStateProp) => (\\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\\n            <Subtext {...props}>Lorem ipsum title.</Subtext>\\n          </Box>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const BodyTextStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'Small Size', props: {size: 'small'}},\\n          {label: 'Medium Size', props: {size: 'medium'}},\\n          {label: 'Large Size', props: {size: 'large'}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Examples',\\n            props: {},\\n          },\\n          {\\n            label: 'Hint variant',\\n            props: {variant: 'hint'},\\n          },\\n          {\\n            label: 'Error variant',\\n            props: {variant: 'error'},\\n          },\\n          {\\n            label: 'Inverse variant',\\n            props: {variant: 'inverse'},\\n          },\\n        ]}\\n      >\\n        {(props: TypeStateProp) => (\\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\\n            <BodyText {...props}>Lorem ipsum title.</BodyText>\\n          </Box>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const LabelStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'Default', props: {}},\\n          {label: 'Disabled', props: {disabled: true}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Examples',\\n            props: {},\\n          },\\n          {\\n            label: 'Hint variant',\\n            props: {variant: 'hint'},\\n          },\\n          {\\n            label: 'Error variant',\\n            props: {variant: 'error'},\\n          },\\n          {\\n            label: 'Inverse variant',\\n            props: {variant: 'inverse'},\\n          },\\n        ]}\\n      >\\n        {(props: TypeStateProp) => (\\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\\n            <LabelText {...props}>Lorem ipsum title.</LabelText>\\n          </Box>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\",\n    \"locationsMap\": {\n      \"text-states\": {\n        \"startLoc\": {\n          \"col\": 26,\n          \"line\": 24\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 110\n        },\n        \"startBody\": {\n          \"col\": 26,\n          \"line\": 24\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 110\n        }\n      },\n      \"title-states\": {\n        \"startLoc\": {\n          \"col\": 27,\n          \"line\": 112\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 148\n        },\n        \"startBody\": {\n          \"col\": 27,\n          \"line\": 112\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 148\n        }\n      },\n      \"heading-states\": {\n        \"startLoc\": {\n          \"col\": 29,\n          \"line\": 150\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 186\n        },\n        \"startBody\": {\n          \"col\": 29,\n          \"line\": 150\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 186\n        }\n      },\n      \"subtext-states\": {\n        \"startLoc\": {\n          \"col\": 29,\n          \"line\": 188\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 224\n        },\n        \"startBody\": {\n          \"col\": 29,\n          \"line\": 188\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 224\n        }\n      },\n      \"body-text-states\": {\n        \"startLoc\": {\n          \"col\": 30,\n          \"line\": 226\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 262\n        },\n        \"startBody\": {\n          \"col\": 30,\n          \"line\": 226\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 262\n        }\n      },\n      \"label-states\": {\n        \"startLoc\": {\n          \"col\": 27,\n          \"line\": 264\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 299\n        },\n        \"startBody\": {\n          \"col\": 27,\n          \"line\": 264\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 299\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const TextStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {\n            label: 'Default',\n            props: {},\n          },\n          {\n            label: 'With font-size as a token value of 8',\n            props: {fontSize: 8},\n          },\n          {\n            label: 'With regular font-size value of 1.25rem',\n            props: {fontSize: '1.25rem'},\n          },\n          {\n            label: 'With regular font-weigth value of 400',\n            props: {fontWeight: 400},\n          },\n          {\n            label: 'With font-weigth as a token value of regular',\n            props: {fontWeight: 'regular', as: 'h3'},\n          },\n          {\n            label: 'With monospace font-family value',\n            props: {fontFamily: 'monospace'},\n          },\n          {\n            label: 'With color',\n            props: {color: system.color.static.blue.soft},\n          },\n          {\n            label: 'With color as color token name',\n            props: {color: 'blueberry300'},\n          },\n          {\n            label: 'With variant',\n            props: {variant: 'error'},\n          },\n          {\n            label: 'With letter-spacing of 0.5rem',\n            props: {letterSpacing: '0.5rem'},\n          },\n          {\n            label: 'With line-height of 2.5rem',\n            props: {lineHeight: '2.5rem'},\n          },\n          {\n            label: 'Aligned to the right',\n            props: {textAlign: 'right'},\n          },\n          {\n            label: 'With text-decoration',\n            props: {textDecoration: 'underline'},\n          },\n          {\n            label: 'Transformed to uppercase',\n            props: {textTransform: 'uppercase'},\n          },\n          {\n            label: 'With text-shadow',\n            props: {textShadow: `2px 2px ${system.color.static.blue.soft}`},\n          },\n          {\n            label: 'With white-space changed to nowrap',\n            props: {whiteSpace: 'nowrap'},\n          },\n          {\n            label: 'With word-break changed to break-all',\n            props: {wordBreak: 'break-all'},\n          },\n        ]}\n        columnProps={[{label: 'Examples', props: {}}]}\n      >\n        {props => (\n          <Box width={350}>\n            <Text as=\"p\" {...props}>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n            </Text>\n          </Box>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};;\n\nexport const TitleStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'Small Size', props: {size: 'small'}},\n          {label: 'Medium Size', props: {size: 'medium'}},\n          {label: 'Large Size', props: {size: 'large'}},\n        ]}\n        columnProps={[\n          {\n            label: 'Default',\n            props: {},\n          },\n          {\n            label: 'Hint variant',\n            props: {variant: 'hint'},\n          },\n          {\n            label: 'Error variant',\n            props: {variant: 'error'},\n          },\n          {\n            label: 'Inverse variant',\n            props: {variant: 'inverse'},\n          },\n        ]}\n      >\n        {(props: TypeStateProp) => (\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\n            <Title {...props}>Lorem ipsum title.</Title>\n          </Box>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};;\n\nexport const HeadingStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'Small Size', props: {size: 'small'}},\n          {label: 'Medium Size', props: {size: 'medium'}},\n          {label: 'Large Size', props: {size: 'large'}},\n        ]}\n        columnProps={[\n          {\n            label: 'Examples',\n            props: {},\n          },\n          {\n            label: 'Hint variant',\n            props: {variant: 'hint'},\n          },\n          {\n            label: 'Error variant',\n            props: {variant: 'error'},\n          },\n          {\n            label: 'Inverse variant',\n            props: {variant: 'inverse'},\n          },\n        ]}\n      >\n        {(props: TypeStateProp) => (\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\n            <Heading {...props}>Lorem ipsum title.</Heading>\n          </Box>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};;\n\nexport const SubtextStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'Small Size', props: {size: 'small'}},\n          {label: 'Medium Size', props: {size: 'medium'}},\n          {label: 'Large Size', props: {size: 'large'}},\n        ]}\n        columnProps={[\n          {\n            label: 'Examples',\n            props: {},\n          },\n          {\n            label: 'Hint variant',\n            props: {variant: 'hint'},\n          },\n          {\n            label: 'Error variant',\n            props: {variant: 'error'},\n          },\n          {\n            label: 'Inverse variant',\n            props: {variant: 'inverse'},\n          },\n        ]}\n      >\n        {(props: TypeStateProp) => (\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\n            <Subtext {...props}>Lorem ipsum title.</Subtext>\n          </Box>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};;\n\nexport const BodyTextStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'Small Size', props: {size: 'small'}},\n          {label: 'Medium Size', props: {size: 'medium'}},\n          {label: 'Large Size', props: {size: 'large'}},\n        ]}\n        columnProps={[\n          {\n            label: 'Examples',\n            props: {},\n          },\n          {\n            label: 'Hint variant',\n            props: {variant: 'hint'},\n          },\n          {\n            label: 'Error variant',\n            props: {variant: 'error'},\n          },\n          {\n            label: 'Inverse variant',\n            props: {variant: 'inverse'},\n          },\n        ]}\n      >\n        {(props: TypeStateProp) => (\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\n            <BodyText {...props}>Lorem ipsum title.</BodyText>\n          </Box>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};;\n\nexport const LabelStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'Default', props: {}},\n          {label: 'Disabled', props: {disabled: true}},\n        ]}\n        columnProps={[\n          {\n            label: 'Examples',\n            props: {},\n          },\n          {\n            label: 'Hint variant',\n            props: {variant: 'hint'},\n          },\n          {\n            label: 'Error variant',\n            props: {variant: 'error'},\n          },\n          {\n            label: 'Inverse variant',\n            props: {variant: 'inverse'},\n          },\n        ]}\n      >\n        {(props: TypeStateProp) => (\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\n            <LabelText {...props}>Lorem ipsum title.</LabelText>\n          </Box>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n",locationsMap:{"text-states":{startLoc:{col:26,line:255},endLoc:{col:1,line:341},startBody:{col:26,line:255},endBody:{col:1,line:341}},"title-states":{startLoc:{col:27,line:343},endLoc:{col:1,line:379},startBody:{col:27,line:343},endBody:{col:1,line:379}},"heading-states":{startLoc:{col:29,line:381},endLoc:{col:1,line:417},startBody:{col:29,line:381},endBody:{col:1,line:417}},"subtext-states":{startLoc:{col:29,line:419},endLoc:{col:1,line:455},startBody:{col:29,line:419},endBody:{col:1,line:455}},"body-text-states":{startLoc:{col:30,line:457},endLoc:{col:1,line:493},startBody:{col:30,line:457},endBody:{col:1,line:493}},"label-states":{startLoc:{col:27,line:495},endLoc:{col:1,line:530},startBody:{col:27,line:495},endBody:{col:1,line:530}}}},storySource:{source:"import React from 'react';\nimport {ComponentStatesTable, StaticStates} from '@workday/canvas-kit-react/testing';\nimport {BodyText, Heading, LabelText, Subtext, Text, Title} from '../';\nimport {Box} from '@workday/canvas-kit-react/layout';\nimport {createStyles} from '@workday/canvas-kit-styling';\nimport {system} from '@workday/canvas-tokens-web';\n\ntype TypeStateProp = {size: 'small' | 'medium' | 'large'; variant?: 'error' | 'hint' | 'inverse'};\n\nconst inverseBackground = createStyles({\n  backgroundColor: system.color.bg.primary.strong,\n});\n\nexport default {\n  title: 'Testing/Containers/Text',\n  component: Text,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const TextStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {\n            label: 'Default',\n            props: {},\n          },\n          {\n            label: 'With font-size as a token value of 8',\n            props: {fontSize: 8},\n          },\n          {\n            label: 'With regular font-size value of 1.25rem',\n            props: {fontSize: '1.25rem'},\n          },\n          {\n            label: 'With regular font-weigth value of 400',\n            props: {fontWeight: 400},\n          },\n          {\n            label: 'With font-weigth as a token value of regular',\n            props: {fontWeight: 'regular', as: 'h3'},\n          },\n          {\n            label: 'With monospace font-family value',\n            props: {fontFamily: 'monospace'},\n          },\n          {\n            label: 'With color',\n            props: {color: system.color.static.blue.soft},\n          },\n          {\n            label: 'With color as color token name',\n            props: {color: 'blueberry300'},\n          },\n          {\n            label: 'With variant',\n            props: {variant: 'error'},\n          },\n          {\n            label: 'With letter-spacing of 0.5rem',\n            props: {letterSpacing: '0.5rem'},\n          },\n          {\n            label: 'With line-height of 2.5rem',\n            props: {lineHeight: '2.5rem'},\n          },\n          {\n            label: 'Aligned to the right',\n            props: {textAlign: 'right'},\n          },\n          {\n            label: 'With text-decoration',\n            props: {textDecoration: 'underline'},\n          },\n          {\n            label: 'Transformed to uppercase',\n            props: {textTransform: 'uppercase'},\n          },\n          {\n            label: 'With text-shadow',\n            props: {textShadow: `2px 2px ${system.color.static.blue.soft}`},\n          },\n          {\n            label: 'With white-space changed to nowrap',\n            props: {whiteSpace: 'nowrap'},\n          },\n          {\n            label: 'With word-break changed to break-all',\n            props: {wordBreak: 'break-all'},\n          },\n        ]}\n        columnProps={[{label: 'Examples', props: {}}]}\n      >\n        {props => (\n          <Box width={350}>\n            <Text as=\"p\" {...props}>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n            </Text>\n          </Box>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n\nexport const TitleStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'Small Size', props: {size: 'small'}},\n          {label: 'Medium Size', props: {size: 'medium'}},\n          {label: 'Large Size', props: {size: 'large'}},\n        ]}\n        columnProps={[\n          {\n            label: 'Default',\n            props: {},\n          },\n          {\n            label: 'Hint variant',\n            props: {variant: 'hint'},\n          },\n          {\n            label: 'Error variant',\n            props: {variant: 'error'},\n          },\n          {\n            label: 'Inverse variant',\n            props: {variant: 'inverse'},\n          },\n        ]}\n      >\n        {(props: TypeStateProp) => (\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\n            <Title {...props}>Lorem ipsum title.</Title>\n          </Box>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n\nexport const HeadingStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'Small Size', props: {size: 'small'}},\n          {label: 'Medium Size', props: {size: 'medium'}},\n          {label: 'Large Size', props: {size: 'large'}},\n        ]}\n        columnProps={[\n          {\n            label: 'Examples',\n            props: {},\n          },\n          {\n            label: 'Hint variant',\n            props: {variant: 'hint'},\n          },\n          {\n            label: 'Error variant',\n            props: {variant: 'error'},\n          },\n          {\n            label: 'Inverse variant',\n            props: {variant: 'inverse'},\n          },\n        ]}\n      >\n        {(props: TypeStateProp) => (\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\n            <Heading {...props}>Lorem ipsum title.</Heading>\n          </Box>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n\nexport const SubtextStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'Small Size', props: {size: 'small'}},\n          {label: 'Medium Size', props: {size: 'medium'}},\n          {label: 'Large Size', props: {size: 'large'}},\n        ]}\n        columnProps={[\n          {\n            label: 'Examples',\n            props: {},\n          },\n          {\n            label: 'Hint variant',\n            props: {variant: 'hint'},\n          },\n          {\n            label: 'Error variant',\n            props: {variant: 'error'},\n          },\n          {\n            label: 'Inverse variant',\n            props: {variant: 'inverse'},\n          },\n        ]}\n      >\n        {(props: TypeStateProp) => (\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\n            <Subtext {...props}>Lorem ipsum title.</Subtext>\n          </Box>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n\nexport const BodyTextStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'Small Size', props: {size: 'small'}},\n          {label: 'Medium Size', props: {size: 'medium'}},\n          {label: 'Large Size', props: {size: 'large'}},\n        ]}\n        columnProps={[\n          {\n            label: 'Examples',\n            props: {},\n          },\n          {\n            label: 'Hint variant',\n            props: {variant: 'hint'},\n          },\n          {\n            label: 'Error variant',\n            props: {variant: 'error'},\n          },\n          {\n            label: 'Inverse variant',\n            props: {variant: 'inverse'},\n          },\n        ]}\n      >\n        {(props: TypeStateProp) => (\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\n            <BodyText {...props}>Lorem ipsum title.</BodyText>\n          </Box>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n\nexport const LabelStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'Default', props: {}},\n          {label: 'Disabled', props: {disabled: true}},\n        ]}\n        columnProps={[\n          {\n            label: 'Examples',\n            props: {},\n          },\n          {\n            label: 'Hint variant',\n            props: {variant: 'hint'},\n          },\n          {\n            label: 'Error variant',\n            props: {variant: 'error'},\n          },\n          {\n            label: 'Inverse variant',\n            props: {variant: 'inverse'},\n          },\n        ]}\n      >\n        {(props: TypeStateProp) => (\n          <Box className={props.variant === 'inverse' ? inverseBackground : ''}>\n            <LabelText {...props}>Lorem ipsum title.</LabelText>\n          </Box>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n",locationsMap:{"text-states":{startLoc:{col:26,line:24},endLoc:{col:1,line:110},startBody:{col:26,line:24},endBody:{col:1,line:110}},"title-states":{startLoc:{col:27,line:112},endLoc:{col:1,line:148},startBody:{col:27,line:112},endBody:{col:1,line:148}},"heading-states":{startLoc:{col:29,line:150},endLoc:{col:1,line:186},startBody:{col:29,line:150},endBody:{col:1,line:186}},"subtext-states":{startLoc:{col:29,line:188},endLoc:{col:1,line:224},startBody:{col:29,line:188},endBody:{col:1,line:224}},"body-text-states":{startLoc:{col:30,line:226},endLoc:{col:1,line:262},startBody:{col:30,line:226},endBody:{col:1,line:262}},"label-states":{startLoc:{col:27,line:264},endLoc:{col:1,line:299},startBody:{col:27,line:264},endBody:{col:1,line:299}}}},chromatic:{disable:!1}}};exports.TextStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"Default",props:{}},{label:"With font-size as a token value of 8",props:{fontSize:8}},{label:"With regular font-size value of 1.25rem",props:{fontSize:"1.25rem"}},{label:"With regular font-weigth value of 400",props:{fontWeight:400}},{label:"With font-weigth as a token value of regular",props:{fontWeight:"regular",as:"h3"}},{label:"With monospace font-family value",props:{fontFamily:"monospace"}},{label:"With color",props:{color:_canvasTokensWeb.system.color.static.blue.soft}},{label:"With color as color token name",props:{color:"blueberry300"}},{label:"With variant",props:{variant:"error"}},{label:"With letter-spacing of 0.5rem",props:{letterSpacing:"0.5rem"}},{label:"With line-height of 2.5rem",props:{lineHeight:"2.5rem"}},{label:"Aligned to the right",props:{textAlign:"right"}},{label:"With text-decoration",props:{textDecoration:"underline"}},{label:"Transformed to uppercase",props:{textTransform:"uppercase"}},{label:"With text-shadow",props:{textShadow:`2px 2px ${_canvasTokensWeb.system.color.static.blue.soft}`}},{label:"With white-space changed to nowrap",props:{whiteSpace:"nowrap"}},{label:"With word-break changed to break-all",props:{wordBreak:"break-all"}}],columnProps:[{label:"Examples",props:{}}],children:props=>(0,_jsxRuntime.jsx)(_layout.Box,{width:350,children:(0,_jsxRuntime.jsx)(_.Text,{as:"p",...props,children:"Lorem ipsum dolor sit amet, consectetur adipiscing elit."})})})})},exports.TitleStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"Small Size",props:{size:"small"}},{label:"Medium Size",props:{size:"medium"}},{label:"Large Size",props:{size:"large"}}],columnProps:[{label:"Default",props:{}},{label:"Hint variant",props:{variant:"hint"}},{label:"Error variant",props:{variant:"error"}},{label:"Inverse variant",props:{variant:"inverse"}}],children:props=>(0,_jsxRuntime.jsx)(_layout.Box,{className:"inverse"===props.variant?inverseBackground:"",children:(0,_jsxRuntime.jsx)(_.Title,{...props,children:"Lorem ipsum title."})})})})},exports.HeadingStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"Small Size",props:{size:"small"}},{label:"Medium Size",props:{size:"medium"}},{label:"Large Size",props:{size:"large"}}],columnProps:[{label:"Examples",props:{}},{label:"Hint variant",props:{variant:"hint"}},{label:"Error variant",props:{variant:"error"}},{label:"Inverse variant",props:{variant:"inverse"}}],children:props=>(0,_jsxRuntime.jsx)(_layout.Box,{className:"inverse"===props.variant?inverseBackground:"",children:(0,_jsxRuntime.jsx)(_.Heading,{...props,children:"Lorem ipsum title."})})})})},exports.SubtextStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"Small Size",props:{size:"small"}},{label:"Medium Size",props:{size:"medium"}},{label:"Large Size",props:{size:"large"}}],columnProps:[{label:"Examples",props:{}},{label:"Hint variant",props:{variant:"hint"}},{label:"Error variant",props:{variant:"error"}},{label:"Inverse variant",props:{variant:"inverse"}}],children:props=>(0,_jsxRuntime.jsx)(_layout.Box,{className:"inverse"===props.variant?inverseBackground:"",children:(0,_jsxRuntime.jsx)(_.Subtext,{...props,children:"Lorem ipsum title."})})})})},exports.BodyTextStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"Small Size",props:{size:"small"}},{label:"Medium Size",props:{size:"medium"}},{label:"Large Size",props:{size:"large"}}],columnProps:[{label:"Examples",props:{}},{label:"Hint variant",props:{variant:"hint"}},{label:"Error variant",props:{variant:"error"}},{label:"Inverse variant",props:{variant:"inverse"}}],children:props=>(0,_jsxRuntime.jsx)(_layout.Box,{className:"inverse"===props.variant?inverseBackground:"",children:(0,_jsxRuntime.jsx)(_.BodyText,{...props,children:"Lorem ipsum title."})})})})},exports.LabelStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"Default",props:{}},{label:"Disabled",props:{disabled:!0}}],columnProps:[{label:"Examples",props:{}},{label:"Hint variant",props:{variant:"hint"}},{label:"Error variant",props:{variant:"error"}},{label:"Inverse variant",props:{variant:"inverse"}}],children:props=>(0,_jsxRuntime.jsx)(_layout.Box,{className:"inverse"===props.variant?inverseBackground:"",children:(0,_jsxRuntime.jsx)(_.LabelText,{...props,children:"Lorem ipsum title."})})})})};module.exports.__namedExportsOrder=["TitleStates","TextStates","SubtextStates","LabelStates","HeadingStates","BodyTextStates"]}}]);