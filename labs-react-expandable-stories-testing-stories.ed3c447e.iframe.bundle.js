"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[3761],{"./modules/labs-react/expandable/stories/testing.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.EndIcon=exports.StartIcon=exports.default=void 0;var _react=function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}(__webpack_require__("./node_modules/react/index.js")),_common=__webpack_require__("./modules/react/common/index.ts"),_testing=__webpack_require__("./modules/react/testing/index.ts"),_storybook=__webpack_require__("./utils/storybook/index.ts"),_expandable=__webpack_require__("./modules/labs-react/expandable/index.ts"),_disclosure=__webpack_require__("./modules/react/disclosure/index.ts");(0,_storybook.withSnapshotsEnabled)({title:"Testing/Labs/Expandable",component:_expandable.Expandable});var _default={title:"Testing/Labs/Expandable",component:_expandable.Expandable,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import React from 'react';\\n\\nimport {CanvasProvider, ContentDirection} from '@workday/canvas-kit-react/common';\\nimport {StaticStates, ComponentStatesTable} from '@workday/canvas-kit-react/testing';\\nimport {withSnapshotsEnabled} from '../../../../utils/storybook';\\n\\nimport {Expandable} from '@workday/canvas-kit-labs-react/expandable';\\nimport {useDisclosureModel} from '@workday/canvas-kit-react/disclosure';\\nimport {Meta} from '@storybook/react';\\n\\nconst meta: Meta = withSnapshotsEnabled({\\n  title: 'Testing/Labs/Expandable',\\n  component: Expandable,\\n});\\n\\n// export default meta;\\n\\nexport default {\\n  title: 'Testing/Labs/Expandable',\\n  component: Expandable,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const StartIcon = () => {\\n  const model = useDisclosureModel();\\n\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'No Avatar', props: {}},\\n          {label: 'Avatar', props: {avatar: true}},\\n          {label: 'Depth', props: {depth: 3}},\\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Closed',\\n            props: {visibility: 'hidden', id: '1'},\\n          },\\n          {\\n            label: 'Opened',\\n            props: {visibility: 'visible', id: '1'},\\n          },\\n        ]}\\n      >\\n        {props => {\\n          const state = {visibility: props.visibility, id: props.id};\\n\\n          return (\\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\\n              <Expandable depth={props?.depth} model={{...model, state}}>\\n                <Expandable.Target headingLevel=\\\"h2\\\">\\n                  <Expandable.Icon iconPosition=\\\"start\\\" />\\n                  {props.avatar && <Expandable.Avatar />}\\n                  <Expandable.Title>Hello</Expandable.Title>\\n                </Expandable.Target>\\n                <Expandable.Content>Content</Expandable.Content>\\n              </Expandable>\\n            </CanvasProvider>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\\nexport const EndIcon = () => {\\n  const model = useDisclosureModel();\\n\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'No Avatar', props: {}},\\n          {label: 'Avatar', props: {avatar: true}},\\n          {label: 'Depth', props: {depth: 3}},\\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Closed',\\n            props: {visibility: 'hidden', id: '1'},\\n          },\\n          {\\n            label: 'Opened',\\n            props: {visibility: 'visible', id: '1'},\\n          },\\n        ]}\\n      >\\n        {props => {\\n          const state = {visibility: props.visibility, id: props.id};\\n\\n          return (\\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\\n              <Expandable depth={props?.depth} model={{...model, state}}>\\n                <Expandable.Target headingLevel=\\\"h3\\\">\\n                  {props?.avatar && <Expandable.Avatar />}\\n                  <Expandable.Title>Hello</Expandable.Title>\\n                  <Expandable.Icon iconPosition=\\\"end\\\" />\\n                </Expandable.Target>\\n                <Expandable.Content>Content</Expandable.Content>\\n              </Expandable>\\n            </CanvasProvider>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"StartIcon\": {\n    \"startLoc\": {\n      \"col\": 25,\n      \"line\": 28\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 70\n    },\n    \"startBody\": {\n      \"col\": 25,\n      \"line\": 28\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 70\n    }\n  },\n  \"EndIcon\": {\n    \"startLoc\": {\n      \"col\": 23,\n      \"line\": 72\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 114\n    },\n    \"startBody\": {\n      \"col\": 23,\n      \"line\": 72\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 114\n    }\n  }\n};\n    \nimport React from 'react';\n\nimport {CanvasProvider, ContentDirection} from '@workday/canvas-kit-react/common';\nimport {StaticStates, ComponentStatesTable} from '@workday/canvas-kit-react/testing';\nimport {withSnapshotsEnabled} from '../../../../utils/storybook';\n\nimport {Expandable} from '@workday/canvas-kit-labs-react/expandable';\nimport {useDisclosureModel} from '@workday/canvas-kit-react/disclosure';\nimport {Meta} from '@storybook/react';\n\nconst meta: Meta = withSnapshotsEnabled({\n  title: 'Testing/Labs/Expandable',\n  component: Expandable,\n});\n\n// export default meta;\n\nexport default {\n  title: 'Testing/Labs/Expandable',\n  component: Expandable,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import React from 'react';\\n\\nimport {CanvasProvider, ContentDirection} from '@workday/canvas-kit-react/common';\\nimport {StaticStates, ComponentStatesTable} from '@workday/canvas-kit-react/testing';\\nimport {withSnapshotsEnabled} from '../../../../utils/storybook';\\n\\nimport {Expandable} from '@workday/canvas-kit-labs-react/expandable';\\nimport {useDisclosureModel} from '@workday/canvas-kit-react/disclosure';\\nimport {Meta} from '@storybook/react';\\n\\nconst meta: Meta = withSnapshotsEnabled({\\n  title: 'Testing/Labs/Expandable',\\n  component: Expandable,\\n});\\n\\n// export default meta;\\n\\nexport default {\\n  title: 'Testing/Labs/Expandable',\\n  component: Expandable,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const StartIcon = () => {\\n  const model = useDisclosureModel();\\n\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'No Avatar', props: {}},\\n          {label: 'Avatar', props: {avatar: true}},\\n          {label: 'Depth', props: {depth: 3}},\\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Closed',\\n            props: {visibility: 'hidden', id: '1'},\\n          },\\n          {\\n            label: 'Opened',\\n            props: {visibility: 'visible', id: '1'},\\n          },\\n        ]}\\n      >\\n        {props => {\\n          const state = {visibility: props.visibility, id: props.id};\\n\\n          return (\\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\\n              <Expandable depth={props?.depth} model={{...model, state}}>\\n                <Expandable.Target headingLevel=\\\"h2\\\">\\n                  <Expandable.Icon iconPosition=\\\"start\\\" />\\n                  {props.avatar && <Expandable.Avatar />}\\n                  <Expandable.Title>Hello</Expandable.Title>\\n                </Expandable.Target>\\n                <Expandable.Content>Content</Expandable.Content>\\n              </Expandable>\\n            </CanvasProvider>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\\nexport const EndIcon = () => {\\n  const model = useDisclosureModel();\\n\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'No Avatar', props: {}},\\n          {label: 'Avatar', props: {avatar: true}},\\n          {label: 'Depth', props: {depth: 3}},\\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\\n        ]}\\n        columnProps={[\\n          {\\n            label: 'Closed',\\n            props: {visibility: 'hidden', id: '1'},\\n          },\\n          {\\n            label: 'Opened',\\n            props: {visibility: 'visible', id: '1'},\\n          },\\n        ]}\\n      >\\n        {props => {\\n          const state = {visibility: props.visibility, id: props.id};\\n\\n          return (\\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\\n              <Expandable depth={props?.depth} model={{...model, state}}>\\n                <Expandable.Target headingLevel=\\\"h3\\\">\\n                  {props?.avatar && <Expandable.Avatar />}\\n                  <Expandable.Title>Hello</Expandable.Title>\\n                  <Expandable.Icon iconPosition=\\\"end\\\" />\\n                </Expandable.Target>\\n                <Expandable.Content>Content</Expandable.Content>\\n              </Expandable>\\n            </CanvasProvider>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\",\n    \"locationsMap\": {\n      \"start-icon\": {\n        \"startLoc\": {\n          \"col\": 25,\n          \"line\": 28\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 70\n        },\n        \"startBody\": {\n          \"col\": 25,\n          \"line\": 28\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 70\n        }\n      },\n      \"end-icon\": {\n        \"startLoc\": {\n          \"col\": 23,\n          \"line\": 72\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 114\n        },\n        \"startBody\": {\n          \"col\": 23,\n          \"line\": 72\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 114\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const StartIcon = () => {\n  const model = useDisclosureModel();\n\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'No Avatar', props: {}},\n          {label: 'Avatar', props: {avatar: true}},\n          {label: 'Depth', props: {depth: 3}},\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\n        ]}\n        columnProps={[\n          {\n            label: 'Closed',\n            props: {visibility: 'hidden', id: '1'},\n          },\n          {\n            label: 'Opened',\n            props: {visibility: 'visible', id: '1'},\n          },\n        ]}\n      >\n        {props => {\n          const state = {visibility: props.visibility, id: props.id};\n\n          return (\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\n              <Expandable depth={props?.depth} model={{...model, state}}>\n                <Expandable.Target headingLevel=\"h2\">\n                  <Expandable.Icon iconPosition=\"start\" />\n                  {props.avatar && <Expandable.Avatar />}\n                  <Expandable.Title>Hello</Expandable.Title>\n                </Expandable.Target>\n                <Expandable.Content>Content</Expandable.Content>\n              </Expandable>\n            </CanvasProvider>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};;\n\nexport const EndIcon = () => {\n  const model = useDisclosureModel();\n\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'No Avatar', props: {}},\n          {label: 'Avatar', props: {avatar: true}},\n          {label: 'Depth', props: {depth: 3}},\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\n        ]}\n        columnProps={[\n          {\n            label: 'Closed',\n            props: {visibility: 'hidden', id: '1'},\n          },\n          {\n            label: 'Opened',\n            props: {visibility: 'visible', id: '1'},\n          },\n        ]}\n      >\n        {props => {\n          const state = {visibility: props.visibility, id: props.id};\n\n          return (\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\n              <Expandable depth={props?.depth} model={{...model, state}}>\n                <Expandable.Target headingLevel=\"h3\">\n                  {props?.avatar && <Expandable.Avatar />}\n                  <Expandable.Title>Hello</Expandable.Title>\n                  <Expandable.Icon iconPosition=\"end\" />\n                </Expandable.Target>\n                <Expandable.Content>Content</Expandable.Content>\n              </Expandable>\n            </CanvasProvider>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};\n",locationsMap:{"start-icon":{startLoc:{col:25,line:115},endLoc:{col:1,line:157},startBody:{col:25,line:115},endBody:{col:1,line:157}},"end-icon":{startLoc:{col:23,line:159},endLoc:{col:1,line:201},startBody:{col:23,line:159},endBody:{col:1,line:201}}}},storySource:{source:"import React from 'react';\n\nimport {CanvasProvider, ContentDirection} from '@workday/canvas-kit-react/common';\nimport {StaticStates, ComponentStatesTable} from '@workday/canvas-kit-react/testing';\nimport {withSnapshotsEnabled} from '../../../../utils/storybook';\n\nimport {Expandable} from '@workday/canvas-kit-labs-react/expandable';\nimport {useDisclosureModel} from '@workday/canvas-kit-react/disclosure';\nimport {Meta} from '@storybook/react';\n\nconst meta: Meta = withSnapshotsEnabled({\n  title: 'Testing/Labs/Expandable',\n  component: Expandable,\n});\n\n// export default meta;\n\nexport default {\n  title: 'Testing/Labs/Expandable',\n  component: Expandable,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const StartIcon = () => {\n  const model = useDisclosureModel();\n\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'No Avatar', props: {}},\n          {label: 'Avatar', props: {avatar: true}},\n          {label: 'Depth', props: {depth: 3}},\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\n        ]}\n        columnProps={[\n          {\n            label: 'Closed',\n            props: {visibility: 'hidden', id: '1'},\n          },\n          {\n            label: 'Opened',\n            props: {visibility: 'visible', id: '1'},\n          },\n        ]}\n      >\n        {props => {\n          const state = {visibility: props.visibility, id: props.id};\n\n          return (\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\n              <Expandable depth={props?.depth} model={{...model, state}}>\n                <Expandable.Target headingLevel=\"h2\">\n                  <Expandable.Icon iconPosition=\"start\" />\n                  {props.avatar && <Expandable.Avatar />}\n                  <Expandable.Title>Hello</Expandable.Title>\n                </Expandable.Target>\n                <Expandable.Content>Content</Expandable.Content>\n              </Expandable>\n            </CanvasProvider>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};\n\nexport const EndIcon = () => {\n  const model = useDisclosureModel();\n\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'No Avatar', props: {}},\n          {label: 'Avatar', props: {avatar: true}},\n          {label: 'Depth', props: {depth: 3}},\n          {label: 'RTL', props: {direction: ContentDirection.RTL}},\n        ]}\n        columnProps={[\n          {\n            label: 'Closed',\n            props: {visibility: 'hidden', id: '1'},\n          },\n          {\n            label: 'Opened',\n            props: {visibility: 'visible', id: '1'},\n          },\n        ]}\n      >\n        {props => {\n          const state = {visibility: props.visibility, id: props.id};\n\n          return (\n            <CanvasProvider theme={{canvas: {direction: props?.direction}}}>\n              <Expandable depth={props?.depth} model={{...model, state}}>\n                <Expandable.Target headingLevel=\"h3\">\n                  {props?.avatar && <Expandable.Avatar />}\n                  <Expandable.Title>Hello</Expandable.Title>\n                  <Expandable.Icon iconPosition=\"end\" />\n                </Expandable.Target>\n                <Expandable.Content>Content</Expandable.Content>\n              </Expandable>\n            </CanvasProvider>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};\n",locationsMap:{"start-icon":{startLoc:{col:25,line:28},endLoc:{col:1,line:70},startBody:{col:25,line:28},endBody:{col:1,line:70}},"end-icon":{startLoc:{col:23,line:72},endLoc:{col:1,line:114},startBody:{col:23,line:72},endBody:{col:1,line:114}}}},chromatic:{disable:!1}}};exports.default=_default;const StartIcon=()=>{const model=(0,_disclosure.useDisclosureModel)();return _react.default.createElement(_testing.StaticStates,null,_react.default.createElement(_testing.ComponentStatesTable,{rowProps:[{label:"No Avatar",props:{}},{label:"Avatar",props:{avatar:!0}},{label:"Depth",props:{depth:3}},{label:"RTL",props:{direction:_common.ContentDirection.RTL}}],columnProps:[{label:"Closed",props:{visibility:"hidden",id:"1"}},{label:"Opened",props:{visibility:"visible",id:"1"}}]},(props=>{const state={visibility:props.visibility,id:props.id};return _react.default.createElement(_common.CanvasProvider,{theme:{canvas:{direction:null==props?void 0:props.direction}}},_react.default.createElement(_expandable.Expandable,{depth:null==props?void 0:props.depth,model:{...model,state}},_react.default.createElement(_expandable.Expandable.Target,{headingLevel:"h2"},_react.default.createElement(_expandable.Expandable.Icon,{iconPosition:"start"}),props.avatar&&_react.default.createElement(_expandable.Expandable.Avatar,null),_react.default.createElement(_expandable.Expandable.Title,null,"Hello")),_react.default.createElement(_expandable.Expandable.Content,null,"Content")))})))};exports.StartIcon=StartIcon,StartIcon.displayName="StartIcon";const EndIcon=()=>{const model=(0,_disclosure.useDisclosureModel)();return _react.default.createElement(_testing.StaticStates,null,_react.default.createElement(_testing.ComponentStatesTable,{rowProps:[{label:"No Avatar",props:{}},{label:"Avatar",props:{avatar:!0}},{label:"Depth",props:{depth:3}},{label:"RTL",props:{direction:_common.ContentDirection.RTL}}],columnProps:[{label:"Closed",props:{visibility:"hidden",id:"1"}},{label:"Opened",props:{visibility:"visible",id:"1"}}]},(props=>{const state={visibility:props.visibility,id:props.id};return _react.default.createElement(_common.CanvasProvider,{theme:{canvas:{direction:null==props?void 0:props.direction}}},_react.default.createElement(_expandable.Expandable,{depth:null==props?void 0:props.depth,model:{...model,state}},_react.default.createElement(_expandable.Expandable.Target,{headingLevel:"h3"},(null==props?void 0:props.avatar)&&_react.default.createElement(_expandable.Expandable.Avatar,null),_react.default.createElement(_expandable.Expandable.Title,null,"Hello"),_react.default.createElement(_expandable.Expandable.Icon,{iconPosition:"end"})),_react.default.createElement(_expandable.Expandable.Content,null,"Content")))})))};exports.EndIcon=EndIcon,EndIcon.displayName="EndIcon",module.exports.__namedExportsOrder=["EndIcon","StartIcon"]}}]);