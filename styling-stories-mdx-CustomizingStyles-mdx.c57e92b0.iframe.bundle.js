"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[2378],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{BN:()=>MDXContext,RP:()=>useMDXComponents,gz:()=>withMDXComponents,xA:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./node_modules/@storybook/addon-docs/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W8:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.W8});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./modules/styling/stories/mdx/CustomizingStyles.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs");function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",ul:"ul",li:"li",a:"a",h2:"h2",h3:"h3",code:"code",pre:"pre",blockquote:"blockquote",strong:"strong"},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__.RP)(),props.components);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.W8,{title:"Styling/Guides/Customizing Styles"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"how-to-customize-styles",children:"How To Customize Styles"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"There are multiple ways to customize styles for components within Canvas Kit. The approach you\nchoose will depend on your use case. Ranging from some simple overrides to fully custom solutions,\nhere are the following options:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#createstyles",children:"Create Styles"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#stencils",children:"Stencils"})}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"create-styles",children:"Create Styles"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.h3,{id:"using-createstyles-with-cs-prop",children:["Using ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createStyles"})," with ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"cs"})," prop"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Use ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createStyles"})," in tandem with ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"cs"})," prop when you're overriding static styles and making small\nmodifications to an existing Canvas Kit component like padding, color and flex properties. Take our\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Text"})," component as an example."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"import {createStyles} from '@Workday/canvas-kit-styling';\nimport {system} from '@Workday/canvas-tokens-web';\nimport {Text} from '@Workday/canvas-kit-react/text';\n\nconst uppercaseTextStyles = createStyles({\n  textTransform: 'uppercase',\n  margin: system.space.x4\n})\n//...\n<Text cs={uppercaseTextStyles}>My uppercased text</Text>;\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.blockquote,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Note:"})," ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createStyles"})," handles wrapping our token variables in ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"var(--${token})"})]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["You can also apply styles created via ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createStyles"})," via ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"className"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"import {createStyles} from '@Workday/canvas-kit-styling';\nimport {system} from '@Workday/canvas-tokens-web';\nimport {Text} from '@Workday/canvas-kit-react/text';\n\nconst uppercaseTextStyles = createStyles({\n  textTransform: 'uppercase',\n  margin: system.space.x4\n})\n//...\n<Text className={uppercaseTextStyles}>My uppercased text</Text>;\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["If you need to dynamically apply styles based on some state or prop, use ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"#stencils",children:"Stencils"}),"\ninstead."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"stencils",children:"Stencils"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Stencils can be useful when applying dynamic styles or building your own reusable component."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"extending-stencils",children:"Extending Stencils"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://workday.github.io/canvas-kit/?path=/docs/styling-getting-started-create-stencil--docs",target:"_blank",rel:"nofollow noopener noreferrer",children:"Stencils"}),"\nhelp you organize the styling of reusable components into base styles, modifiers, and variables. The\norganization makes it more natural to produce static and clean CSS with optional extraction into CSS\nfiles."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Stencils that define variables, modifiers and base styles can be extended to create your own\nreusable component using Canvas Kit styles."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["If we take ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"SystemIcon"})," component as an example, it defines ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"systemIconStencil"})," which defines styles\nfor an icon. This stencil can be extended to build a custom icon component for your use case."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Before v11"})," you'd have to use ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"systemIconStyles"})," function to overwrite styles for an icon:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// Before v11\nimport {systemIconStyles} from '@workday/canvas-kit-react';\nimport {space} from '@workday/canvas-kit-react/tokens'; // old tokens\n\n// old way of styling with Emotion styled\nconst StyledNavIcon = styled('span')(({size, iconStyles}){\n  display: 'inline-flex',\n  pointerEvents: 'unset',\n  margin: `${space.xxxs} ${space.xxxs} 0 0`,\n  padding: '0',\n  'svg': {\n    ...iconStyles,\n    width: size,\n    height: size,\n  }\n});\n\nconst NavIcon = ({iconColor, iconHover, iconBackground, iconBackgroundHover, icon, size}) => {\n  // old way of styling with systemIconStyles function\n  // systemIconStyles is deprecated in v11\n  const iconStyles = systemIconStyles({\n    fill: iconColor,\n    fillHover: iconHover,\n    background: iconBackground,\n    backgroundHover: iconBackgroundHover,\n  });\n\n  // insert icon function used by platform or any other functionality here\n\n  return (\n    <StyledNavIcon\n      icon={icon}\n      size={size}\n      iconStyles={iconStyles}\n    />\n  );\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"In v11"})," you'd extend ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"systemIconStencil"})," to reuse its styles:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"// v11\nimport {createStencil} from '@workday/canvas-kit-styling';\nimport {system} from '@workday/canvas-tokens-web';\nimport {systemIconStencil} from '@workday/canvas-kit-react/icon';\n\nconst navIconStencil = createStencil({\n  // We extend `systemIconStencil` to inherit it's base styles, modifiers and variables so that we can customize it\n  extends: systemIconStencil,\n  vars: {\n    // These variables support our styling iconHover and iconBackgroundHover\n    // they can be removed later and overwritten by `cs`.\n    // Also note the variables have no value. This allows for cascading styles.\n    fillHover: '',\n    backgroundHover: '',\n  },\n  base: ({fillHover, backgroundHover}) => ({\n    display: 'inline-flex',\n    pointerEvents: 'unset',\n    // instead of using our old tokens it's better to use our new system tokens\n    margin: `${system.space.x1} ${system.space.x1} 0 0`,\n    padding: '0',\n    '&:hover, &.hover': {\n      // systemIconStencil doesn't have hover specific variables\n      // so we reassigned color and backgroundColor variables using pseudo-selector\n      [systemIconStencil.vars.color]: fillHover,\n      [systemIconStencil.vars.backgroundColor]: backgroundHover,\n    },\n  }),\n});\n\n// Your reusable NavIcon component using Stencils\nconst NavIcon = ({\n  iconColor,\n  iconHover,\n  iconBackground,\n  iconBackgroundHover,\n  icon,\n  size,\n  ...elemProps\n}) => {\n  // insert icon function used by platform or any other functionality here\n\n  return (\n    <span\n      icon={icon}\n      {...handleCsProp(\n        elemProps,\n        navIconStencil({\n          // Because we're extending systemIconStencil, it already has a size prop and applies size to the svg's width and height\n          // so we don't need to set these variables in our navIconStencil\n          size,\n          // systemIconStencil already has color (for icon fill) and backgroundColor variables\n          // so we assigned them to our prop values\n          color: iconColor,\n          backgroundColor: iconBackground,\n          fillHover: iconHover,\n          backgroundHover: iconBackgroundHover,\n        })\n      )}\n    />\n  );\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Another example of Stencil extension and customization is our\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://workday.github.io/canvas-kit/?path=/story/components-buttons--docs#custom-styles",target:"_blank",rel:"nofollow noopener noreferrer",children:"CustomButton"}),"\nexample. This example highlights the power of inheritance that you get from extending stencils."]})]})}const __WEBPACK_DEFAULT_EXPORT__=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_3__.RP)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,Object.assign({},props,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);