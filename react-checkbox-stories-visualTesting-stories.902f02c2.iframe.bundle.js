"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[2089],{"./modules/react/checkbox/stories/visualTesting.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.InverseCheckboxThemedStates=exports.InverseCheckboxStates=exports.CheckboxThemedStates=exports.CheckboxStates=void 0;(function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n})(__webpack_require__("./node_modules/react/index.js"));var _testing=__webpack_require__("./modules/react/testing/index.ts"),_storybook=__webpack_require__("./utils/storybook/index.ts"),_checkbox=__webpack_require__("./modules/react/checkbox/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}exports.default={title:"Testing/Inputs/Checkbox",component:_checkbox.Checkbox,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import * as React from 'react';\\n\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {customColorTheme} from '../../../../utils/storybook';\\n\\nimport {Checkbox} from '@workday/canvas-kit-react/checkbox';\\n\\nexport default {\\n  title: 'Testing/Inputs/Checkbox',\\n  component: Checkbox,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const CheckboxStates = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps(\\n        {\\n          checked: [\\n            {value: true, label: 'Checked'},\\n            {value: false, label: 'Unchecked'},\\n          ],\\n          indeterminate: [\\n            {value: true, label: 'Indeterminate'},\\n            {value: false, label: ''},\\n          ],\\n          error: [\\n            {value: undefined, label: ''},\\n            {value: Checkbox.ErrorType.Caution, label: 'Caution'},\\n            {value: Checkbox.ErrorType.Error, label: 'Error'},\\n          ],\\n        },\\n        props => {\\n          if (props.indeterminate && !props.checked) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n      columnProps={permutateProps(\\n        {\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n          ],\\n          disabled: [\\n            {label: '', value: false},\\n            {label: 'Disabled', value: true},\\n          ],\\n        },\\n        props => {\\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n    >\\n      {props => (\\n        <Checkbox\\n          {...props}\\n          onChange={() => {}} // eslint-disable-line no-empty-function\\n          label=\\\"Checkbox\\\"\\n        />\\n      )}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\\nexport const InverseCheckboxStates = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps(\\n        {\\n          checked: [\\n            {value: true, label: 'Checked'},\\n            {value: false, label: 'Unchecked'},\\n          ],\\n          indeterminate: [\\n            {value: true, label: 'Indeterminate'},\\n            {value: false, label: ''},\\n          ],\\n          error: [\\n            {value: undefined, label: ''},\\n            {value: Checkbox.ErrorType.Caution, label: 'Caution'},\\n            {value: Checkbox.ErrorType.Error, label: 'Error'},\\n          ],\\n        },\\n        props => {\\n          if (props.indeterminate && !props.checked) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n      columnProps={permutateProps(\\n        {\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n          ],\\n          disabled: [\\n            {label: '', value: false},\\n            {label: 'Disabled', value: true},\\n          ],\\n        },\\n        props => {\\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n    >\\n      {props => (\\n        <div style={{backgroundColor: '#0875e1', padding: '12px', borderRadius: '4px'}}>\\n          <Checkbox\\n            {...props}\\n            onChange={() => {}} // eslint-disable-line no-empty-function\\n            variant=\\\"inverse\\\"\\n            label=\\\"Checkbox\\\"\\n          />\\n        </div>\\n      )}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\\nexport const CheckboxThemedStates = () => <CheckboxStates />;\\nCheckboxThemedStates.parameters = {\\n  canvasProviderDecorator: {\\n    theme: customColorTheme,\\n  },\\n};\\n\\nexport const InverseCheckboxThemedStates = () => <InverseCheckboxStates />;\\nInverseCheckboxThemedStates.parameters = {\\n  canvasProviderDecorator: {\\n    theme: customColorTheme,\\n  },\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"CheckboxStates\": {\n    \"startLoc\": {\n      \"col\": 30,\n      \"line\": 22\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 80\n    },\n    \"startBody\": {\n      \"col\": 30,\n      \"line\": 22\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 80\n    }\n  },\n  \"InverseCheckboxStates\": {\n    \"startLoc\": {\n      \"col\": 37,\n      \"line\": 82\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 143\n    },\n    \"startBody\": {\n      \"col\": 37,\n      \"line\": 82\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 143\n    }\n  },\n  \"CheckboxThemedStates\": {\n    \"startLoc\": {\n      \"col\": 36,\n      \"line\": 145\n    },\n    \"endLoc\": {\n      \"col\": 60,\n      \"line\": 145\n    },\n    \"startBody\": {\n      \"col\": 36,\n      \"line\": 145\n    },\n    \"endBody\": {\n      \"col\": 60,\n      \"line\": 145\n    }\n  },\n  \"InverseCheckboxThemedStates\": {\n    \"startLoc\": {\n      \"col\": 43,\n      \"line\": 152\n    },\n    \"endLoc\": {\n      \"col\": 74,\n      \"line\": 152\n    },\n    \"startBody\": {\n      \"col\": 43,\n      \"line\": 152\n    },\n    \"endBody\": {\n      \"col\": 74,\n      \"line\": 152\n    }\n  }\n};\n    \nimport * as React from 'react';\n\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {customColorTheme} from '../../../../utils/storybook';\n\nimport {Checkbox} from '@workday/canvas-kit-react/checkbox';\n\nexport default {\n  title: 'Testing/Inputs/Checkbox',\n  component: Checkbox,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import * as React from 'react';\\n\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {customColorTheme} from '../../../../utils/storybook';\\n\\nimport {Checkbox} from '@workday/canvas-kit-react/checkbox';\\n\\nexport default {\\n  title: 'Testing/Inputs/Checkbox',\\n  component: Checkbox,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const CheckboxStates = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps(\\n        {\\n          checked: [\\n            {value: true, label: 'Checked'},\\n            {value: false, label: 'Unchecked'},\\n          ],\\n          indeterminate: [\\n            {value: true, label: 'Indeterminate'},\\n            {value: false, label: ''},\\n          ],\\n          error: [\\n            {value: undefined, label: ''},\\n            {value: Checkbox.ErrorType.Caution, label: 'Caution'},\\n            {value: Checkbox.ErrorType.Error, label: 'Error'},\\n          ],\\n        },\\n        props => {\\n          if (props.indeterminate && !props.checked) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n      columnProps={permutateProps(\\n        {\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n          ],\\n          disabled: [\\n            {label: '', value: false},\\n            {label: 'Disabled', value: true},\\n          ],\\n        },\\n        props => {\\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n    >\\n      {props => (\\n        <Checkbox\\n          {...props}\\n          onChange={() => {}} \\n          label=\\\"Checkbox\\\"\\n        />\\n      )}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\\nexport const InverseCheckboxStates = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps(\\n        {\\n          checked: [\\n            {value: true, label: 'Checked'},\\n            {value: false, label: 'Unchecked'},\\n          ],\\n          indeterminate: [\\n            {value: true, label: 'Indeterminate'},\\n            {value: false, label: ''},\\n          ],\\n          error: [\\n            {value: undefined, label: ''},\\n            {value: Checkbox.ErrorType.Caution, label: 'Caution'},\\n            {value: Checkbox.ErrorType.Error, label: 'Error'},\\n          ],\\n        },\\n        props => {\\n          if (props.indeterminate && !props.checked) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n      columnProps={permutateProps(\\n        {\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n          ],\\n          disabled: [\\n            {label: '', value: false},\\n            {label: 'Disabled', value: true},\\n          ],\\n        },\\n        props => {\\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\\n            return false;\\n          }\\n          return true;\\n        }\\n      )}\\n    >\\n      {props => (\\n        <div style={{backgroundColor: '#0875e1', padding: '12px', borderRadius: '4px'}}>\\n          <Checkbox\\n            {...props}\\n            onChange={() => {}} \\n            variant=\\\"inverse\\\"\\n            label=\\\"Checkbox\\\"\\n          />\\n        </div>\\n      )}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\\nexport const CheckboxThemedStates = () => <CheckboxStates />;\\nCheckboxThemedStates.parameters = {\\n  canvasProviderDecorator: {\\n    theme: customColorTheme,\\n  },\\n};\\n\\nexport const InverseCheckboxThemedStates = () => <InverseCheckboxStates />;\\nInverseCheckboxThemedStates.parameters = {\\n  canvasProviderDecorator: {\\n    theme: customColorTheme,\\n  },\\n};\\n\",\n    \"locationsMap\": {\n      \"checkbox-states\": {\n        \"startLoc\": {\n          \"col\": 30,\n          \"line\": 22\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 80\n        },\n        \"startBody\": {\n          \"col\": 30,\n          \"line\": 22\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 80\n        }\n      },\n      \"inverse-checkbox-states\": {\n        \"startLoc\": {\n          \"col\": 37,\n          \"line\": 82\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 143\n        },\n        \"startBody\": {\n          \"col\": 37,\n          \"line\": 82\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 143\n        }\n      },\n      \"checkbox-themed-states\": {\n        \"startLoc\": {\n          \"col\": 36,\n          \"line\": 145\n        },\n        \"endLoc\": {\n          \"col\": 60,\n          \"line\": 145\n        },\n        \"startBody\": {\n          \"col\": 36,\n          \"line\": 145\n        },\n        \"endBody\": {\n          \"col\": 60,\n          \"line\": 145\n        }\n      },\n      \"inverse-checkbox-themed-states\": {\n        \"startLoc\": {\n          \"col\": 43,\n          \"line\": 152\n        },\n        \"endLoc\": {\n          \"col\": 74,\n          \"line\": 152\n        },\n        \"startBody\": {\n          \"col\": 43,\n          \"line\": 152\n        },\n        \"endBody\": {\n          \"col\": 74,\n          \"line\": 152\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const CheckboxStates = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps(\n        {\n          checked: [\n            {value: true, label: 'Checked'},\n            {value: false, label: 'Unchecked'},\n          ],\n          indeterminate: [\n            {value: true, label: 'Indeterminate'},\n            {value: false, label: ''},\n          ],\n          error: [\n            {value: undefined, label: ''},\n            {value: Checkbox.ErrorType.Caution, label: 'Caution'},\n            {value: Checkbox.ErrorType.Error, label: 'Error'},\n          ],\n        },\n        props => {\n          if (props.indeterminate && !props.checked) {\n            return false;\n          }\n          return true;\n        }\n      )}\n      columnProps={permutateProps(\n        {\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n          ],\n          disabled: [\n            {label: '', value: false},\n            {label: 'Disabled', value: true},\n          ],\n        },\n        props => {\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\n            return false;\n          }\n          return true;\n        }\n      )}\n    >\n      {props => (\n        <Checkbox\n          {...props}\n          onChange={() => {}} \n          label=\"Checkbox\"\n        />\n      )}\n    </ComponentStatesTable>\n  </StaticStates>\n);;\n\nexport const InverseCheckboxStates = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps(\n        {\n          checked: [\n            {value: true, label: 'Checked'},\n            {value: false, label: 'Unchecked'},\n          ],\n          indeterminate: [\n            {value: true, label: 'Indeterminate'},\n            {value: false, label: ''},\n          ],\n          error: [\n            {value: undefined, label: ''},\n            {value: Checkbox.ErrorType.Caution, label: 'Caution'},\n            {value: Checkbox.ErrorType.Error, label: 'Error'},\n          ],\n        },\n        props => {\n          if (props.indeterminate && !props.checked) {\n            return false;\n          }\n          return true;\n        }\n      )}\n      columnProps={permutateProps(\n        {\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n          ],\n          disabled: [\n            {label: '', value: false},\n            {label: 'Disabled', value: true},\n          ],\n        },\n        props => {\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\n            return false;\n          }\n          return true;\n        }\n      )}\n    >\n      {props => (\n        <div style={{backgroundColor: '#0875e1', padding: '12px', borderRadius: '4px'}}>\n          <Checkbox\n            {...props}\n            onChange={() => {}} \n            variant=\"inverse\"\n            label=\"Checkbox\"\n          />\n        </div>\n      )}\n    </ComponentStatesTable>\n  </StaticStates>\n);;\n\nexport const CheckboxThemedStates = () => <CheckboxStates />;;\nCheckboxThemedStates.parameters = {\n  canvasProviderDecorator: {\n    theme: customColorTheme,\n  },\n};\n\nexport const InverseCheckboxThemedStates = () => <InverseCheckboxStates />;\nInverseCheckboxThemedStates.parameters = {\n  canvasProviderDecorator: {\n    theme: customColorTheme,\n  },\n};\n",locationsMap:{"checkbox-states":{startLoc:{col:30,line:181},endLoc:{col:1,line:239},startBody:{col:30,line:181},endBody:{col:1,line:239}},"inverse-checkbox-states":{startLoc:{col:37,line:241},endLoc:{col:1,line:302},startBody:{col:37,line:241},endBody:{col:1,line:302}},"checkbox-themed-states":{startLoc:{col:36,line:304},endLoc:{col:60,line:304},startBody:{col:36,line:304},endBody:{col:60,line:304}},"inverse-checkbox-themed-states":{startLoc:{col:43,line:311},endLoc:{col:74,line:311},startBody:{col:43,line:311},endBody:{col:74,line:311}}}},storySource:{source:"import * as React from 'react';\n\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {customColorTheme} from '../../../../utils/storybook';\n\nimport {Checkbox} from '@workday/canvas-kit-react/checkbox';\n\nexport default {\n  title: 'Testing/Inputs/Checkbox',\n  component: Checkbox,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const CheckboxStates = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps(\n        {\n          checked: [\n            {value: true, label: 'Checked'},\n            {value: false, label: 'Unchecked'},\n          ],\n          indeterminate: [\n            {value: true, label: 'Indeterminate'},\n            {value: false, label: ''},\n          ],\n          error: [\n            {value: undefined, label: ''},\n            {value: Checkbox.ErrorType.Caution, label: 'Caution'},\n            {value: Checkbox.ErrorType.Error, label: 'Error'},\n          ],\n        },\n        props => {\n          if (props.indeterminate && !props.checked) {\n            return false;\n          }\n          return true;\n        }\n      )}\n      columnProps={permutateProps(\n        {\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n          ],\n          disabled: [\n            {label: '', value: false},\n            {label: 'Disabled', value: true},\n          ],\n        },\n        props => {\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\n            return false;\n          }\n          return true;\n        }\n      )}\n    >\n      {props => (\n        <Checkbox\n          {...props}\n          onChange={() => {}} \n          label=\"Checkbox\"\n        />\n      )}\n    </ComponentStatesTable>\n  </StaticStates>\n);\n\nexport const InverseCheckboxStates = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps(\n        {\n          checked: [\n            {value: true, label: 'Checked'},\n            {value: false, label: 'Unchecked'},\n          ],\n          indeterminate: [\n            {value: true, label: 'Indeterminate'},\n            {value: false, label: ''},\n          ],\n          error: [\n            {value: undefined, label: ''},\n            {value: Checkbox.ErrorType.Caution, label: 'Caution'},\n            {value: Checkbox.ErrorType.Error, label: 'Error'},\n          ],\n        },\n        props => {\n          if (props.indeterminate && !props.checked) {\n            return false;\n          }\n          return true;\n        }\n      )}\n      columnProps={permutateProps(\n        {\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n          ],\n          disabled: [\n            {label: '', value: false},\n            {label: 'Disabled', value: true},\n          ],\n        },\n        props => {\n          if (props.disabled && !['', 'hover'].includes(props.className)) {\n            return false;\n          }\n          return true;\n        }\n      )}\n    >\n      {props => (\n        <div style={{backgroundColor: '#0875e1', padding: '12px', borderRadius: '4px'}}>\n          <Checkbox\n            {...props}\n            onChange={() => {}} \n            variant=\"inverse\"\n            label=\"Checkbox\"\n          />\n        </div>\n      )}\n    </ComponentStatesTable>\n  </StaticStates>\n);\n\nexport const CheckboxThemedStates = () => <CheckboxStates />;\nCheckboxThemedStates.parameters = {\n  canvasProviderDecorator: {\n    theme: customColorTheme,\n  },\n};\n\nexport const InverseCheckboxThemedStates = () => <InverseCheckboxStates />;\nInverseCheckboxThemedStates.parameters = {\n  canvasProviderDecorator: {\n    theme: customColorTheme,\n  },\n};\n",locationsMap:{"checkbox-states":{startLoc:{col:30,line:22},endLoc:{col:1,line:80},startBody:{col:30,line:22},endBody:{col:1,line:80}},"inverse-checkbox-states":{startLoc:{col:37,line:82},endLoc:{col:1,line:143},startBody:{col:37,line:82},endBody:{col:1,line:143}},"checkbox-themed-states":{startLoc:{col:36,line:145},endLoc:{col:60,line:145},startBody:{col:36,line:145},endBody:{col:60,line:145}},"inverse-checkbox-themed-states":{startLoc:{col:43,line:152},endLoc:{col:74,line:152},startBody:{col:43,line:152},endBody:{col:74,line:152}}}},chromatic:{disable:!1}}};const CheckboxStates=()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({checked:[{value:!0,label:"Checked"},{value:!1,label:"Unchecked"}],indeterminate:[{value:!0,label:"Indeterminate"},{value:!1,label:""}],error:[{value:void 0,label:""},{value:_checkbox.Checkbox.ErrorType.Caution,label:"Caution"},{value:_checkbox.Checkbox.ErrorType.Error,label:"Error"}]},(props=>!(props.indeterminate&&!props.checked))),columnProps:(0,_testing.permutateProps)({className:[{label:"Default",value:""},{label:"Hover",value:"hover"},{label:"Focus",value:"focus"},{label:"Focus Hover",value:"focus hover"},{label:"Active",value:"active"},{label:"Active Hover",value:"active hover"}],disabled:[{label:"",value:!1},{label:"Disabled",value:!0}]},(props=>!(props.disabled&&!["","hover"].includes(props.className)))),children:props=>(0,_jsxRuntime.jsx)(_checkbox.Checkbox,{...props,onChange:()=>{},label:"Checkbox"})})});exports.CheckboxStates=CheckboxStates,CheckboxStates.displayName="CheckboxStates";const InverseCheckboxStates=()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({checked:[{value:!0,label:"Checked"},{value:!1,label:"Unchecked"}],indeterminate:[{value:!0,label:"Indeterminate"},{value:!1,label:""}],error:[{value:void 0,label:""},{value:_checkbox.Checkbox.ErrorType.Caution,label:"Caution"},{value:_checkbox.Checkbox.ErrorType.Error,label:"Error"}]},(props=>!(props.indeterminate&&!props.checked))),columnProps:(0,_testing.permutateProps)({className:[{label:"Default",value:""},{label:"Hover",value:"hover"},{label:"Focus",value:"focus"},{label:"Focus Hover",value:"focus hover"},{label:"Active",value:"active"},{label:"Active Hover",value:"active hover"}],disabled:[{label:"",value:!1},{label:"Disabled",value:!0}]},(props=>!(props.disabled&&!["","hover"].includes(props.className)))),children:props=>(0,_jsxRuntime.jsx)("div",{style:{backgroundColor:"#0875e1",padding:"12px",borderRadius:"4px"},children:(0,_jsxRuntime.jsx)(_checkbox.Checkbox,{...props,onChange:()=>{},variant:"inverse",label:"Checkbox"})})})});exports.InverseCheckboxStates=InverseCheckboxStates,InverseCheckboxStates.displayName="InverseCheckboxStates";const CheckboxThemedStates=()=>(0,_jsxRuntime.jsx)(CheckboxStates,{});exports.CheckboxThemedStates=CheckboxThemedStates,CheckboxThemedStates.displayName="CheckboxThemedStates",CheckboxThemedStates.parameters={canvasProviderDecorator:{theme:_storybook.customColorTheme}};const InverseCheckboxThemedStates=()=>(0,_jsxRuntime.jsx)(InverseCheckboxStates,{});exports.InverseCheckboxThemedStates=InverseCheckboxThemedStates,InverseCheckboxThemedStates.displayName="InverseCheckboxThemedStates",InverseCheckboxThemedStates.parameters={canvasProviderDecorator:{theme:_storybook.customColorTheme}},module.exports.__namedExportsOrder=["InverseCheckboxThemedStates","InverseCheckboxStates","CheckboxThemedStates","CheckboxStates"]}}]);