"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[8904],{"./modules/react/table/index.ts":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0});var _Table=__webpack_require__("./modules/react/table/lib/Table.tsx");Object.keys(_Table).forEach((function(key){"default"!==key&&"__esModule"!==key&&(key in exports&&exports[key]===_Table[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _Table[key]}}))}));const __docs=[];var _window$__updateDocs,_window;window.__updateDocs?null===(_window$__updateDocs=(_window=window).__updateDocs)||void 0===_window$__updateDocs||_window$__updateDocs.call(_window,__docs):window.__docs=(window.__docs||[]).concat(__docs)},"./modules/react/table/lib/Table.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.Table=void 0;var _react=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_layout=__webpack_require__("./modules/react/layout/index.ts"),_common=__webpack_require__("./modules/react/common/index.ts"),_TableHead=__webpack_require__("./modules/react/table/lib/TableHead.tsx"),_TableBody=__webpack_require__("./modules/react/table/lib/TableBody.tsx"),_TableRow=__webpack_require__("./modules/react/table/lib/TableRow.tsx"),_TableHeader=__webpack_require__("./modules/react/table/lib/TableHeader.tsx"),_TableCell=__webpack_require__("./modules/react/table/lib/TableCell.tsx"),_TableFooter=__webpack_require__("./modules/react/table/lib/TableFooter.tsx"),_TableCaption=__webpack_require__("./modules/react/table/lib/TableCaption.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const tableStencil=(0,__webpack_require__("./modules/styling/index.ts").createStencil)({base:{name:"yk6v36",styles:"box-sizing:border-box;font-family:var(--cnvs-base-font-family-50);font-weight:var(--cnvs-base-font-weight-400);line-height:var(--cnvs-base-line-height-100);font-size:var(--cnvs-base-font-size-75);letter-spacing:var(--cnvs-base-letter-spacing-150);display:grid;border:0.0625rem solid var(--cnvs-sys-color-border-container);border-radius:var(--cnvs-sys-shape-x2);overflow:auto;color:var(--cnvs-sys-color-text-default);"}},"table-773355"),Table=(0,_common.createComponent)("table")({displayName:"Table",Component:({children,...elemProps},ref,Element)=>_react.default.createElement(Element,_extends({ref},(0,_layout.mergeStyles)(elemProps,tableStencil())),children),subComponents:{Caption:_TableCaption.TableCaption,Head:_TableHead.TableHead,Body:_TableBody.TableBody,Row:_TableRow.TableRow,Header:_TableHeader.TableHeader,Cell:_TableCell.TableCell,Footer:_TableFooter.TableFooter}});exports.Table=Table;const __docs=[{name:"Table",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/Table.tsx",description:"`Table` is a simple styled compound component that renders a [table](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table) element. It is used to present information in a two-dimensional table comprised of rows and columns of cells containing data.\n\n\n```tsx\nimport {Table} from '@workday/canvas-kit-react/table';\n\nexport default function App() {\nreturn (\n <Table>\n   <Table.Caption>Table Caption</Table.Caption>\n   <Table.Head>\n     <Table.Row>\n       <Table.Header>Table Header</Table.Header>\n       <Table.Header>Table Header</Table.Header>\n     </Table.Row>\n   </Table.Head>\n   <Table.Body>\n     <Table.Row>\n       <Table.Header>Table Header</Table.Header>\n       <Table.Header>Table Header</Table.Header>\n     </Table.Row>\n     <Table.Row>\n       <Table.Header>Table Header</Table.Header>\n       <Table.Cell>Table Data Cell</Table.Cell>\n     </Table.Row>\n     <Table.Row>\n       <Table.Header>Table Header</Table.Header>\n       <Table.Cell>Table Data Cell</Table.Cell>\n     </Table.Row>\n   </Table.Body>\n   <Table.Footer>\n     <Table.Row>\n       <Table.Header>Table Header</Table.Header>\n       <Table.Cell>Table Data Cell</Table.Cell>\n     </Table.Row>\n   </Table.Footer>\n </Table>\n);\n}\n```",declarations:[{name:"Table",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/Table.tsx"}],tags:{},type:{kind:"enhancedComponent",componentType:"regular",displayName:"Table",props:[{kind:"property",name:"cs",required:!1,type:{kind:"symbol",name:"CSToPropsInput",value:"CSToPropsInput"},description:"The `cs` prop takes in a single value or an array of values. You can pass the CSS class name\nreturned by {@link createStyles}, or the result of {@link createVars} and\n{@link createModifiers}. If you're extending a component already using `cs`, you can merge that\nprop in as well. Any style that is passed to the `cs` prop will override style props. If you\nwish to have styles that are overridden by the `css` prop, or styles added via the `styled`\nAPI, use {@link handleCsProp} wherever `elemProps` is used. If your component needs to also\nhandle style props, use {@link mergeStyles } instead.\n\n\n```tsx\nimport {handleCsProp} from '@workday/canvas-kit-styling';\nimport {mergeStyles} from '@workday/canvas-kit-react/layout';\n\n// ...\n\n// `handleCsProp` handles compat mode with Emotion's runtime APIs. `mergeStyles` has the same\n// function signature, but adds support for style props.\n\nreturn (\n <Element\n   {...handleCsProp(elemProps, [\n     myStyles,\n     myModifiers({ size: 'medium' }),\n     myVars({ backgroundColor: 'red' })\n   ])}\n >\n   {children}\n </Element>\n)\n```",declarations:[{name:"cs",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"children",required:!1,type:{kind:"external",name:"ReactNode",url:"https://reactjs.org/docs/rendering-elements.html"},description:"",declarations:[{name:"children",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/layout/lib/Box.tsx"}],tags:{}},{kind:"property",name:"as",description:"Optional override of the default element used by the component. Any valid tag or Component. If you provided a Component, this component should forward the ref using `React.forwardRef`and spread extra props to a root element.\n\n**Note:** Not all elements make sense and some elements may cause accessibility issues. Change this value with care.",tags:{},declarations:[],type:{kind:"external",name:"React.ElementType",url:"https://developer.mozilla.org/en-US/docs/Web/API/element"},defaultValue:{kind:"external",name:"table",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table"}},{kind:"property",name:"ref",description:"Optional ref. If the component represents an element, this ref will be a reference to the real DOM element of the component. If `as` is set to an element, it will be that element. If `as` is a component, the reference will be to that component (or element if the component uses `React.forwardRef`).",tags:{},declarations:[],type:{kind:"external",name:"React.Ref",url:"https://reactjs.org/docs/refs-and-the-dom.html",typeParameters:[{kind:"typeParameter",name:"R",required:!0,defaultValue:{kind:"external",name:"table",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table"}}]}}],baseElement:{kind:"external",name:"table",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table"},subComponents:[{name:"Caption",symbol:"TableCaption",description:"`Table.Caption` renders a [caption](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption) element.\n\n\n```tsx\nimport {Table} from '@workday/canvas-kit-react/table';\n\nexport default function App() {\n return (\n   <Table>\n     <Table.Caption>Table Caption</Table.Caption>\n     <Table.Body>\n       <Table.Row>\n         <Table.Header>Table Header</Table.Header>\n         <Table.Cell>Table Cell</Table.Cell>\n       </Table.Row>\n     </Table.Body>\n   </Table>\n );\n}\n```",declarations:[{name:"Caption",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/Table.tsx"},{name:"TableCaption",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableCaption.tsx"}],tags:{}},{name:"Head",symbol:"TableHead",description:"`Table.Head` renders a [thead](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead) element.\n\n\n```tsx\nimport {Table} from '@workday/canvas-kit-react/table';\n\nexport default function App() {\nreturn (\n  <Table>\n    <Table.Head>\n      <Table.Row>\n        <Table.Header>Table Header</Table.Header>\n        <Table.Cell>Table Cell</Table.Cell>\n      </Table.Row>\n    </Table.Head>\n  </Table>\n);\n}\n```",declarations:[{name:"Head",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/Table.tsx"},{name:"TableHead",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableHead.tsx"}],tags:{}},{name:"Body",symbol:"TableBody",description:"`Table.Body` renders a [tbody](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody) element.\n\n\n```tsx\nimport {Table} from '@workday/canvas-kit-react/table';\n\nexport default function App() {\nreturn (\n <Table>\n   <Table.Body>\n     <Table.Row>\n       <Table.Header>Table Header</Table.Header>\n       <Table.Cell>Table Cell</Table.Cell>\n     </Table.Row>\n   </Table.Body>\n </Table>\n);\n}\n```",declarations:[{name:"Body",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/Table.tsx"},{name:"TableBody",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableBody.tsx"}],tags:{}},{name:"Row",symbol:"TableRow",description:"`Table.Row` renders a [tr](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr) element.\n\n**Note**: `Table.Row` is built on [Grid](/docs/components-layout-grid--basic). It will look for\nhow many children are there and if those children are valid React Elements. This will adjust the\namount of columns automatically using the `gridTemplateColumns` style prop and the width of the\ncolumns is also set using a `minmax` function in the `gridTemplateColumns` style prop. If a user\nwould like to adjust this, it can be overwritten on `Table.Row`. See the example below for how to\noverwrite `gridTemplateColumns`.\n\n\n```tsx\nimport {Table} from '@workday/canvas-kit-react/table';\n\nexport default function App() {\nreturn (\n <Table>\n   <Table.Head>\n     <Table.Row gridTemplateColumns=\"repeat(4, minmax(100px, 1fr))\">\n       <Table.Header>Table Header</Table.Header>\n       <Table.Cell>Table Cell</Table.Cell>\n     </Table.Row>\n   </Table.Head>\n </Table>\n);\n}\n```",declarations:[{name:"Row",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/Table.tsx"},{name:"TableRow",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableRow.tsx"}],tags:{}},{name:"Header",symbol:"TableHeader",description:"`Table.Header` renders a [th](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th) element.\n\n\n```tsx\nimport {Table} from '@workday/canvas-kit-react/table';\n\nexport default function App() {\nreturn (\n  <Table>\n    <Table.Head>\n      <Table.Row>\n        <Table.Header>Table Header</Table.Header>\n        <Table.Cell>Table Cell</Table.Cell>\n      </Table.Row>\n    </Table.Head>\n  </Table>\n);\n}\n```",declarations:[{name:"Header",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/Table.tsx"},{name:"TableHeader",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableHeader.tsx"}],tags:{}},{name:"Cell",symbol:"TableCell",description:"`Table.Cell` renders a [td](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td) element.\n\n\n```tsx\nimport {Table} from '@workday/canvas-kit-react/table';\n\nexport default function App() {\nreturn (\n  <Table>\n    <Table.Body>\n      <Table.Row>\n        <Table.Header>Table Header</Table.Header>\n        <Table.Cell>Table Cell</Table.Cell>\n      </Table.Row>\n    </Table.Body>\n  </Table>\n);\n}\n```",declarations:[{name:"Cell",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/Table.tsx"},{name:"TableCell",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableCell.tsx"}],tags:{}},{name:"Footer",symbol:"TableFooter",description:"`Table.Footer` renders a [tfoot](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot) element.\n\n\n```tsx\nimport {Table} from '@workday/canvas-kit-react/table';\n\nexport default function App() {\nreturn (\n  <Table>\n    <Table.Footer>\n      <Table.Row>\n        <Table.Header>Table Header</Table.Header>\n        <Table.Cell>Table Cell</Table.Cell>\n      </Table.Row>\n    </Table.Footer>\n  </Table>\n);\n}\n```",declarations:[{name:"Footer",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/Table.tsx"},{name:"TableFooter",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableFooter.tsx"}],tags:{}}],styleComponent:{kind:"symbol",name:"Grid"}}}];var _window$__updateDocs,_window;window.__updateDocs?null===(_window$__updateDocs=(_window=window).__updateDocs)||void 0===_window$__updateDocs||_window$__updateDocs.call(_window,__docs):window.__docs=(window.__docs||[]).concat(__docs)},"./modules/react/table/lib/TableBody.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.TableBody=void 0;var _react=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_layout=__webpack_require__("./modules/react/layout/index.ts"),_common=__webpack_require__("./modules/react/common/index.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const tableBodyStencil=(0,__webpack_require__("./modules/styling/index.ts").createStencil)({base:{name:"yk6v6l",styles:"box-sizing:border-box;display:grid;tr {&:last-of-type{td, th{border-bottom:none;}}&:first-of-type{td, th{border-top:none;}}}td {&:last-of-type{border-inline-end:none;}&:first-of-type{border-inline-start:none;}}"}},"table-body-dbe12a"),TableBody=(0,_common.createComponent)("tbody")({displayName:"Table.Body",Component:({children,...elemProps},ref,Element)=>_react.default.createElement(Element,_extends({ref},(0,_layout.mergeStyles)(elemProps,tableBodyStencil())),children)});exports.TableBody=TableBody;const __docs=[{name:"TableBody",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableBody.tsx",description:"",declarations:[{name:"TableBody",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableBody.tsx"}],tags:{},type:{kind:"enhancedComponent",componentType:"regular",displayName:"Table.Body",props:[{kind:"property",name:"cs",required:!1,type:{kind:"symbol",name:"CSToPropsInput",value:"CSToPropsInput"},description:"The `cs` prop takes in a single value or an array of values. You can pass the CSS class name\nreturned by {@link createStyles}, or the result of {@link createVars} and\n{@link createModifiers}. If you're extending a component already using `cs`, you can merge that\nprop in as well. Any style that is passed to the `cs` prop will override style props. If you\nwish to have styles that are overridden by the `css` prop, or styles added via the `styled`\nAPI, use {@link handleCsProp} wherever `elemProps` is used. If your component needs to also\nhandle style props, use {@link mergeStyles } instead.\n\n\n```tsx\nimport {handleCsProp} from '@workday/canvas-kit-styling';\nimport {mergeStyles} from '@workday/canvas-kit-react/layout';\n\n// ...\n\n// `handleCsProp` handles compat mode with Emotion's runtime APIs. `mergeStyles` has the same\n// function signature, but adds support for style props.\n\nreturn (\n <Element\n   {...handleCsProp(elemProps, [\n     myStyles,\n     myModifiers({ size: 'medium' }),\n     myVars({ backgroundColor: 'red' })\n   ])}\n >\n   {children}\n </Element>\n)\n```",declarations:[{name:"cs",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"children",required:!1,type:{kind:"external",name:"ReactNode",url:"https://reactjs.org/docs/rendering-elements.html"},description:"",declarations:[{name:"children",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/layout/lib/Box.tsx"}],tags:{}},{kind:"property",name:"as",description:"Optional override of the default element used by the component. Any valid tag or Component. If you provided a Component, this component should forward the ref using `React.forwardRef`and spread extra props to a root element.\n\n**Note:** Not all elements make sense and some elements may cause accessibility issues. Change this value with care.",tags:{},declarations:[],type:{kind:"external",name:"React.ElementType",url:"https://developer.mozilla.org/en-US/docs/Web/API/element"},defaultValue:{kind:"external",name:"tbody",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody"}},{kind:"property",name:"ref",description:"Optional ref. If the component represents an element, this ref will be a reference to the real DOM element of the component. If `as` is set to an element, it will be that element. If `as` is a component, the reference will be to that component (or element if the component uses `React.forwardRef`).",tags:{},declarations:[],type:{kind:"external",name:"React.Ref",url:"https://reactjs.org/docs/refs-and-the-dom.html",typeParameters:[{kind:"typeParameter",name:"R",required:!0,defaultValue:{kind:"external",name:"tbody",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody"}}]}}],baseElement:{kind:"external",name:"tbody",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody"},styleComponent:{kind:"symbol",name:"Grid"}}}];var _window$__updateDocs,_window;window.__updateDocs?null===(_window$__updateDocs=(_window=window).__updateDocs)||void 0===_window$__updateDocs||_window$__updateDocs.call(_window,__docs):window.__docs=(window.__docs||[]).concat(__docs)},"./modules/react/table/lib/TableCaption.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.TableCaption=void 0;var _react=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_layout=__webpack_require__("./modules/react/layout/index.ts"),_common=__webpack_require__("./modules/react/common/index.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const tableCaptionStencil=(0,__webpack_require__("./modules/styling/index.ts").createStencil)({base:{name:"yk6v6o",styles:"box-sizing:border-box;display:flex;border-bottom:0.0625rem solid var(--cnvs-sys-color-border-container);padding:var(--cnvs-sys-space-x2) var(--cnvs-sys-space-x4);"}},"table-caption-106f16"),TableCaption=(0,_common.createComponent)("caption")({displayName:"Table.Caption",Component:({children,...elemProps},ref,Element)=>_react.default.createElement(Element,_extends({ref},(0,_layout.mergeStyles)(elemProps,tableCaptionStencil())),children)});exports.TableCaption=TableCaption;const __docs=[{name:"TableCaption",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableCaption.tsx",description:"",declarations:[{name:"TableCaption",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableCaption.tsx"}],tags:{},type:{kind:"enhancedComponent",componentType:"regular",displayName:"Table.Caption",props:[{kind:"property",name:"cs",required:!1,type:{kind:"symbol",name:"CSToPropsInput",value:"CSToPropsInput"},description:"The `cs` prop takes in a single value or an array of values. You can pass the CSS class name\nreturned by {@link createStyles}, or the result of {@link createVars} and\n{@link createModifiers}. If you're extending a component already using `cs`, you can merge that\nprop in as well. Any style that is passed to the `cs` prop will override style props. If you\nwish to have styles that are overridden by the `css` prop, or styles added via the `styled`\nAPI, use {@link handleCsProp} wherever `elemProps` is used. If your component needs to also\nhandle style props, use {@link mergeStyles } instead.\n\n\n```tsx\nimport {handleCsProp} from '@workday/canvas-kit-styling';\nimport {mergeStyles} from '@workday/canvas-kit-react/layout';\n\n// ...\n\n// `handleCsProp` handles compat mode with Emotion's runtime APIs. `mergeStyles` has the same\n// function signature, but adds support for style props.\n\nreturn (\n <Element\n   {...handleCsProp(elemProps, [\n     myStyles,\n     myModifiers({ size: 'medium' }),\n     myVars({ backgroundColor: 'red' })\n   ])}\n >\n   {children}\n </Element>\n)\n```",declarations:[{name:"cs",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"children",required:!1,type:{kind:"external",name:"ReactNode",url:"https://reactjs.org/docs/rendering-elements.html"},description:"",declarations:[{name:"children",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/layout/lib/Box.tsx"}],tags:{}},{kind:"property",name:"as",description:"Optional override of the default element used by the component. Any valid tag or Component. If you provided a Component, this component should forward the ref using `React.forwardRef`and spread extra props to a root element.\n\n**Note:** Not all elements make sense and some elements may cause accessibility issues. Change this value with care.",tags:{},declarations:[],type:{kind:"external",name:"React.ElementType",url:"https://developer.mozilla.org/en-US/docs/Web/API/element"},defaultValue:{kind:"external",name:"caption",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption"}},{kind:"property",name:"ref",description:"Optional ref. If the component represents an element, this ref will be a reference to the real DOM element of the component. If `as` is set to an element, it will be that element. If `as` is a component, the reference will be to that component (or element if the component uses `React.forwardRef`).",tags:{},declarations:[],type:{kind:"external",name:"React.Ref",url:"https://reactjs.org/docs/refs-and-the-dom.html",typeParameters:[{kind:"typeParameter",name:"R",required:!0,defaultValue:{kind:"external",name:"caption",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption"}}]}}],baseElement:{kind:"external",name:"caption",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption"},styleComponent:{kind:"symbol",name:"Flex"}}}];var _window$__updateDocs,_window;window.__updateDocs?null===(_window$__updateDocs=(_window=window).__updateDocs)||void 0===_window$__updateDocs||_window$__updateDocs.call(_window,__docs):window.__docs=(window.__docs||[]).concat(__docs)},"./modules/react/table/lib/TableCell.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.TableCell=void 0;var _react=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_layout=__webpack_require__("./modules/react/layout/index.ts"),_common=__webpack_require__("./modules/react/common/index.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const tableCellStencil=(0,__webpack_require__("./modules/styling/index.ts").createStencil)({base:{name:"yk6v6n",styles:"box-sizing:border-box;display:grid;align-items:center;background-color:var(--cnvs-sys-color-bg-default);border-bottom:0.0625rem solid var(--cnvs-sys-color-border-divider);grid-template-columns:1fr;justify-content:start;min-height:3.5rem;padding:var(--cnvs-sys-space-x2) var(--cnvs-sys-space-x4);word-break:break-word;"}},"table-cell-c39aaf"),TableCell=(0,_common.createComponent)("td")({displayName:"Table.Cell",Component:({children,...elemProps},ref,Element)=>_react.default.createElement(Element,_extends({ref},(0,_layout.mergeStyles)(elemProps,tableCellStencil())),children)});exports.TableCell=TableCell;const __docs=[{name:"TableCell",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableCell.tsx",description:"",declarations:[{name:"TableCell",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableCell.tsx"}],tags:{},type:{kind:"enhancedComponent",componentType:"regular",displayName:"Table.Cell",props:[{kind:"property",name:"cs",required:!1,type:{kind:"symbol",name:"CSToPropsInput",value:"CSToPropsInput"},description:"The `cs` prop takes in a single value or an array of values. You can pass the CSS class name\nreturned by {@link createStyles}, or the result of {@link createVars} and\n{@link createModifiers}. If you're extending a component already using `cs`, you can merge that\nprop in as well. Any style that is passed to the `cs` prop will override style props. If you\nwish to have styles that are overridden by the `css` prop, or styles added via the `styled`\nAPI, use {@link handleCsProp} wherever `elemProps` is used. If your component needs to also\nhandle style props, use {@link mergeStyles } instead.\n\n\n```tsx\nimport {handleCsProp} from '@workday/canvas-kit-styling';\nimport {mergeStyles} from '@workday/canvas-kit-react/layout';\n\n// ...\n\n// `handleCsProp` handles compat mode with Emotion's runtime APIs. `mergeStyles` has the same\n// function signature, but adds support for style props.\n\nreturn (\n <Element\n   {...handleCsProp(elemProps, [\n     myStyles,\n     myModifiers({ size: 'medium' }),\n     myVars({ backgroundColor: 'red' })\n   ])}\n >\n   {children}\n </Element>\n)\n```",declarations:[{name:"cs",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"children",required:!1,type:{kind:"external",name:"ReactNode",url:"https://reactjs.org/docs/rendering-elements.html"},description:"",declarations:[{name:"children",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/layout/lib/Box.tsx"}],tags:{}},{kind:"property",name:"as",description:"Optional override of the default element used by the component. Any valid tag or Component. If you provided a Component, this component should forward the ref using `React.forwardRef`and spread extra props to a root element.\n\n**Note:** Not all elements make sense and some elements may cause accessibility issues. Change this value with care.",tags:{},declarations:[],type:{kind:"external",name:"React.ElementType",url:"https://developer.mozilla.org/en-US/docs/Web/API/element"},defaultValue:{kind:"external",name:"td",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td"}},{kind:"property",name:"ref",description:"Optional ref. If the component represents an element, this ref will be a reference to the real DOM element of the component. If `as` is set to an element, it will be that element. If `as` is a component, the reference will be to that component (or element if the component uses `React.forwardRef`).",tags:{},declarations:[],type:{kind:"external",name:"React.Ref",url:"https://reactjs.org/docs/refs-and-the-dom.html",typeParameters:[{kind:"typeParameter",name:"R",required:!0,defaultValue:{kind:"external",name:"td",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td"}}]}}],baseElement:{kind:"external",name:"td",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td"},styleComponent:{kind:"symbol",name:"Grid"}}}];var _window$__updateDocs,_window;window.__updateDocs?null===(_window$__updateDocs=(_window=window).__updateDocs)||void 0===_window$__updateDocs||_window$__updateDocs.call(_window,__docs):window.__docs=(window.__docs||[]).concat(__docs)},"./modules/react/table/lib/TableFooter.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.TableFooter=void 0;var _react=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_layout=__webpack_require__("./modules/react/layout/index.ts"),_common=__webpack_require__("./modules/react/common/index.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const tableFooterStencil=(0,__webpack_require__("./modules/styling/index.ts").createStencil)({base:{name:"yk6v6p",styles:"box-sizing:border-box;display:grid;"}},"table-footer-9bbb07"),TableFooter=(0,_common.createComponent)("tfoot")({displayName:"Table.Footer",Component:({children,...elemProps},ref,Element)=>_react.default.createElement(Element,_extends({ref},(0,_layout.mergeStyles)(elemProps,tableFooterStencil())),children)});exports.TableFooter=TableFooter;const __docs=[{name:"TableFooter",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableFooter.tsx",description:"",declarations:[{name:"TableFooter",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableFooter.tsx"}],tags:{},type:{kind:"enhancedComponent",componentType:"regular",displayName:"Table.Footer",props:[{kind:"property",name:"cs",required:!1,type:{kind:"symbol",name:"CSToPropsInput",value:"CSToPropsInput"},description:"The `cs` prop takes in a single value or an array of values. You can pass the CSS class name\nreturned by {@link createStyles}, or the result of {@link createVars} and\n{@link createModifiers}. If you're extending a component already using `cs`, you can merge that\nprop in as well. Any style that is passed to the `cs` prop will override style props. If you\nwish to have styles that are overridden by the `css` prop, or styles added via the `styled`\nAPI, use {@link handleCsProp} wherever `elemProps` is used. If your component needs to also\nhandle style props, use {@link mergeStyles } instead.\n\n\n```tsx\nimport {handleCsProp} from '@workday/canvas-kit-styling';\nimport {mergeStyles} from '@workday/canvas-kit-react/layout';\n\n// ...\n\n// `handleCsProp` handles compat mode with Emotion's runtime APIs. `mergeStyles` has the same\n// function signature, but adds support for style props.\n\nreturn (\n <Element\n   {...handleCsProp(elemProps, [\n     myStyles,\n     myModifiers({ size: 'medium' }),\n     myVars({ backgroundColor: 'red' })\n   ])}\n >\n   {children}\n </Element>\n)\n```",declarations:[{name:"cs",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"children",required:!1,type:{kind:"external",name:"ReactNode",url:"https://reactjs.org/docs/rendering-elements.html"},description:"",declarations:[{name:"children",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/layout/lib/Box.tsx"}],tags:{}},{kind:"property",name:"as",description:"Optional override of the default element used by the component. Any valid tag or Component. If you provided a Component, this component should forward the ref using `React.forwardRef`and spread extra props to a root element.\n\n**Note:** Not all elements make sense and some elements may cause accessibility issues. Change this value with care.",tags:{},declarations:[],type:{kind:"external",name:"React.ElementType",url:"https://developer.mozilla.org/en-US/docs/Web/API/element"},defaultValue:{kind:"external",name:"tfoot",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot"}},{kind:"property",name:"ref",description:"Optional ref. If the component represents an element, this ref will be a reference to the real DOM element of the component. If `as` is set to an element, it will be that element. If `as` is a component, the reference will be to that component (or element if the component uses `React.forwardRef`).",tags:{},declarations:[],type:{kind:"external",name:"React.Ref",url:"https://reactjs.org/docs/refs-and-the-dom.html",typeParameters:[{kind:"typeParameter",name:"R",required:!0,defaultValue:{kind:"external",name:"tfoot",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot"}}]}}],baseElement:{kind:"external",name:"tfoot",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot"},styleComponent:{kind:"symbol",name:"Grid"}}}];var _window$__updateDocs,_window;window.__updateDocs?null===(_window$__updateDocs=(_window=window).__updateDocs)||void 0===_window$__updateDocs||_window$__updateDocs.call(_window,__docs):window.__docs=(window.__docs||[]).concat(__docs)},"./modules/react/table/lib/TableHead.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.TableHead=void 0;var _react=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_layout=__webpack_require__("./modules/react/layout/index.ts"),_common=__webpack_require__("./modules/react/common/index.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const tableHeadStencil=(0,__webpack_require__("./modules/styling/index.ts").createStencil)({base:{name:"yk6v6f",styles:"box-sizing:border-box;display:grid;background-color:var(--cnvs-sys-color-bg-alt-softer);min-height:calc(var(--cnvs-sys-space-x16) - var(--cnvs-sys-space-x4));th {&:first-of-type{border-inline-start:none;}&:last-of-type{border-inline-end:none;}}"}},"table-head-c91e37"),TableHead=(0,_common.createComponent)("thead")({displayName:"Table.Head",Component:({children,...elemProps},ref,Element)=>_react.default.createElement(Element,_extends({ref},(0,_layout.mergeStyles)(elemProps,tableHeadStencil())),children)});exports.TableHead=TableHead;const __docs=[{name:"TableHead",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableHead.tsx",description:"",declarations:[{name:"TableHead",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableHead.tsx"}],tags:{},type:{kind:"enhancedComponent",componentType:"regular",displayName:"Table.Head",props:[{kind:"property",name:"cs",required:!1,type:{kind:"symbol",name:"CSToPropsInput",value:"CSToPropsInput"},description:"The `cs` prop takes in a single value or an array of values. You can pass the CSS class name\nreturned by {@link createStyles}, or the result of {@link createVars} and\n{@link createModifiers}. If you're extending a component already using `cs`, you can merge that\nprop in as well. Any style that is passed to the `cs` prop will override style props. If you\nwish to have styles that are overridden by the `css` prop, or styles added via the `styled`\nAPI, use {@link handleCsProp} wherever `elemProps` is used. If your component needs to also\nhandle style props, use {@link mergeStyles } instead.\n\n\n```tsx\nimport {handleCsProp} from '@workday/canvas-kit-styling';\nimport {mergeStyles} from '@workday/canvas-kit-react/layout';\n\n// ...\n\n// `handleCsProp` handles compat mode with Emotion's runtime APIs. `mergeStyles` has the same\n// function signature, but adds support for style props.\n\nreturn (\n <Element\n   {...handleCsProp(elemProps, [\n     myStyles,\n     myModifiers({ size: 'medium' }),\n     myVars({ backgroundColor: 'red' })\n   ])}\n >\n   {children}\n </Element>\n)\n```",declarations:[{name:"cs",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"children",required:!1,type:{kind:"external",name:"ReactNode",url:"https://reactjs.org/docs/rendering-elements.html"},description:"",declarations:[{name:"children",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/layout/lib/Box.tsx"}],tags:{}},{kind:"property",name:"as",description:"Optional override of the default element used by the component. Any valid tag or Component. If you provided a Component, this component should forward the ref using `React.forwardRef`and spread extra props to a root element.\n\n**Note:** Not all elements make sense and some elements may cause accessibility issues. Change this value with care.",tags:{},declarations:[],type:{kind:"external",name:"React.ElementType",url:"https://developer.mozilla.org/en-US/docs/Web/API/element"},defaultValue:{kind:"external",name:"thead",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead"}},{kind:"property",name:"ref",description:"Optional ref. If the component represents an element, this ref will be a reference to the real DOM element of the component. If `as` is set to an element, it will be that element. If `as` is a component, the reference will be to that component (or element if the component uses `React.forwardRef`).",tags:{},declarations:[],type:{kind:"external",name:"React.Ref",url:"https://reactjs.org/docs/refs-and-the-dom.html",typeParameters:[{kind:"typeParameter",name:"R",required:!0,defaultValue:{kind:"external",name:"thead",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead"}}]}}],baseElement:{kind:"external",name:"thead",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead"},styleComponent:{kind:"symbol",name:"Grid"}}}];var _window$__updateDocs,_window;window.__updateDocs?null===(_window$__updateDocs=(_window=window).__updateDocs)||void 0===_window$__updateDocs||_window$__updateDocs.call(_window,__docs):window.__docs=(window.__docs||[]).concat(__docs)},"./modules/react/table/lib/TableHeader.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.TableHeader=void 0;var _react=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_layout=__webpack_require__("./modules/react/layout/index.ts"),_common=__webpack_require__("./modules/react/common/index.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const tableHeaderStencil=(0,__webpack_require__("./modules/styling/index.ts").createStencil)({base:{name:"yk6v6m",styles:"box-sizing:border-box;display:grid;align-items:center;background-color:var(--cnvs-sys-color-bg-default);border-bottom:0.0625rem solid var(--cnvs-sys-color-border-divider);justify-content:start;min-height:calc(var(--cnvs-sys-space-x16) - var(--cnvs-sys-space-x2));padding:var(--cnvs-sys-space-x2) var(--cnvs-sys-space-x4);word-break:break-word;font-weight:var(--cnvs-sys-font-weight-medium);"}},"table-header-8f0b37"),TableHeader=(0,_common.createComponent)("th")({displayName:"Table.Header",Component:({children,...elemProps},ref,Element)=>_react.default.createElement(Element,_extends({ref},(0,_layout.mergeStyles)(elemProps,tableHeaderStencil())),children)});exports.TableHeader=TableHeader;const __docs=[{name:"TableHeader",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableHeader.tsx",description:"",declarations:[{name:"TableHeader",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableHeader.tsx"}],tags:{},type:{kind:"enhancedComponent",componentType:"regular",displayName:"Table.Header",props:[{kind:"property",name:"cs",required:!1,type:{kind:"symbol",name:"CSToPropsInput",value:"CSToPropsInput"},description:"The `cs` prop takes in a single value or an array of values. You can pass the CSS class name\nreturned by {@link createStyles}, or the result of {@link createVars} and\n{@link createModifiers}. If you're extending a component already using `cs`, you can merge that\nprop in as well. Any style that is passed to the `cs` prop will override style props. If you\nwish to have styles that are overridden by the `css` prop, or styles added via the `styled`\nAPI, use {@link handleCsProp} wherever `elemProps` is used. If your component needs to also\nhandle style props, use {@link mergeStyles } instead.\n\n\n```tsx\nimport {handleCsProp} from '@workday/canvas-kit-styling';\nimport {mergeStyles} from '@workday/canvas-kit-react/layout';\n\n// ...\n\n// `handleCsProp` handles compat mode with Emotion's runtime APIs. `mergeStyles` has the same\n// function signature, but adds support for style props.\n\nreturn (\n <Element\n   {...handleCsProp(elemProps, [\n     myStyles,\n     myModifiers({ size: 'medium' }),\n     myVars({ backgroundColor: 'red' })\n   ])}\n >\n   {children}\n </Element>\n)\n```",declarations:[{name:"cs",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"children",required:!1,type:{kind:"external",name:"ReactNode",url:"https://reactjs.org/docs/rendering-elements.html"},description:"",declarations:[{name:"children",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/layout/lib/Box.tsx"}],tags:{}},{kind:"property",name:"as",description:"Optional override of the default element used by the component. Any valid tag or Component. If you provided a Component, this component should forward the ref using `React.forwardRef`and spread extra props to a root element.\n\n**Note:** Not all elements make sense and some elements may cause accessibility issues. Change this value with care.",tags:{},declarations:[],type:{kind:"external",name:"React.ElementType",url:"https://developer.mozilla.org/en-US/docs/Web/API/element"},defaultValue:{kind:"external",name:"th",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th"}},{kind:"property",name:"ref",description:"Optional ref. If the component represents an element, this ref will be a reference to the real DOM element of the component. If `as` is set to an element, it will be that element. If `as` is a component, the reference will be to that component (or element if the component uses `React.forwardRef`).",tags:{},declarations:[],type:{kind:"external",name:"React.Ref",url:"https://reactjs.org/docs/refs-and-the-dom.html",typeParameters:[{kind:"typeParameter",name:"R",required:!0,defaultValue:{kind:"external",name:"th",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th"}}]}}],baseElement:{kind:"external",name:"th",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th"},styleComponent:{kind:"symbol",name:"Grid"}}}];var _window$__updateDocs,_window;window.__updateDocs?null===(_window$__updateDocs=(_window=window).__updateDocs)||void 0===_window$__updateDocs||_window$__updateDocs.call(_window,__docs):window.__docs=(window.__docs||[]).concat(__docs)},"./modules/react/table/lib/TableRow.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.TableRow=void 0;var _react=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/react/index.js")),_layout=__webpack_require__("./modules/react/layout/index.ts"),_common=__webpack_require__("./modules/react/common/index.ts"),_canvasKitStyling=__webpack_require__("./modules/styling/index.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const childrenVars=(0,_canvasKitStyling.createVars)({id:"4d9bf5",args:["cellNumber"]}),tableRowStencil=(0,_canvasKitStyling.createStencil)({base:{name:"yk6v6k",styles:"box-sizing:border-box;display:grid;grid-auto-flow:column;grid-template-columns:repeat(var(--cellNumber-4d9bf5), minmax(10rem, 1fr));"}},"table-row-a6e914"),TableRow=(0,_common.createComponent)("tr")({displayName:"Table.Row",Component:({children,...elemProps},ref,Element)=>{const childrenArray=(children=>_react.default.Children.toArray(children).filter((child=>_react.default.isValidElement(child))))(children).length;return _react.default.createElement(Element,_extends({ref},(0,_layout.mergeStyles)(elemProps,[tableRowStencil(),{[childrenVars.cellNumber]:childrenArray}])),children)}});exports.TableRow=TableRow;const __docs=[{name:"TableRow",fileName:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableRow.tsx",description:"",declarations:[{name:"TableRow",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/table/lib/TableRow.tsx"}],tags:{},type:{kind:"enhancedComponent",componentType:"regular",displayName:"Table.Row",props:[{kind:"property",name:"cs",required:!1,type:{kind:"symbol",name:"CSToPropsInput",value:"CSToPropsInput"},description:"The `cs` prop takes in a single value or an array of values. You can pass the CSS class name\nreturned by {@link createStyles}, or the result of {@link createVars} and\n{@link createModifiers}. If you're extending a component already using `cs`, you can merge that\nprop in as well. Any style that is passed to the `cs` prop will override style props. If you\nwish to have styles that are overridden by the `css` prop, or styles added via the `styled`\nAPI, use {@link handleCsProp} wherever `elemProps` is used. If your component needs to also\nhandle style props, use {@link mergeStyles } instead.\n\n\n```tsx\nimport {handleCsProp} from '@workday/canvas-kit-styling';\nimport {mergeStyles} from '@workday/canvas-kit-react/layout';\n\n// ...\n\n// `handleCsProp` handles compat mode with Emotion's runtime APIs. `mergeStyles` has the same\n// function signature, but adds support for style props.\n\nreturn (\n <Element\n   {...handleCsProp(elemProps, [\n     myStyles,\n     myModifiers({ size: 'medium' }),\n     myVars({ backgroundColor: 'red' })\n   ])}\n >\n   {children}\n </Element>\n)\n```",declarations:[{name:"cs",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/styling/lib/cs.ts"}],tags:{}},{kind:"property",name:"children",required:!1,type:{kind:"external",name:"ReactNode",url:"https://reactjs.org/docs/rendering-elements.html"},description:"",declarations:[{name:"children",filePath:"/home/runner/work/canvas-kit/canvas-kit/modules/react/layout/lib/Box.tsx"}],tags:{}},{kind:"property",name:"as",description:"Optional override of the default element used by the component. Any valid tag or Component. If you provided a Component, this component should forward the ref using `React.forwardRef`and spread extra props to a root element.\n\n**Note:** Not all elements make sense and some elements may cause accessibility issues. Change this value with care.",tags:{},declarations:[],type:{kind:"external",name:"React.ElementType",url:"https://developer.mozilla.org/en-US/docs/Web/API/element"},defaultValue:{kind:"external",name:"tr",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr"}},{kind:"property",name:"ref",description:"Optional ref. If the component represents an element, this ref will be a reference to the real DOM element of the component. If `as` is set to an element, it will be that element. If `as` is a component, the reference will be to that component (or element if the component uses `React.forwardRef`).",tags:{},declarations:[],type:{kind:"external",name:"React.Ref",url:"https://reactjs.org/docs/refs-and-the-dom.html",typeParameters:[{kind:"typeParameter",name:"R",required:!0,defaultValue:{kind:"external",name:"tr",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr"}}]}}],baseElement:{kind:"external",name:"tr",url:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr"},styleComponent:{kind:"symbol",name:"Grid"}}}];var _window$__updateDocs,_window;window.__updateDocs?null===(_window$__updateDocs=(_window=window).__updateDocs)||void 0===_window$__updateDocs||_window$__updateDocs.call(_window,__docs):window.__docs=(window.__docs||[]).concat(__docs)}}]);