"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[2168],{"./modules/react/action-bar/stories/visual-testing/testing.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.ActionBarWithOverflowMenuStates=exports.ActionBarStates=void 0;var _react=function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}(__webpack_require__("./node_modules/react/index.js")),_testing=__webpack_require__("./modules/react/testing/index.ts"),_tokens=__webpack_require__("./modules/react/tokens/index.ts"),_actionBar=__webpack_require__("./modules/react/action-bar/index.ts"),_button=__webpack_require__("./modules/react/button/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");exports.default={title:"Testing/Buttons/ActionBar",component:_actionBar.ActionBar,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import React from 'react';\\nimport {ComponentStatesTable, StaticStates} from '@workday/canvas-kit-react/testing';\\nimport {colors, space} from '@workday/canvas-kit-react/tokens';\\nimport {ActionBar} from '@workday/canvas-kit-react/action-bar';\\nimport {PrimaryButton, SecondaryButton} from '@workday/canvas-kit-react/button';\\n\\nexport default {\\n  title: 'Testing/Buttons/ActionBar',\\n  component: ActionBar,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\ntype MyActionItem = {\\n  id: string;\\n  text: React.ReactNode;\\n};\\n\\nexport const ActionBarStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'With Absolute Positioning', props: {position: 'absolute'}},\\n          {label: 'With Relative Positioning', props: {position: 'relative'}},\\n          {label: 'Default (with fixed position)', props: {}},\\n        ]}\\n        columnProps={[{label: ' ', props: {}}]}\\n      >\\n        {props => (\\n          <div\\n            style={{\\n              background: colors.soap100,\\n              position: 'relative',\\n              height: `calc(${space.xxl} + 2.25rem)`,\\n              marginBottom: space.xs,\\n            }}\\n          >\\n            <p style={{padding: space.xs}}>Outer Block</p>\\n            <ActionBar>\\n              <ActionBar.List {...props}>\\n                <PrimaryButton>First Action</PrimaryButton>\\n                <SecondaryButton>Second Action</SecondaryButton>\\n              </ActionBar.List>\\n            </ActionBar>\\n          </div>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const ActionBarWithOverflowMenuStates = {\\n  render: () => {\\n    const [items] = React.useState<MyActionItem[]>([\\n      {id: 'first', text: 'First Action'},\\n      {id: 'second', text: 'Second Action'},\\n      {id: 'third', text: 'Third Action'},\\n      {id: 'fourth', text: 'Fourth Action'},\\n      {id: 'fifth', text: 'Fifth Action'},\\n    ]);\\n\\n    return (\\n      <StaticStates>\\n        <ComponentStatesTable\\n          rowProps={[\\n            {label: 'Default Action Bar', props: {}},\\n            {label: 'Default Action Bar (400px width container)', props: {containerWidth: 400}},\\n            {\\n              label: 'Default Action Bar (280px width container)',\\n              props: {containerWidth: 280},\\n            },\\n            {\\n              label: 'Minimum Visible Items (as 1 button)',\\n              props: {maximumVisible: 1},\\n            },\\n            {\\n              label: 'Custom Number Visible Items (as 4 button)',\\n              props: {maximumVisible: 2},\\n            },\\n            {\\n              label: 'Maximum Visible Items (as 5 buttons)',\\n              props: {maximumVisible: items.length, containerWidth: 830},\\n            },\\n            {\\n              label: 'Maximum Visible Items (400px width)',\\n              props: {maximumVisible: items.length, containerWidth: 400},\\n            },\\n            {\\n              label: 'Maximum Visible Items (280px width)',\\n              props: {maximumVisible: items.length, containerWidth: 280},\\n            },\\n          ]}\\n          columnProps={[{label: 'Example', props: {}}]}\\n        >\\n          {({containerWidth, maximumVisible}) => (\\n            <ActionBar items={items} maximumVisible={maximumVisible}>\\n              <ActionBar.List\\n                width={containerWidth}\\n                position=\\\"relative\\\"\\n                overflowButton={<ActionBar.OverflowButton aria-label=\\\"More actions\\\" />}\\n              >\\n                {(item: MyActionItem, index: number) => (\\n                  <ActionBar.Item as={index === 0 ? PrimaryButton : undefined}>\\n                    {item.text}\\n                  </ActionBar.Item>\\n                )}\\n              </ActionBar.List>\\n              <ActionBar.Menu.Popper>\\n                <ActionBar.Menu.Card maxWidth={300} maxHeight={200}>\\n                  <ActionBar.Menu.List>\\n                    {(item: MyActionItem) => <ActionBar.Menu.Item>{item.text}</ActionBar.Menu.Item>}\\n                  </ActionBar.Menu.List>\\n                </ActionBar.Menu.Card>\\n              </ActionBar.Menu.Popper>\\n            </ActionBar>\\n          )}\\n        </ComponentStatesTable>\\n      </StaticStates>\\n    );\\n  },\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"ActionBarStates\": {\n    \"startLoc\": {\n      \"col\": 31,\n      \"line\": 22\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 54\n    },\n    \"startBody\": {\n      \"col\": 31,\n      \"line\": 22\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 54\n    }\n  },\n  \"ActionBarWithOverflowMenuStates\": {\n    \"startLoc\": {\n      \"col\": 47,\n      \"line\": 56\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 125\n    },\n    \"startBody\": {\n      \"col\": 47,\n      \"line\": 56\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 125\n    }\n  }\n};\n    \nimport React from 'react';\nimport {ComponentStatesTable, StaticStates} from '@workday/canvas-kit-react/testing';\nimport {colors, space} from '@workday/canvas-kit-react/tokens';\nimport {ActionBar} from '@workday/canvas-kit-react/action-bar';\nimport {PrimaryButton, SecondaryButton} from '@workday/canvas-kit-react/button';\n\nexport default {\n  title: 'Testing/Buttons/ActionBar',\n  component: ActionBar,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import React from 'react';\\nimport {ComponentStatesTable, StaticStates} from '@workday/canvas-kit-react/testing';\\nimport {colors, space} from '@workday/canvas-kit-react/tokens';\\nimport {ActionBar} from '@workday/canvas-kit-react/action-bar';\\nimport {PrimaryButton, SecondaryButton} from '@workday/canvas-kit-react/button';\\n\\nexport default {\\n  title: 'Testing/Buttons/ActionBar',\\n  component: ActionBar,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\ntype MyActionItem = {\\n  id: string;\\n  text: React.ReactNode;\\n};\\n\\nexport const ActionBarStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'With Absolute Positioning', props: {position: 'absolute'}},\\n          {label: 'With Relative Positioning', props: {position: 'relative'}},\\n          {label: 'Default (with fixed position)', props: {}},\\n        ]}\\n        columnProps={[{label: ' ', props: {}}]}\\n      >\\n        {props => (\\n          <div\\n            style={{\\n              background: colors.soap100,\\n              position: 'relative',\\n              height: `calc(${space.xxl} + 2.25rem)`,\\n              marginBottom: space.xs,\\n            }}\\n          >\\n            <p style={{padding: space.xs}}>Outer Block</p>\\n            <ActionBar>\\n              <ActionBar.List {...props}>\\n                <PrimaryButton>First Action</PrimaryButton>\\n                <SecondaryButton>Second Action</SecondaryButton>\\n              </ActionBar.List>\\n            </ActionBar>\\n          </div>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const ActionBarWithOverflowMenuStates = {\\n  render: () => {\\n    const [items] = React.useState<MyActionItem[]>([\\n      {id: 'first', text: 'First Action'},\\n      {id: 'second', text: 'Second Action'},\\n      {id: 'third', text: 'Third Action'},\\n      {id: 'fourth', text: 'Fourth Action'},\\n      {id: 'fifth', text: 'Fifth Action'},\\n    ]);\\n\\n    return (\\n      <StaticStates>\\n        <ComponentStatesTable\\n          rowProps={[\\n            {label: 'Default Action Bar', props: {}},\\n            {label: 'Default Action Bar (400px width container)', props: {containerWidth: 400}},\\n            {\\n              label: 'Default Action Bar (280px width container)',\\n              props: {containerWidth: 280},\\n            },\\n            {\\n              label: 'Minimum Visible Items (as 1 button)',\\n              props: {maximumVisible: 1},\\n            },\\n            {\\n              label: 'Custom Number Visible Items (as 4 button)',\\n              props: {maximumVisible: 2},\\n            },\\n            {\\n              label: 'Maximum Visible Items (as 5 buttons)',\\n              props: {maximumVisible: items.length, containerWidth: 830},\\n            },\\n            {\\n              label: 'Maximum Visible Items (400px width)',\\n              props: {maximumVisible: items.length, containerWidth: 400},\\n            },\\n            {\\n              label: 'Maximum Visible Items (280px width)',\\n              props: {maximumVisible: items.length, containerWidth: 280},\\n            },\\n          ]}\\n          columnProps={[{label: 'Example', props: {}}]}\\n        >\\n          {({containerWidth, maximumVisible}) => (\\n            <ActionBar items={items} maximumVisible={maximumVisible}>\\n              <ActionBar.List\\n                width={containerWidth}\\n                position=\\\"relative\\\"\\n                overflowButton={<ActionBar.OverflowButton aria-label=\\\"More actions\\\" />}\\n              >\\n                {(item: MyActionItem, index: number) => (\\n                  <ActionBar.Item as={index === 0 ? PrimaryButton : undefined}>\\n                    {item.text}\\n                  </ActionBar.Item>\\n                )}\\n              </ActionBar.List>\\n              <ActionBar.Menu.Popper>\\n                <ActionBar.Menu.Card maxWidth={300} maxHeight={200}>\\n                  <ActionBar.Menu.List>\\n                    {(item: MyActionItem) => <ActionBar.Menu.Item>{item.text}</ActionBar.Menu.Item>}\\n                  </ActionBar.Menu.List>\\n                </ActionBar.Menu.Card>\\n              </ActionBar.Menu.Popper>\\n            </ActionBar>\\n          )}\\n        </ComponentStatesTable>\\n      </StaticStates>\\n    );\\n  },\\n};\\n\",\n    \"locationsMap\": {\n      \"action-bar-states\": {\n        \"startLoc\": {\n          \"col\": 31,\n          \"line\": 22\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 54\n        },\n        \"startBody\": {\n          \"col\": 31,\n          \"line\": 22\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 54\n        }\n      },\n      \"action-bar-with-overflow-menu-states\": {\n        \"startLoc\": {\n          \"col\": 47,\n          \"line\": 56\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 125\n        },\n        \"startBody\": {\n          \"col\": 47,\n          \"line\": 56\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 125\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\ntype MyActionItem = {\n  id: string;\n  text: React.ReactNode;\n};\n\nexport const ActionBarStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'With Absolute Positioning', props: {position: 'absolute'}},\n          {label: 'With Relative Positioning', props: {position: 'relative'}},\n          {label: 'Default (with fixed position)', props: {}},\n        ]}\n        columnProps={[{label: ' ', props: {}}]}\n      >\n        {props => (\n          <div\n            style={{\n              background: colors.soap100,\n              position: 'relative',\n              height: `calc(${space.xxl} + 2.25rem)`,\n              marginBottom: space.xs,\n            }}\n          >\n            <p style={{padding: space.xs}}>Outer Block</p>\n            <ActionBar>\n              <ActionBar.List {...props}>\n                <PrimaryButton>First Action</PrimaryButton>\n                <SecondaryButton>Second Action</SecondaryButton>\n              </ActionBar.List>\n            </ActionBar>\n          </div>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};;\n\nexport const ActionBarWithOverflowMenuStates = {\n  render: () => {\n    const [items] = React.useState<MyActionItem[]>([\n      {id: 'first', text: 'First Action'},\n      {id: 'second', text: 'Second Action'},\n      {id: 'third', text: 'Third Action'},\n      {id: 'fourth', text: 'Fourth Action'},\n      {id: 'fifth', text: 'Fifth Action'},\n    ]);\n\n    return (\n      <StaticStates>\n        <ComponentStatesTable\n          rowProps={[\n            {label: 'Default Action Bar', props: {}},\n            {label: 'Default Action Bar (400px width container)', props: {containerWidth: 400}},\n            {\n              label: 'Default Action Bar (280px width container)',\n              props: {containerWidth: 280},\n            },\n            {\n              label: 'Minimum Visible Items (as 1 button)',\n              props: {maximumVisible: 1},\n            },\n            {\n              label: 'Custom Number Visible Items (as 4 button)',\n              props: {maximumVisible: 2},\n            },\n            {\n              label: 'Maximum Visible Items (as 5 buttons)',\n              props: {maximumVisible: items.length, containerWidth: 830},\n            },\n            {\n              label: 'Maximum Visible Items (400px width)',\n              props: {maximumVisible: items.length, containerWidth: 400},\n            },\n            {\n              label: 'Maximum Visible Items (280px width)',\n              props: {maximumVisible: items.length, containerWidth: 280},\n            },\n          ]}\n          columnProps={[{label: 'Example', props: {}}]}\n        >\n          {({containerWidth, maximumVisible}) => (\n            <ActionBar items={items} maximumVisible={maximumVisible}>\n              <ActionBar.List\n                width={containerWidth}\n                position=\"relative\"\n                overflowButton={<ActionBar.OverflowButton aria-label=\"More actions\" />}\n              >\n                {(item: MyActionItem, index: number) => (\n                  <ActionBar.Item as={index === 0 ? PrimaryButton : undefined}>\n                    {item.text}\n                  </ActionBar.Item>\n                )}\n              </ActionBar.List>\n              <ActionBar.Menu.Popper>\n                <ActionBar.Menu.Card maxWidth={300} maxHeight={200}>\n                  <ActionBar.Menu.List>\n                    {(item: MyActionItem) => <ActionBar.Menu.Item>{item.text}</ActionBar.Menu.Item>}\n                  </ActionBar.Menu.List>\n                </ActionBar.Menu.Card>\n              </ActionBar.Menu.Popper>\n            </ActionBar>\n          )}\n        </ComponentStatesTable>\n      </StaticStates>\n    );\n  },\n};\n",locationsMap:{"action-bar-states":{startLoc:{col:31,line:109},endLoc:{col:1,line:141},startBody:{col:31,line:109},endBody:{col:1,line:141}},"action-bar-with-overflow-menu-states":{startLoc:{col:47,line:143},endLoc:{col:1,line:212},startBody:{col:47,line:143},endBody:{col:1,line:212}}}},storySource:{source:"import React from 'react';\nimport {ComponentStatesTable, StaticStates} from '@workday/canvas-kit-react/testing';\nimport {colors, space} from '@workday/canvas-kit-react/tokens';\nimport {ActionBar} from '@workday/canvas-kit-react/action-bar';\nimport {PrimaryButton, SecondaryButton} from '@workday/canvas-kit-react/button';\n\nexport default {\n  title: 'Testing/Buttons/ActionBar',\n  component: ActionBar,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\ntype MyActionItem = {\n  id: string;\n  text: React.ReactNode;\n};\n\nexport const ActionBarStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'With Absolute Positioning', props: {position: 'absolute'}},\n          {label: 'With Relative Positioning', props: {position: 'relative'}},\n          {label: 'Default (with fixed position)', props: {}},\n        ]}\n        columnProps={[{label: ' ', props: {}}]}\n      >\n        {props => (\n          <div\n            style={{\n              background: colors.soap100,\n              position: 'relative',\n              height: `calc(${space.xxl} + 2.25rem)`,\n              marginBottom: space.xs,\n            }}\n          >\n            <p style={{padding: space.xs}}>Outer Block</p>\n            <ActionBar>\n              <ActionBar.List {...props}>\n                <PrimaryButton>First Action</PrimaryButton>\n                <SecondaryButton>Second Action</SecondaryButton>\n              </ActionBar.List>\n            </ActionBar>\n          </div>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n\nexport const ActionBarWithOverflowMenuStates = {\n  render: () => {\n    const [items] = React.useState<MyActionItem[]>([\n      {id: 'first', text: 'First Action'},\n      {id: 'second', text: 'Second Action'},\n      {id: 'third', text: 'Third Action'},\n      {id: 'fourth', text: 'Fourth Action'},\n      {id: 'fifth', text: 'Fifth Action'},\n    ]);\n\n    return (\n      <StaticStates>\n        <ComponentStatesTable\n          rowProps={[\n            {label: 'Default Action Bar', props: {}},\n            {label: 'Default Action Bar (400px width container)', props: {containerWidth: 400}},\n            {\n              label: 'Default Action Bar (280px width container)',\n              props: {containerWidth: 280},\n            },\n            {\n              label: 'Minimum Visible Items (as 1 button)',\n              props: {maximumVisible: 1},\n            },\n            {\n              label: 'Custom Number Visible Items (as 4 button)',\n              props: {maximumVisible: 2},\n            },\n            {\n              label: 'Maximum Visible Items (as 5 buttons)',\n              props: {maximumVisible: items.length, containerWidth: 830},\n            },\n            {\n              label: 'Maximum Visible Items (400px width)',\n              props: {maximumVisible: items.length, containerWidth: 400},\n            },\n            {\n              label: 'Maximum Visible Items (280px width)',\n              props: {maximumVisible: items.length, containerWidth: 280},\n            },\n          ]}\n          columnProps={[{label: 'Example', props: {}}]}\n        >\n          {({containerWidth, maximumVisible}) => (\n            <ActionBar items={items} maximumVisible={maximumVisible}>\n              <ActionBar.List\n                width={containerWidth}\n                position=\"relative\"\n                overflowButton={<ActionBar.OverflowButton aria-label=\"More actions\" />}\n              >\n                {(item: MyActionItem, index: number) => (\n                  <ActionBar.Item as={index === 0 ? PrimaryButton : undefined}>\n                    {item.text}\n                  </ActionBar.Item>\n                )}\n              </ActionBar.List>\n              <ActionBar.Menu.Popper>\n                <ActionBar.Menu.Card maxWidth={300} maxHeight={200}>\n                  <ActionBar.Menu.List>\n                    {(item: MyActionItem) => <ActionBar.Menu.Item>{item.text}</ActionBar.Menu.Item>}\n                  </ActionBar.Menu.List>\n                </ActionBar.Menu.Card>\n              </ActionBar.Menu.Popper>\n            </ActionBar>\n          )}\n        </ComponentStatesTable>\n      </StaticStates>\n    );\n  },\n};\n",locationsMap:{"action-bar-states":{startLoc:{col:31,line:22},endLoc:{col:1,line:54},startBody:{col:31,line:22},endBody:{col:1,line:54}},"action-bar-with-overflow-menu-states":{startLoc:{col:47,line:56},endLoc:{col:1,line:125},startBody:{col:47,line:56},endBody:{col:1,line:125}}}},chromatic:{disable:!1}}};exports.ActionBarStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"With Absolute Positioning",props:{position:"absolute"}},{label:"With Relative Positioning",props:{position:"relative"}},{label:"Default (with fixed position)",props:{}}],columnProps:[{label:" ",props:{}}],children:props=>(0,_jsxRuntime.jsxs)("div",{style:{background:_tokens.colors.soap100,position:"relative",height:`calc(${_tokens.space.xxl} + 2.25rem)`,marginBottom:_tokens.space.xs},children:[(0,_jsxRuntime.jsx)("p",{style:{padding:_tokens.space.xs},children:"Outer Block"}),(0,_jsxRuntime.jsx)(_actionBar.ActionBar,{children:(0,_jsxRuntime.jsxs)(_actionBar.ActionBar.List,{...props,children:[(0,_jsxRuntime.jsx)(_button.PrimaryButton,{children:"First Action"}),(0,_jsxRuntime.jsx)(_button.SecondaryButton,{children:"Second Action"})]})})]})})})},exports.ActionBarWithOverflowMenuStates={render:()=>{const[items]=_react.default.useState([{id:"first",text:"First Action"},{id:"second",text:"Second Action"},{id:"third",text:"Third Action"},{id:"fourth",text:"Fourth Action"},{id:"fifth",text:"Fifth Action"}]);return(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"Default Action Bar",props:{}},{label:"Default Action Bar (400px width container)",props:{containerWidth:400}},{label:"Default Action Bar (280px width container)",props:{containerWidth:280}},{label:"Minimum Visible Items (as 1 button)",props:{maximumVisible:1}},{label:"Custom Number Visible Items (as 4 button)",props:{maximumVisible:2}},{label:"Maximum Visible Items (as 5 buttons)",props:{maximumVisible:items.length,containerWidth:830}},{label:"Maximum Visible Items (400px width)",props:{maximumVisible:items.length,containerWidth:400}},{label:"Maximum Visible Items (280px width)",props:{maximumVisible:items.length,containerWidth:280}}],columnProps:[{label:"Example",props:{}}],children:({containerWidth,maximumVisible})=>(0,_jsxRuntime.jsxs)(_actionBar.ActionBar,{items,maximumVisible,children:[(0,_jsxRuntime.jsx)(_actionBar.ActionBar.List,{width:containerWidth,position:"relative",overflowButton:(0,_jsxRuntime.jsx)(_actionBar.ActionBar.OverflowButton,{"aria-label":"More actions"}),children:(item,index)=>(0,_jsxRuntime.jsx)(_actionBar.ActionBar.Item,{as:0===index?_button.PrimaryButton:void 0,children:item.text})}),(0,_jsxRuntime.jsx)(_actionBar.ActionBar.Menu.Popper,{children:(0,_jsxRuntime.jsx)(_actionBar.ActionBar.Menu.Card,{maxWidth:300,maxHeight:200,children:(0,_jsxRuntime.jsx)(_actionBar.ActionBar.Menu.List,{children:item=>(0,_jsxRuntime.jsx)(_actionBar.ActionBar.Menu.Item,{children:item.text})})})})]})})})}};module.exports.__namedExportsOrder=["ActionBarWithOverflowMenuStates","ActionBarStates"]}}]);