"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[3132],{"./modules/docs/mdx/accessibility/Headers.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),_workday_canvas_kit_docs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./modules/docs/index.ts"),_examples_GlobalHeader__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./modules/docs/mdx/accessibility/examples/GlobalHeader.tsx");function _createMdxContent(props){const _components=Object.assign({h2:"h2",p:"p",code:"code",h3:"h3",ul:"ul",li:"li"},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_5__.RP)(),props.components);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.W8,{title:"Guides/Accessibility/Examples/Page Header"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"global-header",children:"Global Header"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Developers building internal Workday applications will likely not need to create this component.\nHowever, if you're building components to be used outside of Workday, this is a helpful reference\nfor building a global navigation header that looks like our internal ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"GlobalHeader"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"tooltip-usage",children:"Tooltip usage"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"default"})," variant ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<Tooltip>"})," is used on all of the icon buttons, which will automatically set\nthe ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"aria-label"})," of the child component to the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"title"})," prop string."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"describe"})," variant ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<Tooltip>"}),' is used instead on the "MENU" button because this is a text\nbutton. This variant will instead set ',(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"aria-describedby"}),' to the child component referencing the\nthe tooltip\'s text "Global Navigation" to ensure that the visible button text "MENU" is not\noverriden by an ',(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"aria-label"}),"."]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"count-badge-usage",children:"Count badge usage"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["When ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<CountBadge>"})," is used as a sibling component for button, the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"aria-describedby"})," property is\nset on the button referencing the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"id"})," value of the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<CountBadge>"}),". This practice helps support\nusers depending on screen readers to describe both the name of the button and the value of the\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<CountBadge>"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"When a web app dynamically updates count badges in real-time, consider the following accessibility\nenhancements to support live, real-time announcements for screen readers:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<CountBadge>"})," component is rendered as a child of the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<AriaLiveRegion>"})," container."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<AriaLiveRegion>"})," container is assigned a name by using ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"aria-labelledby"})," to reference the\nname of the icon button ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:'"Notifications"'}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:["The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<AccessibleHide>"})," component is used following the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<CountBadge>"}),' to render a hidden word\n"new" that only screen reader users can access.']}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:["When the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<CountBadge>"}),' is updated, then screen readers can automatically describe (in real-time)\nthe name of the live region, "Notifications" and the text updated inside of it, "1 new".']}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_docs__WEBPACK_IMPORTED_MODULE_3__.ExampleCodeBlock,{code:_examples_GlobalHeader__WEBPACK_IMPORTED_MODULE_4__.Basic})]})}const __WEBPACK_DEFAULT_EXPORT__=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_5__.RP)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,Object.assign({},props,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,props)})):_createMdxContent(props)}},"./modules/docs/mdx/accessibility/examples/GlobalHeader.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.GlobalHeader=exports.Basic=void 0;var React=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_common=__webpack_require__("./modules/react/common/index.ts"),_canvasTokensWeb=__webpack_require__("./node_modules/@workday/canvas-tokens-web/dist/es6/index.js"),_canvasKitStyling=__webpack_require__("./modules/styling/index.ts"),_canvasSystemIconsWeb=__webpack_require__("./node_modules/@workday/canvas-system-icons-web/dist/es6/index.js"),_button=__webpack_require__("./modules/react/button/index.ts"),_avatar=__webpack_require__("./modules/preview-react/avatar/index.ts"),_layout=__webpack_require__("./modules/react/layout/index.ts"),_tooltip=__webpack_require__("./modules/react/tooltip/index.ts"),_combobox=__webpack_require__("./modules/react/combobox/index.ts"),_textInput=__webpack_require__("./modules/react/text-input/index.ts"),_menu=__webpack_require__("./modules/react/menu/index.ts"),_icon=__webpack_require__("./modules/react/icon/index.ts"),_badge=__webpack_require__("./modules/react/badge/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}const tasks=["Request Time Off","Create Expense Report","Change Benefits"],styleOverrides={headerWrapper:(0,_canvasKitStyling.createStyles)({display:"flex",alignItems:"center",justifyContent:"space-between",boxSizing:"border-box",..._canvasTokensWeb.system.type.subtext.large,WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",backgroundColor:_canvasTokensWeb.system.color.bg.default,padding:_canvasTokensWeb.system.space.x1}),flexItems:(0,_canvasKitStyling.createStyles)({gap:_canvasTokensWeb.system.space.x4,alignItems:"center",marginX:_canvasTokensWeb.system.space.x3}),inputGroupInner:(0,_canvasKitStyling.createStyles)({marginLeft:"1rem",width:(0,_canvasKitStyling.px2rem)(20),transition:"opacity 100ms ease"}),comboboxContainer:(0,_canvasKitStyling.createStyles)({margin:"auto",width:"100%",maxWidth:_canvasKitStyling.calc.multiply(_canvasTokensWeb.system.space.x20,6)}),comboboxInput:(0,_canvasKitStyling.createStyles)({borderRadius:(0,_canvasKitStyling.px2rem)(1e3),width:"20rem"}),comboboxMenuList:(0,_canvasKitStyling.createStyles)({maxHeight:(0,_canvasKitStyling.px2rem)(200)}),menuButtonStyles:(0,_canvasKitStyling.createStyles)({textDecoration:"none",color:_canvasTokensWeb.system.color.fg.strong}),notificationContainerStyles:(0,_canvasKitStyling.createStyles)({boxSizing:"border-box",position:"relative"}),countBadgeStyles:(0,_canvasKitStyling.createStyles)({boxSizing:"border-box",position:"absolute",top:_canvasKitStyling.calc.negate(_canvasTokensWeb.system.space.x1),insetInlineEnd:_canvasKitStyling.calc.negate(_canvasTokensWeb.system.space.x1)}),actionButtonStyles:(0,_canvasKitStyling.createStyles)({gap:_canvasTokensWeb.system.space.x4,margin:_canvasTokensWeb.system.space.x4})},useAutocompleteInput=(0,_common.composeHooks)((0,_common.createElemPropsHook)(_combobox.useComboboxModel)((model=>({onKeyPress(event){model.events.show(event)}}))),_combobox.useComboboxInput),AutoCompleteInput=(0,_common.createSubcomponent)(_textInput.TextInput)({modelHook:_combobox.useComboboxModel,elemPropsHook:useAutocompleteInput})(((elemProps,Element)=>(0,_jsxRuntime.jsx)(_combobox.Combobox.Input,{as:Element,...elemProps}))),Basic=()=>{const[notifications,setNotifications]=React.useState(0);return(0,_jsxRuntime.jsxs)("header",{children:[(0,_jsxRuntime.jsx)(GlobalHeader,{notifications}),(0,_jsxRuntime.jsxs)(_layout.Flex,{cs:styleOverrides.actionButtonStyles,children:[(0,_jsxRuntime.jsx)(_button.SecondaryButton,{onClick:function handleAdd(){setNotifications((prev=>prev+1))},children:"Add notification"}),(0,_jsxRuntime.jsx)(_button.TertiaryButton,{onClick:function handleClear(){setNotifications(0)},children:"Clear"})]})]})};exports.Basic=Basic,Basic.displayName="Basic";const GlobalHeader=exports.GlobalHeader=(0,_common.createComponent)("div")({displayName:"GlobalHeader",Component:({notifications,...props})=>(0,_jsxRuntime.jsxs)("div",{className:styleOverrides.headerWrapper,children:[(0,_jsxRuntime.jsxs)(_layout.Flex,{cs:styleOverrides.flexItems,children:[(0,_jsxRuntime.jsx)(_tooltip.Tooltip,{title:"Global Navigation",type:"describe",children:(0,_jsxRuntime.jsx)(_button.TertiaryButton,{icon:_canvasSystemIconsWeb.justifyIcon,cs:styleOverrides.menuButtonStyles,children:"MENU"})}),(0,_jsxRuntime.jsx)(_tooltip.Tooltip,{title:"Workday Home",children:(0,_jsxRuntime.jsx)(_button.TertiaryButton,{children:(0,_jsxRuntime.jsx)("img",{src:"https://design.workday.com/images/ck-dub-logo-blue.svg",alt:""})})})]}),(0,_jsxRuntime.jsx)(_layout.Flex,{cs:styleOverrides.flexItems,children:(0,_jsxRuntime.jsx)(Autocomplete,{"aria-label":"Search Workday"})}),(0,_jsxRuntime.jsxs)(_layout.Flex,{cs:styleOverrides.flexItems,children:[(0,_jsxRuntime.jsx)(_tooltip.Tooltip,{title:"Assistant",children:(0,_jsxRuntime.jsx)(_button.TertiaryButton,{icon:_canvasSystemIconsWeb.assistantIcon})}),(0,_jsxRuntime.jsx)(NotificationLiveBadge,{cnt:notifications}),(0,_jsxRuntime.jsx)(_tooltip.Tooltip,{title:"My Tasks",children:(0,_jsxRuntime.jsx)(_button.TertiaryButton,{icon:_canvasSystemIconsWeb.inboxIcon})}),(0,_jsxRuntime.jsx)(_tooltip.Tooltip,{title:"Profile",children:(0,_jsxRuntime.jsx)(_avatar.Avatar,{name:"Logan McNeil",isDecorative:!0})})]})]})}),Autocomplete=(0,_common.createComponent)("div")({displayName:"Autocomplete",Component:props=>{const[searchText,setSearchText]=React.useState("");const{model,loader}=(0,_combobox.useComboboxLoader)({total:0,pageSize:20,load:async({pageNumber,pageSize,filter})=>new Promise((resolve=>{setTimeout((()=>{const start=(pageNumber-1)*pageSize,end=start+pageSize,filteredTasks=tasks.filter((i=>""===searchText.trim()||"string"!=typeof searchText||i.toLowerCase().includes(searchText.trim().toLowerCase()))),total=filteredTasks.length,items=filteredTasks.slice(start,end);resolve({items,total})}),300)})),onShow(){loader.load()}},_combobox.useComboboxModel);return(0,_jsxRuntime.jsxs)(_combobox.Combobox,{model,children:[(0,_jsxRuntime.jsxs)(_textInput.InputGroup,{children:[(0,_jsxRuntime.jsx)(_textInput.InputGroup.InnerStart,{cs:styleOverrides.inputGroupInner,children:(0,_jsxRuntime.jsx)(_icon.SystemIcon,{icon:_canvasSystemIconsWeb.searchIcon})}),(0,_jsxRuntime.jsx)(_textInput.InputGroup.Input,{as:AutoCompleteInput,cs:styleOverrides.comboboxInput,onChange:function handleChange(e){setSearchText(e.target.value)},value:searchText,...props})]}),(0,_jsxRuntime.jsx)(_combobox.Combobox.Menu.Popper,{children:(0,_jsxRuntime.jsx)(_combobox.Combobox.Menu.Card,{children:0===model.state.items.length?(0,_jsxRuntime.jsx)(_menu.StyledMenuItem,{as:"span",children:"No Results Found"}):model.state.items.length>0&&(0,_jsxRuntime.jsx)(_combobox.Combobox.Menu.List,{maxHeight:(0,_canvasKitStyling.px2rem)(200),children:item=>(0,_jsxRuntime.jsx)(_combobox.Combobox.Menu.Item,{children:item})})})})]})}}),NotificationLiveBadge=(0,_common.createComponent)("span")({displayName:"NotificationLiveBadge",Component:({cnt=0,...props})=>{const btnId=(0,_common.useUniqueId)(),badgeId=(0,_common.useUniqueId)();return(0,_jsxRuntime.jsxs)(_layout.Flex,{cs:styleOverrides.notificationContainerStyles,children:[(0,_jsxRuntime.jsx)(_tooltip.Tooltip,{title:"Notifications",children:(0,_jsxRuntime.jsx)(_button.TertiaryButton,{id:btnId,icon:_canvasSystemIconsWeb.notificationsIcon,"aria-describedby":cnt>0?badgeId:void 0,...props})}),(0,_jsxRuntime.jsx)(_common.AriaLiveRegion,{"aria-labelledby":btnId,children:cnt>0&&(0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[(0,_jsxRuntime.jsx)(_badge.CountBadge,{id:badgeId,count:cnt,limit:100,cs:styleOverrides.countBadgeStyles}),(0,_jsxRuntime.jsx)(_common.AccessibleHide,{children:"New"})]})})]})}});Basic.__RAW__="import * as React from 'react';\nimport {\n  AccessibleHide,\n  AriaLiveRegion,\n  composeHooks,\n  createComponent,\n  createElemPropsHook,\n  createSubcomponent,\n  ExtractProps,\n  useUniqueId,\n} from '@workday/canvas-kit-react/common';\nimport {system} from '@workday/canvas-tokens-web';\nimport {calc, createStyles, px2rem} from '@workday/canvas-kit-styling';\nimport {\n  notificationsIcon,\n  inboxIcon,\n  justifyIcon,\n  assistantIcon,\n  searchIcon,\n} from '@workday/canvas-system-icons-web';\n\nimport {SecondaryButton, TertiaryButton} from '@workday/canvas-kit-react/button';\nimport {Avatar} from '@workday/canvas-kit-preview-react/avatar';\nimport {Flex, FlexProps} from '@workday/canvas-kit-react/layout';\nimport {LoadReturn} from '@workday/canvas-kit-react/collection';\nimport {Tooltip} from '@workday/canvas-kit-react/tooltip';\nimport {\n  Combobox,\n  useComboboxModel,\n  useComboboxInput,\n  useComboboxLoader,\n} from '@workday/canvas-kit-react/combobox';\nimport {InputGroup, TextInput} from '@workday/canvas-kit-react/text-input';\nimport {StyledMenuItem} from '@workday/canvas-kit-react/menu';\nimport {SystemIcon} from '@workday/canvas-kit-react/icon';\nimport {CountBadge} from '@workday/canvas-kit-react/badge';\n\ninterface GlobalHeaderProps extends FlexProps {\n  notifications: number;\n}\ninterface LiveCountBadgeProps extends FlexProps {\n  cnt: number;\n}\n\nconst tasks = ['Request Time Off', 'Create Expense Report', 'Change Benefits'];\n\nconst styleOverrides = {\n  headerWrapper: createStyles({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    boxSizing: 'border-box',\n    ...system.type.subtext.large,\n    WebkitFontSmoothing: 'antialiased',\n    MozOsxFontSmoothing: 'grayscale',\n    backgroundColor: system.color.bg.default,\n    padding: system.space.x1,\n  }),\n  flexItems: createStyles({\n    gap: system.space.x4,\n    alignItems: 'center',\n    marginX: system.space.x3,\n  }),\n  inputGroupInner: createStyles({\n    marginLeft: '1rem',\n    width: px2rem(20),\n    transition: 'opacity 100ms ease',\n  }),\n  comboboxContainer: createStyles({\n    margin: 'auto',\n    width: '100%',\n    maxWidth: calc.multiply(system.space.x20, 6),\n  }),\n  comboboxInput: createStyles({\n    borderRadius: px2rem(1000),\n    width: '20rem',\n  }),\n  comboboxMenuList: createStyles({\n    maxHeight: px2rem(200),\n  }),\n  menuButtonStyles: createStyles({\n    textDecoration: 'none',\n    color: system.color.fg.strong,\n  }),\n  notificationContainerStyles: createStyles({\n    boxSizing: 'border-box',\n    position: 'relative',\n  }),\n  countBadgeStyles: createStyles({\n    boxSizing: 'border-box',\n    position: 'absolute',\n    top: calc.negate(system.space.x1),\n    insetInlineEnd: calc.negate(system.space.x1),\n  }),\n  actionButtonStyles: createStyles({\n    gap: system.space.x4,\n    margin: system.space.x4,\n  }),\n};\n\nconst useAutocompleteInput = composeHooks(\n  createElemPropsHook(useComboboxModel)(model => {\n    return {\n      onKeyPress(event: React.KeyboardEvent) {\n        model.events.show(event);\n      },\n    };\n  }),\n  useComboboxInput\n);\n\nconst AutoCompleteInput = createSubcomponent(TextInput)({\n  modelHook: useComboboxModel,\n  elemPropsHook: useAutocompleteInput,\n})<ExtractProps<typeof Combobox.Input, never>>((elemProps, Element) => {\n  return <Combobox.Input as={Element} {...elemProps} />;\n});\n\nexport const Basic = () => {\n  const [notifications, setNotifications] = React.useState(0);\n\n  function handleAdd() {\n    setNotifications(prev => prev + 1);\n  }\n\n  function handleClear() {\n    setNotifications(0);\n  }\n\n  return (\n    <header>\n      <GlobalHeader notifications={notifications} />\n      <Flex cs={styleOverrides.actionButtonStyles}>\n        <SecondaryButton onClick={handleAdd}>Add notification</SecondaryButton>\n        <TertiaryButton onClick={handleClear}>Clear</TertiaryButton>\n      </Flex>\n    </header>\n  );\n};\n\nexport const GlobalHeader = createComponent('div')({\n  displayName: 'GlobalHeader',\n  Component: ({notifications, ...props}: GlobalHeaderProps) => (\n    <div className={styleOverrides.headerWrapper}>\n      <Flex cs={styleOverrides.flexItems}>\n        <Tooltip title=\"Global Navigation\" type=\"describe\">\n          <TertiaryButton icon={justifyIcon} cs={styleOverrides.menuButtonStyles}>\n            MENU\n          </TertiaryButton>\n        </Tooltip>\n        <Tooltip title=\"Workday Home\">\n          <TertiaryButton>\n            <img src=\"https://design.workday.com/images/ck-dub-logo-blue.svg\" alt=\"\" />\n          </TertiaryButton>\n        </Tooltip>\n      </Flex>\n      <Flex cs={styleOverrides.flexItems}>\n        <Autocomplete aria-label=\"Search Workday\" />\n      </Flex>\n      <Flex cs={styleOverrides.flexItems}>\n        <Tooltip title=\"Assistant\">\n          <TertiaryButton icon={assistantIcon} />\n        </Tooltip>\n\n        <NotificationLiveBadge cnt={notifications} />\n\n        <Tooltip title=\"My Tasks\">\n          <TertiaryButton icon={inboxIcon} />\n        </Tooltip>\n        <Tooltip title=\"Profile\">\n          <Avatar name=\"Logan McNeil\" isDecorative />\n        </Tooltip>\n      </Flex>\n    </div>\n  ),\n});\n\nconst Autocomplete = createComponent('div')({\n  displayName: 'Autocomplete',\n  Component: props => {\n    const [searchText, setSearchText] = React.useState('');\n\n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n      setSearchText(e.target.value);\n    }\n\n    const {model, loader} = useComboboxLoader(\n      {\n        // You can start with any number that makes sense.\n        total: 0,\n\n        // Pick whatever number makes sense for your API\n        pageSize: 20,\n\n        // A load function that will be called by the loader. You must return a promise that returns\n        // an object like `{items: [], total: 0}`. The `items` will be merged into the loader's cache\n        async load({pageNumber, pageSize, filter}) {\n          return new Promise<LoadReturn<string>>(resolve => {\n            // simulate a server response by resolving after a period of time\n            setTimeout(() => {\n              // simulate paging and filtering based on pre-computed items\n              const start = (pageNumber - 1) * pageSize;\n              const end = start + pageSize;\n              const filteredTasks = tasks.filter(i => {\n                if (searchText.trim() === '' || typeof searchText !== 'string') {\n                  return true;\n                }\n                return i.toLowerCase().includes(searchText.trim().toLowerCase());\n              });\n\n              const total = filteredTasks.length;\n              const items = filteredTasks.slice(start, end);\n\n              resolve({\n                items,\n                total,\n              });\n            }, 300);\n          });\n        },\n        onShow() {\n          // The `shouldLoad` cancels while the combobox menu is hidden, so let's load when it is\n          // visible\n          loader.load();\n        },\n      },\n      useComboboxModel\n    );\n\n    return (\n      <Combobox model={model}>\n        <InputGroup>\n          <InputGroup.InnerStart cs={styleOverrides.inputGroupInner}>\n            <SystemIcon icon={searchIcon} />\n          </InputGroup.InnerStart>\n          <InputGroup.Input\n            as={AutoCompleteInput}\n            cs={styleOverrides.comboboxInput}\n            onChange={handleChange}\n            value={searchText}\n            {...props}\n          />\n        </InputGroup>\n        <Combobox.Menu.Popper>\n          <Combobox.Menu.Card>\n            {model.state.items.length === 0 ? (\n              <StyledMenuItem as=\"span\">No Results Found</StyledMenuItem>\n            ) : (\n              model.state.items.length > 0 && (\n                <Combobox.Menu.List maxHeight={px2rem(200)}>\n                  {item => <Combobox.Menu.Item>{item}</Combobox.Menu.Item>}\n                </Combobox.Menu.List>\n              )\n            )}\n          </Combobox.Menu.Card>\n        </Combobox.Menu.Popper>\n      </Combobox>\n    );\n  },\n});\n\nconst NotificationLiveBadge = createComponent('span')({\n  displayName: 'NotificationLiveBadge',\n  Component: ({cnt = 0, ...props}: LiveCountBadgeProps) => {\n    const btnId = useUniqueId();\n    const badgeId = useUniqueId();\n\n    return (\n      <Flex cs={styleOverrides.notificationContainerStyles}>\n        <Tooltip title=\"Notifications\">\n          <TertiaryButton\n            id={btnId}\n            icon={notificationsIcon}\n            aria-describedby={cnt > 0 ? badgeId : undefined}\n            {...props}\n          />\n        </Tooltip>\n        <AriaLiveRegion aria-labelledby={btnId}>\n          {cnt > 0 && (\n            <>\n              <CountBadge\n                id={badgeId}\n                count={cnt}\n                limit={100}\n                cs={styleOverrides.countBadgeStyles}\n              />\n              <AccessibleHide>New</AccessibleHide>\n            </>\n          )}\n        </AriaLiveRegion>\n      </Flex>\n    );\n  },\n});\n",GlobalHeader.__RAW__="import * as React from 'react';\nimport {\n  AccessibleHide,\n  AriaLiveRegion,\n  composeHooks,\n  createComponent,\n  createElemPropsHook,\n  createSubcomponent,\n  ExtractProps,\n  useUniqueId,\n} from '@workday/canvas-kit-react/common';\nimport {system} from '@workday/canvas-tokens-web';\nimport {calc, createStyles, px2rem} from '@workday/canvas-kit-styling';\nimport {\n  notificationsIcon,\n  inboxIcon,\n  justifyIcon,\n  assistantIcon,\n  searchIcon,\n} from '@workday/canvas-system-icons-web';\n\nimport {SecondaryButton, TertiaryButton} from '@workday/canvas-kit-react/button';\nimport {Avatar} from '@workday/canvas-kit-preview-react/avatar';\nimport {Flex, FlexProps} from '@workday/canvas-kit-react/layout';\nimport {LoadReturn} from '@workday/canvas-kit-react/collection';\nimport {Tooltip} from '@workday/canvas-kit-react/tooltip';\nimport {\n  Combobox,\n  useComboboxModel,\n  useComboboxInput,\n  useComboboxLoader,\n} from '@workday/canvas-kit-react/combobox';\nimport {InputGroup, TextInput} from '@workday/canvas-kit-react/text-input';\nimport {StyledMenuItem} from '@workday/canvas-kit-react/menu';\nimport {SystemIcon} from '@workday/canvas-kit-react/icon';\nimport {CountBadge} from '@workday/canvas-kit-react/badge';\n\ninterface GlobalHeaderProps extends FlexProps {\n  notifications: number;\n}\ninterface LiveCountBadgeProps extends FlexProps {\n  cnt: number;\n}\n\nconst tasks = ['Request Time Off', 'Create Expense Report', 'Change Benefits'];\n\nconst styleOverrides = {\n  headerWrapper: createStyles({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    boxSizing: 'border-box',\n    ...system.type.subtext.large,\n    WebkitFontSmoothing: 'antialiased',\n    MozOsxFontSmoothing: 'grayscale',\n    backgroundColor: system.color.bg.default,\n    padding: system.space.x1,\n  }),\n  flexItems: createStyles({\n    gap: system.space.x4,\n    alignItems: 'center',\n    marginX: system.space.x3,\n  }),\n  inputGroupInner: createStyles({\n    marginLeft: '1rem',\n    width: px2rem(20),\n    transition: 'opacity 100ms ease',\n  }),\n  comboboxContainer: createStyles({\n    margin: 'auto',\n    width: '100%',\n    maxWidth: calc.multiply(system.space.x20, 6),\n  }),\n  comboboxInput: createStyles({\n    borderRadius: px2rem(1000),\n    width: '20rem',\n  }),\n  comboboxMenuList: createStyles({\n    maxHeight: px2rem(200),\n  }),\n  menuButtonStyles: createStyles({\n    textDecoration: 'none',\n    color: system.color.fg.strong,\n  }),\n  notificationContainerStyles: createStyles({\n    boxSizing: 'border-box',\n    position: 'relative',\n  }),\n  countBadgeStyles: createStyles({\n    boxSizing: 'border-box',\n    position: 'absolute',\n    top: calc.negate(system.space.x1),\n    insetInlineEnd: calc.negate(system.space.x1),\n  }),\n  actionButtonStyles: createStyles({\n    gap: system.space.x4,\n    margin: system.space.x4,\n  }),\n};\n\nconst useAutocompleteInput = composeHooks(\n  createElemPropsHook(useComboboxModel)(model => {\n    return {\n      onKeyPress(event: React.KeyboardEvent) {\n        model.events.show(event);\n      },\n    };\n  }),\n  useComboboxInput\n);\n\nconst AutoCompleteInput = createSubcomponent(TextInput)({\n  modelHook: useComboboxModel,\n  elemPropsHook: useAutocompleteInput,\n})<ExtractProps<typeof Combobox.Input, never>>((elemProps, Element) => {\n  return <Combobox.Input as={Element} {...elemProps} />;\n});\n\nexport const Basic = () => {\n  const [notifications, setNotifications] = React.useState(0);\n\n  function handleAdd() {\n    setNotifications(prev => prev + 1);\n  }\n\n  function handleClear() {\n    setNotifications(0);\n  }\n\n  return (\n    <header>\n      <GlobalHeader notifications={notifications} />\n      <Flex cs={styleOverrides.actionButtonStyles}>\n        <SecondaryButton onClick={handleAdd}>Add notification</SecondaryButton>\n        <TertiaryButton onClick={handleClear}>Clear</TertiaryButton>\n      </Flex>\n    </header>\n  );\n};\n\nexport const GlobalHeader = createComponent('div')({\n  displayName: 'GlobalHeader',\n  Component: ({notifications, ...props}: GlobalHeaderProps) => (\n    <div className={styleOverrides.headerWrapper}>\n      <Flex cs={styleOverrides.flexItems}>\n        <Tooltip title=\"Global Navigation\" type=\"describe\">\n          <TertiaryButton icon={justifyIcon} cs={styleOverrides.menuButtonStyles}>\n            MENU\n          </TertiaryButton>\n        </Tooltip>\n        <Tooltip title=\"Workday Home\">\n          <TertiaryButton>\n            <img src=\"https://design.workday.com/images/ck-dub-logo-blue.svg\" alt=\"\" />\n          </TertiaryButton>\n        </Tooltip>\n      </Flex>\n      <Flex cs={styleOverrides.flexItems}>\n        <Autocomplete aria-label=\"Search Workday\" />\n      </Flex>\n      <Flex cs={styleOverrides.flexItems}>\n        <Tooltip title=\"Assistant\">\n          <TertiaryButton icon={assistantIcon} />\n        </Tooltip>\n\n        <NotificationLiveBadge cnt={notifications} />\n\n        <Tooltip title=\"My Tasks\">\n          <TertiaryButton icon={inboxIcon} />\n        </Tooltip>\n        <Tooltip title=\"Profile\">\n          <Avatar name=\"Logan McNeil\" isDecorative />\n        </Tooltip>\n      </Flex>\n    </div>\n  ),\n});\n\nconst Autocomplete = createComponent('div')({\n  displayName: 'Autocomplete',\n  Component: props => {\n    const [searchText, setSearchText] = React.useState('');\n\n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n      setSearchText(e.target.value);\n    }\n\n    const {model, loader} = useComboboxLoader(\n      {\n        // You can start with any number that makes sense.\n        total: 0,\n\n        // Pick whatever number makes sense for your API\n        pageSize: 20,\n\n        // A load function that will be called by the loader. You must return a promise that returns\n        // an object like `{items: [], total: 0}`. The `items` will be merged into the loader's cache\n        async load({pageNumber, pageSize, filter}) {\n          return new Promise<LoadReturn<string>>(resolve => {\n            // simulate a server response by resolving after a period of time\n            setTimeout(() => {\n              // simulate paging and filtering based on pre-computed items\n              const start = (pageNumber - 1) * pageSize;\n              const end = start + pageSize;\n              const filteredTasks = tasks.filter(i => {\n                if (searchText.trim() === '' || typeof searchText !== 'string') {\n                  return true;\n                }\n                return i.toLowerCase().includes(searchText.trim().toLowerCase());\n              });\n\n              const total = filteredTasks.length;\n              const items = filteredTasks.slice(start, end);\n\n              resolve({\n                items,\n                total,\n              });\n            }, 300);\n          });\n        },\n        onShow() {\n          // The `shouldLoad` cancels while the combobox menu is hidden, so let's load when it is\n          // visible\n          loader.load();\n        },\n      },\n      useComboboxModel\n    );\n\n    return (\n      <Combobox model={model}>\n        <InputGroup>\n          <InputGroup.InnerStart cs={styleOverrides.inputGroupInner}>\n            <SystemIcon icon={searchIcon} />\n          </InputGroup.InnerStart>\n          <InputGroup.Input\n            as={AutoCompleteInput}\n            cs={styleOverrides.comboboxInput}\n            onChange={handleChange}\n            value={searchText}\n            {...props}\n          />\n        </InputGroup>\n        <Combobox.Menu.Popper>\n          <Combobox.Menu.Card>\n            {model.state.items.length === 0 ? (\n              <StyledMenuItem as=\"span\">No Results Found</StyledMenuItem>\n            ) : (\n              model.state.items.length > 0 && (\n                <Combobox.Menu.List maxHeight={px2rem(200)}>\n                  {item => <Combobox.Menu.Item>{item}</Combobox.Menu.Item>}\n                </Combobox.Menu.List>\n              )\n            )}\n          </Combobox.Menu.Card>\n        </Combobox.Menu.Popper>\n      </Combobox>\n    );\n  },\n});\n\nconst NotificationLiveBadge = createComponent('span')({\n  displayName: 'NotificationLiveBadge',\n  Component: ({cnt = 0, ...props}: LiveCountBadgeProps) => {\n    const btnId = useUniqueId();\n    const badgeId = useUniqueId();\n\n    return (\n      <Flex cs={styleOverrides.notificationContainerStyles}>\n        <Tooltip title=\"Notifications\">\n          <TertiaryButton\n            id={btnId}\n            icon={notificationsIcon}\n            aria-describedby={cnt > 0 ? badgeId : undefined}\n            {...props}\n          />\n        </Tooltip>\n        <AriaLiveRegion aria-labelledby={btnId}>\n          {cnt > 0 && (\n            <>\n              <CountBadge\n                id={badgeId}\n                count={cnt}\n                limit={100}\n                cs={styleOverrides.countBadgeStyles}\n              />\n              <AccessibleHide>New</AccessibleHide>\n            </>\n          )}\n        </AriaLiveRegion>\n      </Flex>\n    );\n  },\n});\n"}}]);