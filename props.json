{
  "@workday/canvas-kit-react/action-bar": {
    "ActionBar": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/action-bar/lib/ActionBar.tsx",
      "description": "",
      "displayName": "ActionBar",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The contents of the ActionBar. Can be `ActionBar` children or any valid elements.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/action-bar/lib/ActionBar.tsx",
            "name": "ActionBarProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/action-bar/lib/ActionBar.tsx",
              "name": "ActionBarProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "id": {
          "defaultValue": {
            "value": "useUniqueId()"
          },
          "description": "Optional id for the whole `ActionBar` group. If not provided, a unique id will be created.",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "orientation": {
          "defaultValue": {
            "value": "'horizontal'"
          },
          "description": "The default ActionBar sub-components only handle rendering of button group in a horizontal orientation,\nbut the sub-components could be replaced to handle vertical orientations.",
          "name": "orientation",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Orientation",
            "value": [
              {
                "value": "\"vertical\""
              },
              {
                "value": "\"horizontal\""
              }
            ]
          }
        },
        "menuConfig": {
          "defaultValue": null,
          "description": "",
          "name": "menuConfig",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Partial<{ mode: \"single\" | \"multiple\"; returnFocusRef: RefObject<any>; initialFocusRef: RefObject<any> | undefined; id: string; initialVisibility: Visibility; ... 12 more ...; items: any[]; }> | undefined",
            "value": [
              {
                "value": "Partial<{ mode: \"single\" | \"multiple\"; returnFocusRef: RefObject<any> | undefined; initialFocusRef: RefObject<any> | undefined; id: string; initialVisibility: Visibility; ... 12 more ...; items: any[]; }>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "initialHiddenIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialHiddenIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "containerWidth": {
          "defaultValue": null,
          "description": "",
          "name": "containerWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "shouldCalculateOverflow": {
          "defaultValue": {
            "value": "true"
          },
          "description": "Determines if overflow should actually occur. For example, touch devices are better at\nside-scrolling than mouse devices. In these cases, it makes sense to disable overflowing.",
          "name": "shouldCalculateOverflow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "initialSelectedIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialSelectedIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SelectedIds",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"all\""
              }
            ]
          }
        },
        "initialUnselectedIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialUnselectedIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "selection": {
          "defaultValue": null,
          "description": "",
          "name": "selection",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SelectionManager",
            "value": [
              {
                "value": "SelectionManager",
                "description": "A SelectionManager is used",
                "fullComment": "A SelectionManager is used",
                "tags": {}
              }
            ]
          }
        },
        "initialCursorId": {
          "defaultValue": null,
          "description": "Initial cursor position. If not provided, the cursor will point to the first item in the list",
          "name": "initialCursorId",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "columnCount": {
          "defaultValue": {
            "value": "0"
          },
          "description": "If this is set it will cause a wrapping of a list that will turn it into a grid",
          "name": "columnCount",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "navigation": {
          "defaultValue": null,
          "description": "Controls the state changes when the user sends navigation events to the model. For example,\nwhen the user hits the \"right\" arrow, a behavior hook will determine directionality\n(left-to-right or right-to-left) and call the correct navigation method. In our example, a\nleft-to-right language would send a `getNext`. The navigation manager may return the next item\nin the list. Different managers can be created for slightly different use cases. The default\nnavigation manager will accept `orientation` and directionality to determine mapping.\n\nAn example override might be a tab list with an overflow menu that is meant to be transparent\nto screen reader users. This would require the overflow menu to accept both up/down keys as\nwell as left/right keys to give a more consistent experience to all users.",
          "name": "navigation",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "NavigationManager",
            "value": [
              {
                "value": "NavigationManager",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "getId": {
          "defaultValue": null,
          "description": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
          "name": "getId",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((item: any) => string)",
            "value": [
              {
                "value": "(item: any) => string",
                "description": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
                "fullComment": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
                "tags": {}
              }
            ]
          }
        },
        "getTextValue": {
          "defaultValue": null,
          "description": "",
          "name": "getTextValue",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((item: any) => string)",
            "value": [
              {
                "value": "(item: any) => string",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "nonInteractiveIds": {
          "defaultValue": null,
          "description": "Array of all ids which are currently disabled. This is used for navigation to skip over items\nwhich are not focusable.",
          "name": "nonInteractiveIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "defaultItemHeight": {
          "defaultValue": {
            "value": "50"
          },
          "description": "Best guess to the default item height for virtualization. Getting this number correct\navoids a rerender while the list is initializing.",
          "name": "defaultItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "shouldVirtualize": {
          "defaultValue": null,
          "description": "",
          "name": "shouldVirtualize",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "items": {
          "defaultValue": null,
          "description": "Optional array of items. If provided, use a render prop for list children instead of static\nchildren. If the shape of each item object does not have an `id` property or uses a different\nproperty to uniquely identify each item, a `getId` must also be supplied.",
          "name": "items",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/collection/lib/useBaseListModel.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "any[]",
            "value": [
              {
                "value": "any[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSelect": {
          "defaultValue": null,
          "description": "",
          "name": "onSelect",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSetContainerWidth": {
          "defaultValue": null,
          "description": "",
          "name": "onSetContainerWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { width?: number; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void) | undefined",
            "value": [
              {
                "value": "(data: { width?: number | undefined; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSetOverflowTargetWidth": {
          "defaultValue": null,
          "description": "",
          "name": "onSetOverflowTargetWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { width: number; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { width: number; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onAddItemWidth": {
          "defaultValue": null,
          "description": "",
          "name": "onAddItemWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; width: number; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; width: number; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onRemoveItemWidth": {
          "defaultValue": null,
          "description": "",
          "name": "onRemoveItemWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onAddHiddenKey": {
          "defaultValue": null,
          "description": "",
          "name": "onAddHiddenKey",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onRemoveHiddenKey": {
          "defaultValue": null,
          "description": "",
          "name": "onRemoveHiddenKey",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSelectAll": {
          "defaultValue": null,
          "description": "Select all items. This will set `selectedIds` to `'all'` and remove all `unselectedIds`.\nThis is especially useful for virtual lists where not all items are loaded in memory.",
          "name": "onSelectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnselectAll": {
          "defaultValue": null,
          "description": "Unselect all items.",
          "name": "onUnselectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onRegisterItem": {
          "defaultValue": null,
          "description": "Register an item to the list. Takes in an identifier, a React.Ref and an optional index. This\nshould be called on component mount",
          "name": "onRegisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoTo": {
          "defaultValue": null,
          "description": "Directly sets the cursor to the list item by its identifier.",
          "name": "onGoTo",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNext": {
          "defaultValue": null,
          "description": "Set the cursor to the \"next\" item in the list. This event delegates to the `getNext` method of\nthe navigation manager. For a list, the default navigation manager will wrap if cursor is\ncurrently on the last item. For a grid, the default navigation manager will stay on the last\nitem in a row.",
          "name": "onGoToNext",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPrevious": {
          "defaultValue": null,
          "description": "Set the cursor to the \"previous\" item in the list. If the beginning of the list is detected,\nit will wrap to the last item",
          "name": "onGoToPrevious",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPreviousRow": {
          "defaultValue": null,
          "description": "Previous item perpendicular to the orientation of a list, or the previous row in a grid. For\nexample, if a list is horizontal, the previous row would describe an up direction. This could\nbe ignored by the navigation manager, or return the same result as `previous()`. In a grid,\nthis would be the previous row (current position - column count).",
          "name": "onGoToPreviousRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNextRow": {
          "defaultValue": null,
          "description": "Next item perpendicular to the orientation of a list, or the next row in a grid. For example,\nif a list is horizontal, the next row would describe a down direction. This could be ignored by\nthe navigation manager, or return the same result as `next()`. In a grid, this would be the\nnext row (current position + column count).",
          "name": "onGoToNextRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToFirst": {
          "defaultValue": null,
          "description": "Set the cursor to the first item in the list",
          "name": "onGoToFirst",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToLast": {
          "defaultValue": null,
          "description": "Set the cursor to the last item in the list",
          "name": "onGoToLast",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToFirstOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToFirstOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToLastOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToLastOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNextPage": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToNextPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPreviousPage": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToPreviousPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnregisterItem": {
          "defaultValue": null,
          "description": "Unregister an item by its identifier. This should be called when the component is unmounted.\nThis event is only called for static rendering.",
          "name": "onUnregisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUpdateItemHeight": {
          "defaultValue": null,
          "description": "Updates the default item height. This should only be called when item height is measured.\nCalling this with a different default item height than previous will cause a virtual list to\nrecalculate the overall height of the list and invalidate any height caching. Doing this only\non the first item may save the user from experiencing odd scrolling behavior where the\nscrollbar updates while scrolling. If the user uses the mouse to drag the bar, it can become\n\"detached\" since the browser recalculates scroll bar position while the overflow container is\nupdated.",
          "name": "onUpdateItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { value: number; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { value: number; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSelect": {
          "defaultValue": null,
          "description": "",
          "name": "shouldSelect",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSetContainerWidth": {
          "defaultValue": null,
          "description": "",
          "name": "shouldSetContainerWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { width?: number; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: { width?: number | undefined; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSetOverflowTargetWidth": {
          "defaultValue": null,
          "description": "",
          "name": "shouldSetOverflowTargetWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { width: number; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { width: number; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldAddItemWidth": {
          "defaultValue": null,
          "description": "",
          "name": "shouldAddItemWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; width: number; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; width: number; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldRemoveItemWidth": {
          "defaultValue": null,
          "description": "",
          "name": "shouldRemoveItemWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldAddHiddenKey": {
          "defaultValue": null,
          "description": "",
          "name": "shouldAddHiddenKey",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldRemoveHiddenKey": {
          "defaultValue": null,
          "description": "",
          "name": "shouldRemoveHiddenKey",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSelectAll": {
          "defaultValue": null,
          "description": "Select all items. This will set `selectedIds` to `'all'` and remove all `unselectedIds`.\nThis is especially useful for virtual lists where not all items are loaded in memory.",
          "name": "shouldSelectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnselectAll": {
          "defaultValue": null,
          "description": "Unselect all items.",
          "name": "shouldUnselectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldRegisterItem": {
          "defaultValue": null,
          "description": "Register an item to the list. Takes in an identifier, a React.Ref and an optional index. This\nshould be called on component mount",
          "name": "shouldRegisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoTo": {
          "defaultValue": null,
          "description": "Directly sets the cursor to the list item by its identifier.",
          "name": "shouldGoTo",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNext": {
          "defaultValue": null,
          "description": "Set the cursor to the \"next\" item in the list. This event delegates to the `getNext` method of\nthe navigation manager. For a list, the default navigation manager will wrap if cursor is\ncurrently on the last item. For a grid, the default navigation manager will stay on the last\nitem in a row.",
          "name": "shouldGoToNext",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPrevious": {
          "defaultValue": null,
          "description": "Set the cursor to the \"previous\" item in the list. If the beginning of the list is detected,\nit will wrap to the last item",
          "name": "shouldGoToPrevious",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPreviousRow": {
          "defaultValue": null,
          "description": "Previous item perpendicular to the orientation of a list, or the previous row in a grid. For\nexample, if a list is horizontal, the previous row would describe an up direction. This could\nbe ignored by the navigation manager, or return the same result as `previous()`. In a grid,\nthis would be the previous row (current position - column count).",
          "name": "shouldGoToPreviousRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNextRow": {
          "defaultValue": null,
          "description": "Next item perpendicular to the orientation of a list, or the next row in a grid. For example,\nif a list is horizontal, the next row would describe a down direction. This could be ignored by\nthe navigation manager, or return the same result as `next()`. In a grid, this would be the\nnext row (current position + column count).",
          "name": "shouldGoToNextRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToFirst": {
          "defaultValue": null,
          "description": "Set the cursor to the first item in the list",
          "name": "shouldGoToFirst",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToLast": {
          "defaultValue": null,
          "description": "Set the cursor to the last item in the list",
          "name": "shouldGoToLast",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToFirstOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToFirstOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToLastOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToLastOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNextPage": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToNextPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPreviousPage": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToPreviousPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnregisterItem": {
          "defaultValue": null,
          "description": "Unregister an item by its identifier. This should be called when the component is unmounted.\nThis event is only called for static rendering.",
          "name": "shouldUnregisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUpdateItemHeight": {
          "defaultValue": null,
          "description": "Updates the default item height. This should only be called when item height is measured.\nCalling this with a different default item height than previous will cause a virtual list to\nrecalculate the overall height of the list and invalidate any height caching. Doing this only\non the first item may save the user from experiencing odd scrolling behavior where the\nscrollbar updates while scrolling. If the user uses the mouse to drag the bar, it can become\n\"detached\" since the browser recalculates scroll bar position while the overflow container is\nupdated.",
          "name": "shouldUpdateItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { value: number; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { value: number; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any) | un...",
            "value": [
              {
                "value": "<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ActionBarItem": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/action-bar/lib/ActionBarItem.tsx",
      "description": "",
      "displayName": "ActionBarItem",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The contents of the action item. This will be the accessible name of the action for screen readers.\n\n```tsx\n<ActionBar.Item>First Action</ActionBar.Item>\n```",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/action-bar/lib/ActionBarItem.tsx",
            "name": "ActionBarItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/action-bar/lib/ActionBarItem.tsx",
              "name": "ActionBarItemProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "data-id": {
          "defaultValue": null,
          "description": "The identifier of the action. This identifier will be used for correct overflow behavior.\nIf this property is not provided, it will default to a string representation\nof the the zero-based index of the Item when it was initialized.",
          "name": "data-id",
          "parent": {
            "fileName": "canvas-kit/modules/react/action-bar/lib/ActionBarItem.tsx",
            "name": "ActionBarItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/action-bar/lib/ActionBarItem.tsx",
              "name": "ActionBarItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any) | un...",
            "value": [
              {
                "value": "<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ActionBarList": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/action-bar/lib/ActionBarList.tsx",
      "description": "",
      "displayName": "ActionBarList",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "If items are passed to a `ActionBarModel`, the child of `ActionBar.List` should be a render prop. The\nList will determine how and when the item will be rendered.\n@example <ActionBar.List>\n  {(item) => <ActionBar.Item key={item.id} name={item.name}>{item.text}</ActionBar.Item>}\n</ActionBar.List>",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/action-bar/lib/ActionBarList.tsx",
            "name": "ActionBarListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/action-bar/lib/ActionBarList.tsx",
              "name": "ActionBarListProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode | ((item: any, index: number) => ReactNode)",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "(item: any, index: number) => ReactNode",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "overflowButton": {
          "defaultValue": null,
          "description": "`ActionBar.List` will render overflow button component if  it's passed in `overflowButton`.\n@example <ActionBar.List overflowButton={<ActionBar.OverflowButton aria-label=\"More actions\" />}>\n  {(item) => <ActionBar.Item>{item.text}</ActionBar.Item>}\n</ActionBar.List>",
          "name": "overflowButton",
          "parent": {
            "fileName": "canvas-kit/modules/react/action-bar/lib/ActionBarList.tsx",
            "name": "ActionBarListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/action-bar/lib/ActionBarList.tsx",
              "name": "ActionBarListProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "flexDirection": {
          "defaultValue": {
            "value": "\"row\""
          },
          "description": "sets the direction for the stack",
          "name": "flexDirection",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
            "name": "HStackProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
              "name": "HStackProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"row\" | \"row-reverse\"",
            "value": [
              {
                "value": "\"row\""
              },
              {
                "value": "\"row-reverse\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any) | un...",
            "value": [
              {
                "value": "<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ActionBarOverflowButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/action-bar/lib/ActionBarOverflowButton.tsx",
      "description": "",
      "displayName": "ActionBarOverflowButton",
      "methods": [],
      "props": {
        "aria-label": {
          "defaultValue": null,
          "description": "",
          "name": "aria-label",
          "parent": {
            "fileName": "canvas-kit/modules/react/action-bar/lib/ActionBarOverflowButton.tsx",
            "name": "ActionBarOverflowButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/action-bar/lib/ActionBarOverflowButton.tsx",
              "name": "ActionBarOverflowButtonProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the SecondaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
            "name": "SecondaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
              "name": "SecondaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are four button sizes: `extraSmall`, `small`, `medium`, and `large`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
            "name": "SecondaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
              "name": "SecondaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the Button.\nNote: not displayed at `small` size",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
            "name": "SecondaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
              "name": "SecondaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
            "name": "SecondaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
              "name": "SecondaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
            "name": "SecondaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
              "name": "SecondaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any) | un...",
            "value": [
              {
                "value": "<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/avatar": {
    "Avatar": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/avatar/lib/Avatar.tsx",
      "description": "",
      "displayName": "Avatar",
      "methods": [],
      "props": {
        "as": {
          "defaultValue": null,
          "description": "The alternative container type for the button. Uses Emotion's special `as` prop.\nWill render an `div` tag instead of a `button` when defined.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "TypeLiteral"
            },
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "AvatarProps"
            }
          ],
          "required": false,
          "type": {
            "name": "\"div\"",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>"
          }
        },
        "size": {
          "defaultValue": {
            "value": "SystemIconCircleSize.m"
          },
          "description": "The size of the Avatar.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
            "name": "AvatarProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "AvatarProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "variant": {
          "defaultValue": {
            "value": "AvatarVariant.Light"
          },
          "description": "The variant of the Avatar default state. Accepts `Light` or `Dark`.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
            "name": "AvatarProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "AvatarProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "AvatarVariant",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "altText": {
          "defaultValue": {
            "value": "Avatar"
          },
          "description": "The alt text of the Avatar image. This prop is also used for the aria-label",
          "name": "altText",
          "parent": {
            "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
            "name": "AvatarProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "AvatarProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "url": {
          "defaultValue": null,
          "description": "The url of the Avatar image.",
          "name": "url",
          "parent": {
            "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
            "name": "AvatarProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "AvatarProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/badge": {
    "CountBadge": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/badge/lib/CountBadge.tsx",
      "description": "",
      "displayName": "CountBadge",
      "methods": [],
      "props": {
        "count": {
          "defaultValue": null,
          "description": "",
          "name": "count",
          "parent": {
            "fileName": "canvas-kit/modules/react/badge/lib/CountBadge.tsx",
            "name": "CountBadgeProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/badge/lib/CountBadge.tsx",
              "name": "CountBadgeProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "limit": {
          "defaultValue": null,
          "description": "",
          "name": "limit",
          "parent": {
            "fileName": "canvas-kit/modules/react/badge/lib/CountBadge.tsx",
            "name": "CountBadgeProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/badge/lib/CountBadge.tsx",
              "name": "CountBadgeProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "variant": {
          "defaultValue": null,
          "description": "",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/badge/lib/CountBadge.tsx",
            "name": "CountBadgeProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/badge/lib/CountBadge.tsx",
              "name": "CountBadgeProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\" | \"default\"",
            "value": [
              {
                "value": "\"inverse\""
              },
              {
                "value": "\"default\""
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/banner": {
    "Banner": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/banner/lib/Banner.tsx",
      "description": "",
      "displayName": "Banner",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "Children of the Banner. Should contain a `<Banner.Label>` a <Banner.Icon> and an optional `<Banner.ActionText>`",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/banner/lib/Banner.tsx",
            "name": "BannerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/banner/lib/Banner.tsx",
              "name": "BannerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "hasError": {
          "defaultValue": {
            "value": "false"
          },
          "description": "Optional flag to denote the banner has an error to display. When true the default `Banner.Icon`\nwill be `exclamationCircleIcon`, and a themed error color will be applied.",
          "name": "hasError",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isSticky": {
          "defaultValue": {
            "value": "false"
          },
          "description": "Optional flag to denote the banner is stuck to the side of the screen. When true the default `Banner.ActionText`\nwill be hidden, and some basic styles will be applied.\nYou will still need to manually set the css `position` value.",
          "name": "isSticky",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "id": {
          "defaultValue": {
            "value": "`useUniqueId()`"
          },
          "description": "Optional `id` provided to `Banner`'s subcomponents as HTML attributes:\n- `Banner` will set `aria-describedby` to `label-${id}`\n- `Banner` will set `aria-label` to `action-${id}`\n- `Banner.Label` will set `id` to `label-${id}`\n- `Banner.ActionText` will set `id` to `action-${id}`\n\nIf a value is not provided, a unique id will be automatically created by `useUniqueId()`.",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "BannerActionText": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/banner/lib/BannerActionText.tsx",
      "description": "",
      "displayName": "BannerActionText",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": {
            "value": "'View All'"
          },
          "description": "The text of the Banner action.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/banner/lib/BannerActionText.tsx",
            "name": "BannerActionTextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/banner/lib/BannerActionText.tsx",
              "name": "BannerActionTextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "BannerIcon": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/banner/lib/BannerIcon.tsx",
      "description": "",
      "displayName": "BannerIcon",
      "methods": [],
      "props": {
        "icon": {
          "defaultValue": {
            "value": "exclamationTriangleIcon or exclamationCircleIcon when hasError is true"
          },
          "description": "Icon to show next to label",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/banner/lib/BannerIcon.tsx",
            "name": "BannerIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/banner/lib/BannerIcon.tsx",
              "name": "BannerIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "color": {
          "defaultValue": {
            "value": "iconColors.standard"
          },
          "description": "The color of the SystemIcon. This defines `accent` and `fill`. `color` may be overriden by `accent` and `fill`.",
          "name": "color",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "background": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon.",
          "name": "background",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fill": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon. This overrides `color`.",
          "name": "fill",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "className": {
          "defaultValue": null,
          "description": "",
          "name": "className",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "size": {
          "defaultValue": null,
          "description": "The size of the SystemIcon in `px`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "styles": {
          "defaultValue": null,
          "description": "",
          "name": "styles",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CSSObject",
            "value": [
              {
                "value": "CSSObject",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirror": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the SVG's x-axis to mirror the graphic",
          "name": "shouldMirror",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "backgroundHover": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon on hover.",
          "name": "backgroundHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "colorHover": {
          "defaultValue": {
            "value": "iconColors.hover"
          },
          "description": "The hover color of the SystemIcon. This defines `accentHover` and `fillHover`. `colorHover` may be overriden by `accentHover` and `fillHover`.",
          "name": "colorHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accent": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon. This overrides `color`.",
          "name": "accent",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accentHover": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "accentHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fillHover": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "fillHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "BannerLabel": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/banner/lib/BannerLabel.tsx",
      "description": "",
      "displayName": "BannerLabel",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The text of the Banner.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/banner/lib/BannerLabel.tsx",
            "name": "BannerLabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/banner/lib/BannerLabel.tsx",
              "name": "BannerLabelProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; hasError: boolean; isSticky: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/breadcrumbs": {
    "Breadcrumbs": {
      "tags": {
        "example": "```tsx\n<Breadcrumbs aria-label=\"Breadcrumbs\">\n  <Breadcrumbs.List>\n    <Breadcrumbs.Item>\n      <Breadcrumbs.Link href=\"/docs\">Docs</Breadcrumbs.Link>\n    <Breadcrumbs.Item>\n    <Breadcrumbs.Item>\n      <Breadcrumbs.Link href=\"/docs/components\">Components</Breadcrumbs.Link>\n    <Breadcrumbs.Item>\n    <Breadcrumbs.CurrentItem>\n      <Breadcrumbs.Link href=\"/docs/components/breadcrumbs\">Breadcrumbs</Breadcrumbs.Link>\n    <Breadcrumbs.CurrentItem>\n  <Breadcrumbs.List>\n</Breadcrumbs>\n```"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/breadcrumbs/lib/Breadcrumbs.tsx",
      "description": "## Breadcrumbs\n---\n[View Developer Docs](https://canvas.workdaydesign.com/components/navigation/breadcrumbs#examples)\n\nA compound component that allows users to keep track and maintain awareness\nof their location as they navigate through pages, folders, files, etc.",
      "displayName": "Breadcrumbs",
      "methods": [],
      "props": {
        "aria-label": {
          "defaultValue": null,
          "description": "The accessibility label for the nav element.\nIt's required to be provided by a11y guidance.",
          "name": "aria-label",
          "parent": {
            "fileName": "canvas-kit/modules/react/breadcrumbs/lib/Breadcrumbs.tsx",
            "name": "BreadcrumbsProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/breadcrumbs/lib/Breadcrumbs.tsx",
              "name": "BreadcrumbsProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "children": {
          "defaultValue": null,
          "description": "The contents of the Breadcrumbs. Can be `Breadcrumbs` children or any valid elements.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/breadcrumbs/lib/Breadcrumbs.tsx",
            "name": "BreadcrumbsProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/breadcrumbs/lib/Breadcrumbs.tsx",
              "name": "BreadcrumbsProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "id": {
          "defaultValue": {
            "value": "useUniqueId()"
          },
          "description": "Optional id for the whole `Breadcrumbs` group. If not provided, a unique id will be created.",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "orientation": {
          "defaultValue": {
            "value": "'horizontal'"
          },
          "description": "The default Breadcrumbs component only handles rendering of the link group in a horizontal\norientation, but the subcomponents could be replaced to handle vertical orientations.",
          "name": "orientation",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Orientation",
            "value": [
              {
                "value": "\"vertical\""
              },
              {
                "value": "\"horizontal\""
              }
            ]
          }
        },
        "menuConfig": {
          "defaultValue": null,
          "description": "",
          "name": "menuConfig",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Partial<{ mode: \"single\" | \"multiple\"; returnFocusRef: RefObject<any>; initialFocusRef: RefObject<any> | undefined; id: string; initialVisibility: Visibility; ... 12 more ...; items: any[]; }> | undefined",
            "value": [
              {
                "value": "Partial<{ mode: \"single\" | \"multiple\"; returnFocusRef: RefObject<any> | undefined; initialFocusRef: RefObject<any> | undefined; id: string; initialVisibility: Visibility; ... 12 more ...; items: any[]; }>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "initialHiddenIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialHiddenIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "containerWidth": {
          "defaultValue": null,
          "description": "",
          "name": "containerWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "shouldCalculateOverflow": {
          "defaultValue": {
            "value": "true"
          },
          "description": "Determines if overflow should actually occur. For example, touch devices are better at\nside-scrolling than mouse devices. In these cases, it makes sense to disable overflowing.",
          "name": "shouldCalculateOverflow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "initialSelectedIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialSelectedIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SelectedIds",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"all\""
              }
            ]
          }
        },
        "initialUnselectedIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialUnselectedIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "selection": {
          "defaultValue": null,
          "description": "",
          "name": "selection",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SelectionManager",
            "value": [
              {
                "value": "SelectionManager",
                "description": "A SelectionManager is used",
                "fullComment": "A SelectionManager is used",
                "tags": {}
              }
            ]
          }
        },
        "initialCursorId": {
          "defaultValue": null,
          "description": "Initial cursor position. If not provided, the cursor will point to the first item in the list",
          "name": "initialCursorId",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "columnCount": {
          "defaultValue": {
            "value": "0"
          },
          "description": "If this is set it will cause a wrapping of a list that will turn it into a grid",
          "name": "columnCount",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "navigation": {
          "defaultValue": null,
          "description": "Controls the state changes when the user sends navigation events to the model. For example,\nwhen the user hits the \"right\" arrow, a behavior hook will determine directionality\n(left-to-right or right-to-left) and call the correct navigation method. In our example, a\nleft-to-right language would send a `getNext`. The navigation manager may return the next item\nin the list. Different managers can be created for slightly different use cases. The default\nnavigation manager will accept `orientation` and directionality to determine mapping.\n\nAn example override might be a tab list with an overflow menu that is meant to be transparent\nto screen reader users. This would require the overflow menu to accept both up/down keys as\nwell as left/right keys to give a more consistent experience to all users.",
          "name": "navigation",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "NavigationManager",
            "value": [
              {
                "value": "NavigationManager",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "getId": {
          "defaultValue": null,
          "description": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
          "name": "getId",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((item: any) => string)",
            "value": [
              {
                "value": "(item: any) => string",
                "description": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
                "fullComment": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
                "tags": {}
              }
            ]
          }
        },
        "getTextValue": {
          "defaultValue": null,
          "description": "",
          "name": "getTextValue",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((item: any) => string)",
            "value": [
              {
                "value": "(item: any) => string",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "nonInteractiveIds": {
          "defaultValue": null,
          "description": "Array of all ids which are currently disabled. This is used for navigation to skip over items\nwhich are not focusable.",
          "name": "nonInteractiveIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "defaultItemHeight": {
          "defaultValue": {
            "value": "50"
          },
          "description": "Best guess to the default item height for virtualization. Getting this number correct\navoids a rerender while the list is initializing.",
          "name": "defaultItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "shouldVirtualize": {
          "defaultValue": null,
          "description": "",
          "name": "shouldVirtualize",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "items": {
          "defaultValue": null,
          "description": "Optional array of items. If provided, use a render prop for list children instead of static\nchildren. If the shape of each item object does not have an `id` property or uses a different\nproperty to uniquely identify each item, a `getId` must also be supplied.",
          "name": "items",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/collection/lib/useBaseListModel.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "any[]",
            "value": [
              {
                "value": "any[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSelect": {
          "defaultValue": null,
          "description": "",
          "name": "onSelect",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSetContainerWidth": {
          "defaultValue": null,
          "description": "",
          "name": "onSetContainerWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { width?: number; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void) | undefined",
            "value": [
              {
                "value": "(data: { width?: number | undefined; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSetOverflowTargetWidth": {
          "defaultValue": null,
          "description": "",
          "name": "onSetOverflowTargetWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { width: number; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { width: number; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onAddItemWidth": {
          "defaultValue": null,
          "description": "",
          "name": "onAddItemWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; width: number; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; width: number; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onRemoveItemWidth": {
          "defaultValue": null,
          "description": "",
          "name": "onRemoveItemWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onAddHiddenKey": {
          "defaultValue": null,
          "description": "",
          "name": "onAddHiddenKey",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onRemoveHiddenKey": {
          "defaultValue": null,
          "description": "",
          "name": "onRemoveHiddenKey",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSelectAll": {
          "defaultValue": null,
          "description": "Select all items. This will set `selectedIds` to `'all'` and remove all `unselectedIds`.\nThis is especially useful for virtual lists where not all items are loaded in memory.",
          "name": "onSelectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnselectAll": {
          "defaultValue": null,
          "description": "Unselect all items.",
          "name": "onUnselectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onRegisterItem": {
          "defaultValue": null,
          "description": "Register an item to the list. Takes in an identifier, a React.Ref and an optional index. This\nshould be called on component mount",
          "name": "onRegisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoTo": {
          "defaultValue": null,
          "description": "Directly sets the cursor to the list item by its identifier.",
          "name": "onGoTo",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNext": {
          "defaultValue": null,
          "description": "Set the cursor to the \"next\" item in the list. This event delegates to the `getNext` method of\nthe navigation manager. For a list, the default navigation manager will wrap if cursor is\ncurrently on the last item. For a grid, the default navigation manager will stay on the last\nitem in a row.",
          "name": "onGoToNext",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPrevious": {
          "defaultValue": null,
          "description": "Set the cursor to the \"previous\" item in the list. If the beginning of the list is detected,\nit will wrap to the last item",
          "name": "onGoToPrevious",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPreviousRow": {
          "defaultValue": null,
          "description": "Previous item perpendicular to the orientation of a list, or the previous row in a grid. For\nexample, if a list is horizontal, the previous row would describe an up direction. This could\nbe ignored by the navigation manager, or return the same result as `previous()`. In a grid,\nthis would be the previous row (current position - column count).",
          "name": "onGoToPreviousRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNextRow": {
          "defaultValue": null,
          "description": "Next item perpendicular to the orientation of a list, or the next row in a grid. For example,\nif a list is horizontal, the next row would describe a down direction. This could be ignored by\nthe navigation manager, or return the same result as `next()`. In a grid, this would be the\nnext row (current position + column count).",
          "name": "onGoToNextRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToFirst": {
          "defaultValue": null,
          "description": "Set the cursor to the first item in the list",
          "name": "onGoToFirst",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToLast": {
          "defaultValue": null,
          "description": "Set the cursor to the last item in the list",
          "name": "onGoToLast",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToFirstOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToFirstOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToLastOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToLastOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNextPage": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToNextPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPreviousPage": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToPreviousPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnregisterItem": {
          "defaultValue": null,
          "description": "Unregister an item by its identifier. This should be called when the component is unmounted.\nThis event is only called for static rendering.",
          "name": "onUnregisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUpdateItemHeight": {
          "defaultValue": null,
          "description": "Updates the default item height. This should only be called when item height is measured.\nCalling this with a different default item height than previous will cause a virtual list to\nrecalculate the overall height of the list and invalidate any height caching. Doing this only\non the first item may save the user from experiencing odd scrolling behavior where the\nscrollbar updates while scrolling. If the user uses the mouse to drag the bar, it can become\n\"detached\" since the browser recalculates scroll bar position while the overflow container is\nupdated.",
          "name": "onUpdateItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { value: number; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { value: number; }, prevState: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSelect": {
          "defaultValue": null,
          "description": "",
          "name": "shouldSelect",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSetContainerWidth": {
          "defaultValue": null,
          "description": "",
          "name": "shouldSetContainerWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { width?: number; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: { width?: number | undefined; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSetOverflowTargetWidth": {
          "defaultValue": null,
          "description": "",
          "name": "shouldSetOverflowTargetWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { width: number; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { width: number; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldAddItemWidth": {
          "defaultValue": null,
          "description": "",
          "name": "shouldAddItemWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; width: number; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; width: number; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldRemoveItemWidth": {
          "defaultValue": null,
          "description": "",
          "name": "shouldRemoveItemWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldAddHiddenKey": {
          "defaultValue": null,
          "description": "",
          "name": "shouldAddHiddenKey",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldRemoveHiddenKey": {
          "defaultValue": null,
          "description": "",
          "name": "shouldRemoveHiddenKey",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSelectAll": {
          "defaultValue": null,
          "description": "Select all items. This will set `selectedIds` to `'all'` and remove all `unselectedIds`.\nThis is especially useful for virtual lists where not all items are loaded in memory.",
          "name": "shouldSelectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnselectAll": {
          "defaultValue": null,
          "description": "Unselect all items.",
          "name": "shouldUnselectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldRegisterItem": {
          "defaultValue": null,
          "description": "Register an item to the list. Takes in an identifier, a React.Ref and an optional index. This\nshould be called on component mount",
          "name": "shouldRegisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoTo": {
          "defaultValue": null,
          "description": "Directly sets the cursor to the list item by its identifier.",
          "name": "shouldGoTo",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNext": {
          "defaultValue": null,
          "description": "Set the cursor to the \"next\" item in the list. This event delegates to the `getNext` method of\nthe navigation manager. For a list, the default navigation manager will wrap if cursor is\ncurrently on the last item. For a grid, the default navigation manager will stay on the last\nitem in a row.",
          "name": "shouldGoToNext",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPrevious": {
          "defaultValue": null,
          "description": "Set the cursor to the \"previous\" item in the list. If the beginning of the list is detected,\nit will wrap to the last item",
          "name": "shouldGoToPrevious",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPreviousRow": {
          "defaultValue": null,
          "description": "Previous item perpendicular to the orientation of a list, or the previous row in a grid. For\nexample, if a list is horizontal, the previous row would describe an up direction. This could\nbe ignored by the navigation manager, or return the same result as `previous()`. In a grid,\nthis would be the previous row (current position - column count).",
          "name": "shouldGoToPreviousRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNextRow": {
          "defaultValue": null,
          "description": "Next item perpendicular to the orientation of a list, or the next row in a grid. For example,\nif a list is horizontal, the next row would describe a down direction. This could be ignored by\nthe navigation manager, or return the same result as `next()`. In a grid, this would be the\nnext row (current position + column count).",
          "name": "shouldGoToNextRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToFirst": {
          "defaultValue": null,
          "description": "Set the cursor to the first item in the list",
          "name": "shouldGoToFirst",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToLast": {
          "defaultValue": null,
          "description": "Set the cursor to the last item in the list",
          "name": "shouldGoToLast",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToFirstOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToFirstOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToLastOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToLastOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNextPage": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToNextPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPreviousPage": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToPreviousPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnregisterItem": {
          "defaultValue": null,
          "description": "Unregister an item by its identifier. This should be called when the component is unmounted.\nThis event is only called for static rendering.",
          "name": "shouldUnregisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUpdateItemHeight": {
          "defaultValue": null,
          "description": "Updates the default item height. This should only be called when item height is measured.\nCalling this with a different default item height than previous will cause a virtual list to\nrecalculate the overall height of the list and invalidate any height caching. Doing this only\non the first item may save the user from experiencing odd scrolling behavior where the\nscrollbar updates while scrolling. If the user uses the mouse to drag the bar, it can become\n\"detached\" since the browser recalculates scroll bar position while the overflow container is\nupdated.",
          "name": "shouldUpdateItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { value: number; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { value: number; }, state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; ... 11 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any) | un...",
            "value": [
              {
                "value": "<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "BreadcrumbsCurrentItem": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsCurrentItem.tsx",
      "description": "",
      "displayName": "BreadcrumbsCurrentItem",
      "methods": [],
      "props": {
        "tooltipProps": {
          "defaultValue": null,
          "description": "",
          "name": "tooltipProps",
          "parent": {
            "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsCurrentItem.tsx",
            "name": "BreadcrumbsCurrentItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsCurrentItem.tsx",
              "name": "BreadcrumbsCurrentItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "OverflowTooltipProps",
            "value": [
              {
                "value": "OverflowTooltipProps",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "typeLevel": {
          "defaultValue": null,
          "description": "Type token as string with level and size separated by dot.\nThese values map to our [Canvas type levels](https://canvas.workday.com/tokens/type#type-styles).\n@example ```tsx\n<Text typeLevel=\"body.small\">Small body text</Text>\n```",
          "name": "typeLevel",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
            "name": "TextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
              "name": "TextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"body.small\" | \"body.medium\" | \"body.large\" | \"title.small\" | \"title.medium\" | \"title.large\" | \"heading.small\" | \"heading.medium\" | \"heading.large\" | \"subtext.small\" | \"subtext.medium\" | \"subtext.large\"",
            "value": [
              {
                "value": "\"body.small\""
              },
              {
                "value": "\"body.medium\""
              },
              {
                "value": "\"body.large\""
              },
              {
                "value": "\"title.small\""
              },
              {
                "value": "\"title.medium\""
              },
              {
                "value": "\"title.large\""
              },
              {
                "value": "\"heading.small\""
              },
              {
                "value": "\"heading.medium\""
              },
              {
                "value": "\"heading.large\""
              },
              {
                "value": "\"subtext.small\""
              },
              {
                "value": "\"subtext.medium\""
              },
              {
                "value": "\"subtext.large\""
              }
            ]
          }
        },
        "variant": {
          "defaultValue": null,
          "description": "Type variant token names: `error`, `hint` or `inverse`.\n@example ```tsx\n<Text variant=\"error\" typeLevel=\"subtext.large\">Error text</Text>\n```",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
            "name": "TextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
              "name": "TextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "keyof CanvasTypeVariants",
            "value": [
              {
                "value": "\"inverse\""
              },
              {
                "value": "\"error\""
              },
              {
                "value": "\"hint\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any) | un...",
            "value": [
              {
                "value": "<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "BreadcrumbsItem": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsItem.tsx",
      "description": "",
      "displayName": "BreadcrumbsItem",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The contents of the action item. This will be the accessible name of the action for screen readers.\n\n```tsx\n<Breadcrumbs.Item>First Action</Breadcrumbs.Item>\n```",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsItem.tsx",
            "name": "BreadcrumbsItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsItem.tsx",
              "name": "BreadcrumbsItemProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "data-id": {
          "defaultValue": null,
          "description": "The identifier of the action. This identifier will be used for correct overflow behavior.\nIf this property is not provided, it will default to a string representation\nof the the zero-based index of the Item when it was initialized.",
          "name": "data-id",
          "parent": {
            "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsItem.tsx",
            "name": "BreadcrumbsItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsItem.tsx",
              "name": "BreadcrumbsItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any) | un...",
            "value": [
              {
                "value": "<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "BreadcrumbsLink": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsLink.tsx",
      "description": "",
      "displayName": "BreadcrumbsLink",
      "methods": [],
      "props": {
        "href": {
          "defaultValue": null,
          "description": "The href url of the anchor tag",
          "name": "href",
          "parent": {
            "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsLink.tsx",
            "name": "BreadcrumbsLinkProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsLink.tsx",
              "name": "BreadcrumbsLinkProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "maxWidth": {
          "defaultValue": {
            "value": "350px"
          },
          "description": "The max-width of the link text",
          "name": "maxWidth",
          "parent": {
            "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsLink.tsx",
            "name": "BreadcrumbsLinkProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsLink.tsx",
              "name": "BreadcrumbsLinkProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "tooltipProps": {
          "defaultValue": null,
          "description": "",
          "name": "tooltipProps",
          "parent": {
            "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsLink.tsx",
            "name": "BreadcrumbsLinkProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsLink.tsx",
              "name": "BreadcrumbsLinkProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{} | OverflowTooltipProps",
            "value": [
              {
                "value": "{}",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "OverflowTooltipProps",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "BreadcrumbsList": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsList.tsx",
      "description": "",
      "displayName": "BreadcrumbsList",
      "methods": [],
      "props": {
        "overflowButton": {
          "defaultValue": null,
          "description": "",
          "name": "overflowButton",
          "parent": {
            "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsList.tsx",
            "name": "BreadcrumbsListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsList.tsx",
              "name": "BreadcrumbsListProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "children": {
          "defaultValue": null,
          "description": "If items are passed to a `BreadcrumbsModel`, the child of `Breadcrumbs.List` should be a render prop. The\nList will determine how and when the item will be rendered.\n@example <Breadcrumbs.List>\n  {(item) => <Breadcrumbs.Item key={item.id} name={item.name}>{item.text}</Breadcrumbs.Item>}\n</Breadcrumbs.List>",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsList.tsx",
            "name": "BreadcrumbsListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsList.tsx",
              "name": "BreadcrumbsListProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode | ((item: any, index: number) => ReactNode)",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "(item: any, index: number) => ReactNode",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any) | un...",
            "value": [
              {
                "value": "<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "BreadcrumbsMenuItem": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsMenu.tsx",
      "description": "",
      "displayName": "BreadcrumbsMenuItem",
      "methods": [],
      "props": {
        "index": {
          "defaultValue": null,
          "description": "Optionally pass index to menu item. This should be done if `Menu.Item` components were created\nvia a `Array::map` function. This index will ensure keyboard navigation works even if items are\ninserted out of order.",
          "name": "index",
          "parent": {
            "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
            "name": "MenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
              "name": "MenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "children": {
          "defaultValue": null,
          "description": "The label text of the MenuItem.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
            "name": "MenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
              "name": "MenuItemProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "data-id": {
          "defaultValue": null,
          "description": "The name of the menu item. This name will be used in the `onSelect` callback in the model. If\nthis property is not provided, it will default to a string representation of the the zero-based\nindex of the Tab when it was initialized.",
          "name": "data-id",
          "parent": {
            "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
            "name": "MenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
              "name": "MenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "aria-disabled": {
          "defaultValue": null,
          "description": "",
          "name": "aria-disabled",
          "parent": {
            "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
            "name": "MenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
              "name": "MenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPr...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPro...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "BreadcrumbsMenu": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsMenu.tsx",
      "description": "",
      "displayName": "BreadcrumbsMenu",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The contents of the Menu. Can be `Menu` children or any valid elements.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/menu/lib/Menu.tsx",
            "name": "MenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/menu/lib/Menu.tsx",
              "name": "MenuProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "mode": {
          "defaultValue": null,
          "description": "Determines the default selection manager used as well as if the menu closes when an item is selected",
          "name": "mode",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"single\" | \"multiple\"",
            "value": [
              {
                "value": "\"single\""
              },
              {
                "value": "\"multiple\""
              }
            ]
          }
        },
        "returnFocusRef": {
          "defaultValue": null,
          "description": "Optional reference to an element that should receive focus when a popup is hidden. If left\nblank, focus will return to the `targetRef`",
          "name": "returnFocusRef",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RefObject<any>",
            "value": [
              {
                "value": "RefObject<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "initialFocusRef": {
          "defaultValue": null,
          "description": "Optional reference to an element that should receive focus when a popup is shown. If left blank,\nfocus will be moved to the first focusable element inside the popup.",
          "name": "initialFocusRef",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RefObject<any>",
            "value": [
              {
                "value": "RefObject<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "id": {
          "defaultValue": null,
          "description": "ID reference of the list. Children ids can be derived from this id",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "initialVisibility": {
          "defaultValue": {
            "value": "'hidden'"
          },
          "description": "The initial visibility of the disclosed content",
          "name": "initialVisibility",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Visibility",
            "value": [
              {
                "value": "\"hidden\""
              },
              {
                "value": "\"visible\""
              }
            ]
          }
        },
        "initialSelectedIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialSelectedIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SelectedIds",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"all\""
              }
            ]
          }
        },
        "initialUnselectedIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialUnselectedIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "selection": {
          "defaultValue": null,
          "description": "",
          "name": "selection",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SelectionManager",
            "value": [
              {
                "value": "SelectionManager",
                "description": "A SelectionManager is used",
                "fullComment": "A SelectionManager is used",
                "tags": {}
              }
            ]
          }
        },
        "initialCursorId": {
          "defaultValue": null,
          "description": "Initial cursor position. If not provided, the cursor will point to the first item in the list",
          "name": "initialCursorId",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "columnCount": {
          "defaultValue": {
            "value": "0"
          },
          "description": "If this is set it will cause a wrapping of a list that will turn it into a grid",
          "name": "columnCount",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "navigation": {
          "defaultValue": null,
          "description": "Controls the state changes when the user sends navigation events to the model. For example,\nwhen the user hits the \"right\" arrow, a behavior hook will determine directionality\n(left-to-right or right-to-left) and call the correct navigation method. In our example, a\nleft-to-right language would send a `getNext`. The navigation manager may return the next item\nin the list. Different managers can be created for slightly different use cases. The default\nnavigation manager will accept `orientation` and directionality to determine mapping.\n\nAn example override might be a tab list with an overflow menu that is meant to be transparent\nto screen reader users. This would require the overflow menu to accept both up/down keys as\nwell as left/right keys to give a more consistent experience to all users.",
          "name": "navigation",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "NavigationManager",
            "value": [
              {
                "value": "NavigationManager",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "getId": {
          "defaultValue": null,
          "description": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
          "name": "getId",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((item: any) => string)",
            "value": [
              {
                "value": "(item: any) => string",
                "description": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
                "fullComment": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
                "tags": {}
              }
            ]
          }
        },
        "getTextValue": {
          "defaultValue": null,
          "description": "",
          "name": "getTextValue",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((item: any) => string)",
            "value": [
              {
                "value": "(item: any) => string",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "nonInteractiveIds": {
          "defaultValue": null,
          "description": "Array of all ids which are currently disabled. This is used for navigation to skip over items\nwhich are not focusable.",
          "name": "nonInteractiveIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "orientation": {
          "defaultValue": {
            "value": "'vertical'"
          },
          "description": "The orientation of a list of items. Values are either `vertical` or `horizontal`. This value will\neffect which ids activate progression through a list. For example, `horizontal` will activate with\nleft and right arrows while `vertical` will activate with up and down arrows.",
          "name": "orientation",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Orientation",
            "value": [
              {
                "value": "\"vertical\""
              },
              {
                "value": "\"horizontal\""
              }
            ]
          }
        },
        "defaultItemHeight": {
          "defaultValue": {
            "value": "50"
          },
          "description": "Best guess to the default item height for virtualization. Getting this number correct\navoids a rerender while the list is initializing.",
          "name": "defaultItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "shouldVirtualize": {
          "defaultValue": null,
          "description": "",
          "name": "shouldVirtualize",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "items": {
          "defaultValue": null,
          "description": "Optional array of items. If provided, use a render prop for list children instead of static\nchildren. If the shape of each item object does not have an `id` property or uses a different\nproperty to uniquely identify each item, a `getId` must also be supplied.",
          "name": "items",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/collection/lib/useBaseListModel.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "any[]",
            "value": [
              {
                "value": "any[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUpdatePlacement": {
          "defaultValue": null,
          "description": "Called whenever a popup placement changes around a target. This is useful for animations that\ndepend on the placement chosen.",
          "name": "onUpdatePlacement",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { placement: Placement; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void)",
            "value": [
              {
                "value": "(data: { placement: Placement; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onShow": {
          "defaultValue": null,
          "description": "Start showing the disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "onShow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onHide": {
          "defaultValue": null,
          "description": "Start hiding this disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "onHide",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSelect": {
          "defaultValue": null,
          "description": "Select a specific item by its identifier.",
          "name": "onSelect",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSelectAll": {
          "defaultValue": null,
          "description": "Select all items. This will set `selectedIds` to `'all'` and remove all `unselectedIds`.\nThis is especially useful for virtual lists where not all items are loaded in memory.",
          "name": "onSelectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnselectAll": {
          "defaultValue": null,
          "description": "Unselect all items.",
          "name": "onUnselectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onRegisterItem": {
          "defaultValue": null,
          "description": "Register an item to the list. Takes in an identifier, a React.Ref and an optional index. This\nshould be called on component mount",
          "name": "onRegisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void)",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoTo": {
          "defaultValue": null,
          "description": "Directly sets the cursor to the list item by its identifier.",
          "name": "onGoTo",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNext": {
          "defaultValue": null,
          "description": "Set the cursor to the \"next\" item in the list. This event delegates to the `getNext` method of\nthe navigation manager. For a list, the default navigation manager will wrap if cursor is\ncurrently on the last item. For a grid, the default navigation manager will stay on the last\nitem in a row.",
          "name": "onGoToNext",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPrevious": {
          "defaultValue": null,
          "description": "Set the cursor to the \"previous\" item in the list. If the beginning of the list is detected,\nit will wrap to the last item",
          "name": "onGoToPrevious",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPreviousRow": {
          "defaultValue": null,
          "description": "Previous item perpendicular to the orientation of a list, or the previous row in a grid. For\nexample, if a list is horizontal, the previous row would describe an up direction. This could\nbe ignored by the navigation manager, or return the same result as `previous()`. In a grid,\nthis would be the previous row (current position - column count).",
          "name": "onGoToPreviousRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNextRow": {
          "defaultValue": null,
          "description": "Next item perpendicular to the orientation of a list, or the next row in a grid. For example,\nif a list is horizontal, the next row would describe a down direction. This could be ignored by\nthe navigation manager, or return the same result as `next()`. In a grid, this would be the\nnext row (current position + column count).",
          "name": "onGoToNextRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToFirst": {
          "defaultValue": null,
          "description": "Set the cursor to the first item in the list",
          "name": "onGoToFirst",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToLast": {
          "defaultValue": null,
          "description": "Set the cursor to the last item in the list",
          "name": "onGoToLast",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToFirstOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToFirstOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToLastOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToLastOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNextPage": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToNextPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPreviousPage": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToPreviousPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnregisterItem": {
          "defaultValue": null,
          "description": "Unregister an item by its identifier. This should be called when the component is unmounted.\nThis event is only called for static rendering.",
          "name": "onUnregisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUpdateItemHeight": {
          "defaultValue": null,
          "description": "Updates the default item height. This should only be called when item height is measured.\nCalling this with a different default item height than previous will cause a virtual list to\nrecalculate the overall height of the list and invalidate any height caching. Doing this only\non the first item may save the user from experiencing odd scrolling behavior where the\nscrollbar updates while scrolling. If the user uses the mouse to drag the bar, it can become\n\"detached\" since the browser recalculates scroll bar position while the overflow container is\nupdated.",
          "name": "onUpdateItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { value: number; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: { value: number; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUpdatePlacement": {
          "defaultValue": null,
          "description": "Called whenever a popup placement changes around a target. This is useful for animations that\ndepend on the placement chosen.",
          "name": "shouldUpdatePlacement",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { placement: Placement; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean)",
            "value": [
              {
                "value": "(data: { placement: Placement; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldShow": {
          "defaultValue": null,
          "description": "Start showing the disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "shouldShow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldHide": {
          "defaultValue": null,
          "description": "Start hiding this disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "shouldHide",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSelect": {
          "defaultValue": null,
          "description": "Select a specific item by its identifier.",
          "name": "shouldSelect",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: { id: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSelectAll": {
          "defaultValue": null,
          "description": "Select all items. This will set `selectedIds` to `'all'` and remove all `unselectedIds`.\nThis is especially useful for virtual lists where not all items are loaded in memory.",
          "name": "shouldSelectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnselectAll": {
          "defaultValue": null,
          "description": "Unselect all items.",
          "name": "shouldUnselectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldRegisterItem": {
          "defaultValue": null,
          "description": "Register an item to the list. Takes in an identifier, a React.Ref and an optional index. This\nshould be called on component mount",
          "name": "shouldRegisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean)",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoTo": {
          "defaultValue": null,
          "description": "Directly sets the cursor to the list item by its identifier.",
          "name": "shouldGoTo",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: { id: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNext": {
          "defaultValue": null,
          "description": "Set the cursor to the \"next\" item in the list. This event delegates to the `getNext` method of\nthe navigation manager. For a list, the default navigation manager will wrap if cursor is\ncurrently on the last item. For a grid, the default navigation manager will stay on the last\nitem in a row.",
          "name": "shouldGoToNext",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPrevious": {
          "defaultValue": null,
          "description": "Set the cursor to the \"previous\" item in the list. If the beginning of the list is detected,\nit will wrap to the last item",
          "name": "shouldGoToPrevious",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPreviousRow": {
          "defaultValue": null,
          "description": "Previous item perpendicular to the orientation of a list, or the previous row in a grid. For\nexample, if a list is horizontal, the previous row would describe an up direction. This could\nbe ignored by the navigation manager, or return the same result as `previous()`. In a grid,\nthis would be the previous row (current position - column count).",
          "name": "shouldGoToPreviousRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNextRow": {
          "defaultValue": null,
          "description": "Next item perpendicular to the orientation of a list, or the next row in a grid. For example,\nif a list is horizontal, the next row would describe a down direction. This could be ignored by\nthe navigation manager, or return the same result as `next()`. In a grid, this would be the\nnext row (current position + column count).",
          "name": "shouldGoToNextRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToFirst": {
          "defaultValue": null,
          "description": "Set the cursor to the first item in the list",
          "name": "shouldGoToFirst",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToLast": {
          "defaultValue": null,
          "description": "Set the cursor to the last item in the list",
          "name": "shouldGoToLast",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToFirstOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToFirstOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToLastOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToLastOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNextPage": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToNextPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPreviousPage": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToPreviousPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnregisterItem": {
          "defaultValue": null,
          "description": "Unregister an item by its identifier. This should be called when the component is unmounted.\nThis event is only called for static rendering.",
          "name": "shouldUnregisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: { id: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUpdateItemHeight": {
          "defaultValue": null,
          "description": "Updates the default item height. This should only be called when item height is measured.\nCalling this with a different default item height than previous will cause a virtual list to\nrecalculate the overall height of the list and invalidate any height caching. Doing this only\non the first item may save the user from experiencing odd scrolling behavior where the\nscrollbar updates while scrolling. If the user uses the mouse to drag the bar, it can become\n\"detached\" since the browser recalculates scroll bar position while the overflow container is\nupdated.",
          "name": "shouldUpdateItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { value: number; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: { value: number; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPr...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPro...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "BreadcrumbsOverflowButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsOverflowButton.tsx",
      "description": "",
      "displayName": "BreadcrumbsOverflowButton",
      "methods": [],
      "props": {
        "aria-label": {
          "defaultValue": null,
          "description": "",
          "name": "aria-label",
          "parent": {
            "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsOverflowButton.tsx",
            "name": "BreadcrumbsOverflowButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsOverflowButton.tsx",
              "name": "BreadcrumbsOverflowButtonProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "style": {
          "defaultValue": null,
          "description": "style prop applies styles to the whole Flex component,\n`useOverflowListTarget` automatically adds hidden styles if list doesn't have items to hide\nstyle prop passed through `overflowButtonProps` from `Breadcrumbs.List` will ignore",
          "name": "style",
          "parent": {
            "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsOverflowButton.tsx",
            "name": "BreadcrumbsOverflowButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/breadcrumbs/lib/BreadcrumbsOverflowButton.tsx",
              "name": "BreadcrumbsOverflowButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "FlexProps",
            "value": [
              {
                "value": "FlexProps"
              }
            ]
          }
        },
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the TertiaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are three button sizes: `extraSmall`, `small`, and `medium`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any) | un...",
            "value": [
              {
                "value": "<TProps>(model: { state: { hiddenIds: string[]; nonInteractiveIds: string[]; orientation: Orientation; itemWidthCache: Record<string, number>; containerWidth: number; overflowTargetWidth: number; ... 10 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/button": {
    "BaseButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/button/lib/BaseButton.tsx",
      "description": "",
      "displayName": "BaseButton",
      "methods": [],
      "props": {
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are four button sizes: `extraSmall`, `small`, `medium`, and `large`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "DeleteButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/button/lib/DeleteButton.tsx",
      "description": "",
      "displayName": "DeleteButton",
      "methods": [],
      "props": {
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "The size of the Button.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/DeleteButton.tsx",
            "name": "DeleteButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/DeleteButton.tsx",
              "name": "DeleteButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"small\" | \"medium\" | \"large\"",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "DeprecatedButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/button/lib/deprecated_Button.tsx",
      "description": "",
      "displayName": "DeprecatedButton",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "'secondary'"
          },
          "description": "The variant of the Button.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/deprecated_Button.tsx",
            "name": "DeprecatedButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/deprecated_Button.tsx",
              "name": "DeprecatedButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"primary\" | \"secondary\" | \"delete\"",
            "value": [
              {
                "value": "\"primary\""
              },
              {
                "value": "\"secondary\""
              },
              {
                "value": "\"delete\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "The size of the Button.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/deprecated_Button.tsx",
            "name": "DeprecatedButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/deprecated_Button.tsx",
              "name": "DeprecatedButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"small\" | \"medium\" | \"large\"",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ExternalHyperlink": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/button/lib/ExternalHyperlink.tsx",
      "description": "",
      "displayName": "ExternalHyperlink",
      "methods": [],
      "props": {
        "iconLabel": {
          "defaultValue": {
            "value": "'Opens link in new window'"
          },
          "description": "Informs a screen reader user the link will open in a new window. It is read after the link text.\nThis value will need to be translated.",
          "name": "iconLabel",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/ExternalHyperlink.tsx",
            "name": "ExternalHyperlinkProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/ExternalHyperlink.tsx",
              "name": "ExternalHyperlinkProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "variant": {
          "defaultValue": null,
          "description": "sets modifier styles for Hyperlink\n- `inverse`: sets the color to frenchVanilla100 and updates hover, focus, and active pseudo-classes",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/Hyperlink.tsx",
            "name": "HyperlinkProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/Hyperlink.tsx",
              "name": "HyperlinkProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "href": {
          "defaultValue": null,
          "description": "attribute for the hyperlink URL",
          "name": "href",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/Hyperlink.tsx",
            "name": "HyperlinkProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/Hyperlink.tsx",
              "name": "HyperlinkProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "Hyperlink": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/button/lib/Hyperlink.tsx",
      "description": "",
      "displayName": "Hyperlink",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": null,
          "description": "sets modifier styles for Hyperlink\n- `inverse`: sets the color to frenchVanilla100 and updates hover, focus, and active pseudo-classes",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/Hyperlink.tsx",
            "name": "HyperlinkProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/Hyperlink.tsx",
              "name": "HyperlinkProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "href": {
          "defaultValue": null,
          "description": "attribute for the hyperlink URL",
          "name": "href",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/Hyperlink.tsx",
            "name": "HyperlinkProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/Hyperlink.tsx",
              "name": "HyperlinkProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ButtonLabel": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/button/lib/parts/ButtonLabel.tsx",
      "description": "",
      "displayName": "ButtonLabel",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ButtonLabelIcon": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/button/lib/parts/ButtonLabelIcon.tsx",
      "description": "",
      "displayName": "ButtonLabelIcon",
      "methods": [],
      "props": {
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are four button sizes: `extraSmall`, `small`, `medium`, and `large`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/parts/ButtonLabelIcon.tsx",
            "name": "ButtonLabelIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/parts/ButtonLabelIcon.tsx",
              "name": "ButtonLabelIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the Button.\nNote: not displayed at `small` size",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/parts/ButtonLabelIcon.tsx",
            "name": "ButtonLabelIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/parts/ButtonLabelIcon.tsx",
              "name": "ButtonLabelIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `left` or `right`.\nIf no value is provided, it defaults to `left`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/parts/ButtonLabelIcon.tsx",
            "name": "ButtonLabelIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/parts/ButtonLabelIcon.tsx",
              "name": "ButtonLabelIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/parts/ButtonLabelIcon.tsx",
            "name": "ButtonLabelIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/parts/ButtonLabelIcon.tsx",
              "name": "ButtonLabelIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "PrimaryButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/button/lib/PrimaryButton.tsx",
      "description": "",
      "displayName": "PrimaryButton",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the PrimaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/PrimaryButton.tsx",
            "name": "PrimaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/PrimaryButton.tsx",
              "name": "PrimaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are four button sizes: `extraSmall`, `small`, `medium`, and `large`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/PrimaryButton.tsx",
            "name": "PrimaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/PrimaryButton.tsx",
              "name": "PrimaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the Button.\nNote: not displayed at `small` size",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/PrimaryButton.tsx",
            "name": "PrimaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/PrimaryButton.tsx",
              "name": "PrimaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/PrimaryButton.tsx",
            "name": "PrimaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/PrimaryButton.tsx",
              "name": "PrimaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/PrimaryButton.tsx",
            "name": "PrimaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/PrimaryButton.tsx",
              "name": "PrimaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "SecondaryButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
      "description": "",
      "displayName": "SecondaryButton",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the SecondaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
            "name": "SecondaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
              "name": "SecondaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are four button sizes: `extraSmall`, `small`, `medium`, and `large`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
            "name": "SecondaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
              "name": "SecondaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the Button.\nNote: not displayed at `small` size",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
            "name": "SecondaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
              "name": "SecondaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
            "name": "SecondaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
              "name": "SecondaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
            "name": "SecondaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/SecondaryButton.tsx",
              "name": "SecondaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "TertiaryButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
      "description": "",
      "displayName": "TertiaryButton",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the TertiaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are three button sizes: `extraSmall`, `small`, and `medium`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ToolbarDropdownButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/button/lib/ToolbarDropdownButton.tsx",
      "description": "",
      "displayName": "ToolbarDropdownButton",
      "methods": [],
      "props": {
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": null,
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/ToolbarIconButton.tsx",
            "name": "ToolbarIconButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/ToolbarIconButton.tsx",
              "name": "ToolbarIconButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ToolbarIconButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/button/lib/ToolbarIconButton.tsx",
      "description": "",
      "displayName": "ToolbarIconButton",
      "methods": [],
      "props": {
        "onToggleChange": {
          "defaultValue": null,
          "description": "",
          "name": "onToggleChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/ToolbarIconButton.tsx",
            "name": "ToolbarIconButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/ToolbarIconButton.tsx",
              "name": "ToolbarIconButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((toggled: boolean) => void) | undefined",
            "value": [
              {
                "value": "(toggled: boolean | undefined) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "toggled": {
          "defaultValue": null,
          "description": "",
          "name": "toggled",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/ToolbarIconButton.tsx",
            "name": "ToolbarIconButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/ToolbarIconButton.tsx",
              "name": "ToolbarIconButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": null,
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/ToolbarIconButton.tsx",
            "name": "ToolbarIconButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/ToolbarIconButton.tsx",
              "name": "ToolbarIconButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/card": {
    "Card": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/card/lib/Card.tsx",
      "description": "",
      "displayName": "Card",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "Children of the Card. Should contain a `<Card.Body>` and an optional `<Card.Heading>`",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/card/lib/Card.tsx",
            "name": "CardProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/card/lib/Card.tsx",
              "name": "CardProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "CardBody": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/card/lib/CardBody.tsx",
      "description": "",
      "displayName": "CardBody",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "CardHeading": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/card/lib/CardHeading.tsx",
      "description": "",
      "displayName": "CardHeading",
      "methods": [],
      "props": {
        "id": {
          "defaultValue": null,
          "description": "The id of the Card heading. Tie this to an `aria-labelledby` for accessibility.",
          "name": "id",
          "parent": {
            "fileName": "canvas-kit/modules/react/card/lib/CardHeading.tsx",
            "name": "CardHeadingProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/card/lib/CardHeading.tsx",
              "name": "CardHeadingProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/checkbox": {
    "Checkbox": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
      "description": "",
      "displayName": "Checkbox",
      "methods": [],
      "props": {
        "checked": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the Checkbox to the checked state.",
          "name": "checked",
          "parent": {
            "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
            "name": "CheckboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
              "name": "CheckboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "disabled": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the Checkbox to the disabled state.",
          "name": "disabled",
          "parent": {
            "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
            "name": "CheckboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
              "name": "CheckboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "id": {
          "defaultValue": {
            "value": "A uniquely generated id"
          },
          "description": "The HTML `id` of the underlying checkbox input element. This is required if `label` is defined as a non-empty string.",
          "name": "id",
          "parent": {
            "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
            "name": "CheckboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
              "name": "CheckboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "label": {
          "defaultValue": {
            "value": "''"
          },
          "description": "The text of the Checkbox label.",
          "name": "label",
          "parent": {
            "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
            "name": "CheckboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
              "name": "CheckboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "onChange": {
          "defaultValue": null,
          "description": "The function called when the Checkbox state changes.",
          "name": "onChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
            "name": "CheckboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
              "name": "CheckboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((e: ChangeEvent<HTMLInputElement>) => void)",
            "value": [
              {
                "value": "(e: ChangeEvent<HTMLInputElement>) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "value": {
          "defaultValue": null,
          "description": "The value of the Checkbox.",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
            "name": "CheckboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
              "name": "CheckboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the Checkbox (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
            "name": "CheckboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
              "name": "CheckboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "indeterminate": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the Checkbox to an indeterminate state. Use this on a Checkbox with nested child Checkboxes to denote that some (but not all) child Checkboxes are checked.",
          "name": "indeterminate",
          "parent": {
            "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
            "name": "CheckboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
              "name": "CheckboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "variant": {
          "defaultValue": null,
          "description": "The variant for the checkbox",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
            "name": "CheckboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/checkbox/lib/Checkbox.tsx",
              "name": "CheckboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/collection": {
    "ListBoxItem": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/collection/lib/ListBox.tsx",
      "description": "",
      "displayName": "ListBoxItem",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?: ScrollToIndexOpt...",
            "value": [
              {
                "value": "{ state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ScrollToIndexOpt...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?:...",
            "value": [
              {
                "value": "<TProps>(model: { state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ListBox": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/collection/lib/ListBox.tsx",
      "description": "Basic list box that supports virtualization. `ListBox.Item` contains a very simple list item\nwithout much functionality. The `ListBox` contains two `Box` elements:\n- Outer Box: Presentational container element responsible for overflow and height. `height` and\n  `maxHeight` props will be applied here.\n- Inner Box: The element responsible for the virtual container. Height is controlled by the model\n  and cannot be changed by the developer. All props and ref will be spread to this element.",
      "displayName": "ListBox",
      "methods": [],
      "props": {
        "initialSelectedIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialSelectedIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SelectedIds",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"all\""
              }
            ]
          }
        },
        "initialUnselectedIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialUnselectedIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "selection": {
          "defaultValue": null,
          "description": "",
          "name": "selection",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SelectionManager",
            "value": [
              {
                "value": "SelectionManager",
                "description": "A SelectionManager is used",
                "fullComment": "A SelectionManager is used",
                "tags": {}
              }
            ]
          }
        },
        "initialCursorId": {
          "defaultValue": null,
          "description": "Initial cursor position. If not provided, the cursor will point to the first item in the list",
          "name": "initialCursorId",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "columnCount": {
          "defaultValue": {
            "value": "0"
          },
          "description": "If this is set it will cause a wrapping of a list that will turn it into a grid",
          "name": "columnCount",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "navigation": {
          "defaultValue": null,
          "description": "Controls the state changes when the user sends navigation events to the model. For example,\nwhen the user hits the \"right\" arrow, a behavior hook will determine directionality\n(left-to-right or right-to-left) and call the correct navigation method. In our example, a\nleft-to-right language would send a `getNext`. The navigation manager may return the next item\nin the list. Different managers can be created for slightly different use cases. The default\nnavigation manager will accept `orientation` and directionality to determine mapping.\n\nAn example override might be a tab list with an overflow menu that is meant to be transparent\nto screen reader users. This would require the overflow menu to accept both up/down keys as\nwell as left/right keys to give a more consistent experience to all users.",
          "name": "navigation",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "NavigationManager",
            "value": [
              {
                "value": "NavigationManager",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "id": {
          "defaultValue": null,
          "description": "IDREF of the list. Children ids can be derived from this id",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "getId": {
          "defaultValue": null,
          "description": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
          "name": "getId",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((item: any) => string)",
            "value": [
              {
                "value": "(item: any) => string",
                "description": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
                "fullComment": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
                "tags": {}
              }
            ]
          }
        },
        "getTextValue": {
          "defaultValue": null,
          "description": "",
          "name": "getTextValue",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((item: any) => string)",
            "value": [
              {
                "value": "(item: any) => string",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "nonInteractiveIds": {
          "defaultValue": null,
          "description": "Array of all ids which are currently disabled. This is used for navigation to skip over items\nwhich are not focusable.",
          "name": "nonInteractiveIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "orientation": {
          "defaultValue": {
            "value": "'vertical'"
          },
          "description": "The orientation of a list of items. Values are either `vertical` or `horizontal`. This value will\neffect which ids activate progression through a list. For example, `horizontal` will activate with\nleft and right arrows while `vertical` will activate with up and down arrows.",
          "name": "orientation",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Orientation",
            "value": [
              {
                "value": "\"vertical\""
              },
              {
                "value": "\"horizontal\""
              }
            ]
          }
        },
        "defaultItemHeight": {
          "defaultValue": {
            "value": "50"
          },
          "description": "Best guess to the default item height for virtualization. Getting this number correct\navoids a rerender while the list is initializing.",
          "name": "defaultItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "shouldVirtualize": {
          "defaultValue": null,
          "description": "",
          "name": "shouldVirtualize",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "items": {
          "defaultValue": null,
          "description": "Optional array of items. If provided, use a render prop for list children instead of static\nchildren. If the shape of each item object does not have an `id` property or uses a different\nproperty to uniquely identify each item, a `getId` must also be supplied.",
          "name": "items",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/collection/lib/useBaseListModel.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "any[]",
            "value": [
              {
                "value": "any[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSelect": {
          "defaultValue": null,
          "description": "Select a specific item by its identifier.",
          "name": "onSelect",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number,...",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSelectAll": {
          "defaultValue": null,
          "description": "Select all items. This will set `selectedIds` to `'all'` and remove all `unselectedIds`.\nThis is especially useful for virtual lists where not all items are loaded in memory.",
          "name": "onSelectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, optio...",
            "value": [
              {
                "value": "(data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, option...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnselectAll": {
          "defaultValue": null,
          "description": "Unselect all items.",
          "name": "onUnselectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, optio...",
            "value": [
              {
                "value": "(data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, option...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onRegisterItem": {
          "defaultValue": null,
          "description": "Register an item to the list. Takes in an identifier, a React.Ref and an optional index. This\nshould be called on component mount",
          "name": "onRegisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToInde...",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoTo": {
          "defaultValue": null,
          "description": "Directly sets the cursor to the list item by its identifier.",
          "name": "onGoTo",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number,...",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNext": {
          "defaultValue": null,
          "description": "Set the cursor to the \"next\" item in the list. This event delegates to the `getNext` method of\nthe navigation manager. For a list, the default navigation manager will wrap if cursor is\ncurrently on the last item. For a grid, the default navigation manager will stay on the last\nitem in a row.",
          "name": "onGoToNext",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, optio...",
            "value": [
              {
                "value": "(data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, option...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPrevious": {
          "defaultValue": null,
          "description": "Set the cursor to the \"previous\" item in the list. If the beginning of the list is detected,\nit will wrap to the last item",
          "name": "onGoToPrevious",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, optio...",
            "value": [
              {
                "value": "(data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, option...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPreviousRow": {
          "defaultValue": null,
          "description": "Previous item perpendicular to the orientation of a list, or the previous row in a grid. For\nexample, if a list is horizontal, the previous row would describe an up direction. This could\nbe ignored by the navigation manager, or return the same result as `previous()`. In a grid,\nthis would be the previous row (current position - column count).",
          "name": "onGoToPreviousRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, optio...",
            "value": [
              {
                "value": "(data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, option...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNextRow": {
          "defaultValue": null,
          "description": "Next item perpendicular to the orientation of a list, or the next row in a grid. For example,\nif a list is horizontal, the next row would describe a down direction. This could be ignored by\nthe navigation manager, or return the same result as `next()`. In a grid, this would be the\nnext row (current position + column count).",
          "name": "onGoToNextRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, optio...",
            "value": [
              {
                "value": "(data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, option...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToFirst": {
          "defaultValue": null,
          "description": "Set the cursor to the first item in the list",
          "name": "onGoToFirst",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, optio...",
            "value": [
              {
                "value": "(data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, option...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToLast": {
          "defaultValue": null,
          "description": "Set the cursor to the last item in the list",
          "name": "onGoToLast",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, optio...",
            "value": [
              {
                "value": "(data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, option...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToFirstOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToFirstOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, optio...",
            "value": [
              {
                "value": "(data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, option...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToLastOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToLastOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, optio...",
            "value": [
              {
                "value": "(data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, option...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNextPage": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToNextPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, optio...",
            "value": [
              {
                "value": "(data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, option...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPreviousPage": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToPreviousPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, optio...",
            "value": [
              {
                "value": "(data: undefined, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, option...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnregisterItem": {
          "defaultValue": null,
          "description": "Unregister an item by its identifier. This should be called when the component is unmounted.\nThis event is only called for static rendering.",
          "name": "onUnregisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number,...",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUpdateItemHeight": {
          "defaultValue": null,
          "description": "Updates the default item height. This should only be called when item height is measured.\nCalling this with a different default item height than previous will cause a virtual list to\nrecalculate the overall height of the list and invalidate any height caching. Doing this only\non the first item may save the user from experiencing odd scrolling behavior where the\nscrollbar updates while scrolling. If the user uses the mouse to drag the bar, it can become\n\"detached\" since the browser recalculates scroll bar position while the overflow container is\nupdated.",
          "name": "onUpdateItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { value: number; }, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: numb...",
            "value": [
              {
                "value": "(data: { value: number; }, prevState: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: numbe...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSelect": {
          "defaultValue": null,
          "description": "Select a specific item by its identifier.",
          "name": "shouldSelect",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, opt...",
            "value": [
              {
                "value": "(data: { id: string; }, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, opti...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSelectAll": {
          "defaultValue": null,
          "description": "Select all items. This will set `selectedIds` to `'all'` and remove all `unselectedIds`.\nThis is especially useful for virtual lists where not all items are loaded in memory.",
          "name": "shouldSelectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?:...",
            "value": [
              {
                "value": "(data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnselectAll": {
          "defaultValue": null,
          "description": "Unselect all items.",
          "name": "shouldUnselectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?:...",
            "value": [
              {
                "value": "(data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldRegisterItem": {
          "defaultValue": null,
          "description": "Register an item to the list. Takes in an identifier, a React.Ref and an optional index. This\nshould be called on component mount",
          "name": "shouldRegisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (...",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (i...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoTo": {
          "defaultValue": null,
          "description": "Directly sets the cursor to the list item by its identifier.",
          "name": "shouldGoTo",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, opt...",
            "value": [
              {
                "value": "(data: { id: string; }, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, opti...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNext": {
          "defaultValue": null,
          "description": "Set the cursor to the \"next\" item in the list. This event delegates to the `getNext` method of\nthe navigation manager. For a list, the default navigation manager will wrap if cursor is\ncurrently on the last item. For a grid, the default navigation manager will stay on the last\nitem in a row.",
          "name": "shouldGoToNext",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?:...",
            "value": [
              {
                "value": "(data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPrevious": {
          "defaultValue": null,
          "description": "Set the cursor to the \"previous\" item in the list. If the beginning of the list is detected,\nit will wrap to the last item",
          "name": "shouldGoToPrevious",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?:...",
            "value": [
              {
                "value": "(data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPreviousRow": {
          "defaultValue": null,
          "description": "Previous item perpendicular to the orientation of a list, or the previous row in a grid. For\nexample, if a list is horizontal, the previous row would describe an up direction. This could\nbe ignored by the navigation manager, or return the same result as `previous()`. In a grid,\nthis would be the previous row (current position - column count).",
          "name": "shouldGoToPreviousRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?:...",
            "value": [
              {
                "value": "(data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNextRow": {
          "defaultValue": null,
          "description": "Next item perpendicular to the orientation of a list, or the next row in a grid. For example,\nif a list is horizontal, the next row would describe a down direction. This could be ignored by\nthe navigation manager, or return the same result as `next()`. In a grid, this would be the\nnext row (current position + column count).",
          "name": "shouldGoToNextRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?:...",
            "value": [
              {
                "value": "(data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToFirst": {
          "defaultValue": null,
          "description": "Set the cursor to the first item in the list",
          "name": "shouldGoToFirst",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?:...",
            "value": [
              {
                "value": "(data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToLast": {
          "defaultValue": null,
          "description": "Set the cursor to the last item in the list",
          "name": "shouldGoToLast",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?:...",
            "value": [
              {
                "value": "(data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToFirstOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToFirstOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?:...",
            "value": [
              {
                "value": "(data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToLastOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToLastOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?:...",
            "value": [
              {
                "value": "(data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNextPage": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToNextPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?:...",
            "value": [
              {
                "value": "(data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPreviousPage": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToPreviousPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?:...",
            "value": [
              {
                "value": "(data: undefined, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnregisterItem": {
          "defaultValue": null,
          "description": "Unregister an item by its identifier. This should be called when the component is unmounted.\nThis event is only called for static rendering.",
          "name": "shouldUnregisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, opt...",
            "value": [
              {
                "value": "(data: { id: string; }, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, opti...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUpdateItemHeight": {
          "defaultValue": null,
          "description": "Updates the default item height. This should only be called when item height is measured.\nCalling this with a different default item height than previous will cause a virtual list to\nrecalculate the overall height of the list and invalidate any height caching. Doing this only\non the first item may save the user from experiencing odd scrolling behavior where the\nscrollbar updates while scrolling. If the user uses the mouse to drag the bar, it can become\n\"detached\" since the browser recalculates scroll bar position while the overflow container is\nupdated.",
          "name": "shouldUpdateItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { value: number; }, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, ...",
            "value": [
              {
                "value": "(data: { value: number; }, state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, o...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?: ScrollToIndexOpt...",
            "value": [
              {
                "value": "{ state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ScrollToIndexOpt...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; scrollToIndex: (index: number, options?:...",
            "value": [
              {
                "value": "<TProps>(model: { state: { selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; scrollToIndex: (index: number, options?: ...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/color-picker": {
    "ColorInput": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
      "description": "",
      "displayName": "ColorInput",
      "methods": [],
      "props": {
        "value": {
          "defaultValue": {
            "value": "''"
          },
          "description": "The value of the ColorInput.",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
            "name": "ColorInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
              "name": "ColorInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "showCheck": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, show a checkmark in the swatch tile when a custom hex color is entered in the ColorInput.",
          "name": "showCheck",
          "parent": {
            "fileName": "canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
            "name": "ColorInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
              "name": "ColorInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "placeholder": {
          "defaultValue": {
            "value": "FFFFFF"
          },
          "description": "The placeholder text of the ColorInput.",
          "name": "placeholder",
          "parent": {
            "fileName": "canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
            "name": "ColorInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
              "name": "ColorInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the ColorInput (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
            "name": "ColorInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
              "name": "ColorInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "disabled": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the ColorInput to the disabled state.",
          "name": "disabled",
          "parent": {
            "fileName": "canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
            "name": "ColorInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
              "name": "ColorInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "onChange": {
          "defaultValue": null,
          "description": "The function called when the ColorInput state changes.",
          "name": "onChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
            "name": "ColorInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
              "name": "ColorInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((event: ChangeEvent<HTMLInputElement>) => void)",
            "value": [
              {
                "value": "(event: ChangeEvent<HTMLInputElement>) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onValidColorChange": {
          "defaultValue": null,
          "description": "The function called when a valid hex value is entered in the ColorInput. The `color` argument passed to the callback function is prefixed with a hash and expanded if necessary (e.g., `03F` is converted to `#0033FF`).",
          "name": "onValidColorChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
            "name": "ColorInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/color-picker/lib/ColorInput.tsx",
              "name": "ColorInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((color: string) => void)",
            "value": [
              {
                "value": "(color: string) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "width": {
          "defaultValue": null,
          "description": "The width of the TextInput.",
          "name": "width",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
            "name": "TextInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
              "name": "TextInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ColorPreview": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/color-picker/lib/ColorPreview.tsx",
      "description": "",
      "displayName": "ColorPreview",
      "methods": [],
      "props": {
        "value": {
          "defaultValue": null,
          "description": "The value of the ColorPreview.",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/react/color-picker/lib/ColorPreview.tsx",
            "name": "ColorPreviewProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/color-picker/lib/ColorPreview.tsx",
              "name": "ColorPreviewProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "id": {
          "defaultValue": null,
          "description": "The HTML `id` of the underlying text input element.",
          "name": "id",
          "parent": {
            "fileName": "canvas-kit/modules/react/color-picker/lib/ColorPreview.tsx",
            "name": "ColorPreviewProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/color-picker/lib/ColorPreview.tsx",
              "name": "ColorPreviewProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the TextInput (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
            "name": "TextInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
              "name": "TextInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "width": {
          "defaultValue": null,
          "description": "The width of the TextInput.",
          "name": "width",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
            "name": "TextInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
              "name": "TextInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ColorSwatch": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/color-picker/lib/parts/ColorSwatch.tsx",
      "description": "",
      "displayName": "ColorSwatch",
      "methods": [],
      "props": {
        "color": {
          "defaultValue": null,
          "description": "",
          "name": "color",
          "parent": {
            "fileName": "canvas-kit/modules/react/color-picker/lib/parts/ColorSwatch.tsx",
            "name": "ColorSwatchProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/color-picker/lib/parts/ColorSwatch.tsx",
              "name": "ColorSwatchProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "showCheck": {
          "defaultValue": {
            "value": false
          },
          "description": "",
          "name": "showCheck",
          "parent": {
            "fileName": "canvas-kit/modules/react/color-picker/lib/parts/ColorSwatch.tsx",
            "name": "ColorSwatchProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/color-picker/lib/parts/ColorSwatch.tsx",
              "name": "ColorSwatchProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/common": {
    "CanvasProvider": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/common/lib/CanvasProvider.tsx",
      "description": "",
      "displayName": "CanvasProvider",
      "methods": [],
      "props": {
        "theme": {
          "defaultValue": {
            "value": "{\n      canvas: defaultCanvasTheme,\n    }"
          },
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/CanvasProvider.tsx",
            "name": "CanvasProviderProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/CanvasProvider.tsx",
              "name": "CanvasProviderProps"
            }
          ],
          "required": false,
          "type": {
            "name": "PartialEmotionCanvasTheme"
          }
        }
      }
    },
    "EllipsisText": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/common/lib/EllipsisText.tsx",
      "description": "",
      "displayName": "EllipsisText",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "InputProvider": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/common/lib/InputProvider.tsx",
      "description": "This component takes heavy inspiration from what-input (https://github.com/ten1seven/what-input)",
      "displayName": "InputProvider",
      "methods": [],
      "props": {
        "provideIntent": {
          "defaultValue": null,
          "description": "",
          "name": "provideIntent",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/InputProvider.tsx",
            "name": "InputProviderProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/InputProvider.tsx",
              "name": "InputProviderProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "container": {
          "defaultValue": null,
          "description": "",
          "name": "container",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/InputProvider.tsx",
            "name": "InputProviderProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/InputProvider.tsx",
              "name": "InputProviderProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "HTMLElement | RefObject<HTMLElement>",
            "value": [
              {
                "value": "HTMLElement",
                "description": "Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
                "fullComment": "Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
                "tags": {}
              },
              {
                "value": "RefObject<HTMLElement>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/dialog": {
    "Dialog": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/dialog/lib/Dialog.tsx",
      "description": "",
      "displayName": "Dialog",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The contents of the Dialog. Can be `Dialog` children or any valid elements.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/dialog/lib/Dialog.tsx",
            "name": "DialogProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/dialog/lib/Dialog.tsx",
              "name": "DialogProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "returnFocusRef": {
          "defaultValue": null,
          "description": "Optional reference to an element that should receive focus when a popup is hidden. If left\nblank, focus will return to the `targetRef`",
          "name": "returnFocusRef",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RefObject<any>",
            "value": [
              {
                "value": "RefObject<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "initialFocusRef": {
          "defaultValue": null,
          "description": "Optional reference to an element that should receive focus when a popup is shown. If left blank,\nfocus will be moved to the first focusable element inside the popup.",
          "name": "initialFocusRef",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RefObject<any>",
            "value": [
              {
                "value": "RefObject<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "id": {
          "defaultValue": null,
          "description": "ID reference of the list. Children ids can be derived from this id",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "initialVisibility": {
          "defaultValue": {
            "value": "'hidden'"
          },
          "description": "The initial visibility of the disclosed content",
          "name": "initialVisibility",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Visibility",
            "value": [
              {
                "value": "\"hidden\""
              },
              {
                "value": "\"visible\""
              }
            ]
          }
        },
        "onUpdatePlacement": {
          "defaultValue": null,
          "description": "Called whenever a popup placement changes around a target. This is useful for animations that\ndepend on the placement chosen.",
          "name": "onUpdatePlacement",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { placement: Placement; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void)",
            "value": [
              {
                "value": "(data: { placement: Placement; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onShow": {
          "defaultValue": null,
          "description": "Start showing the disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "onShow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onHide": {
          "defaultValue": null,
          "description": "Start hiding this disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "onHide",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUpdatePlacement": {
          "defaultValue": null,
          "description": "Called whenever a popup placement changes around a target. This is useful for animations that\ndepend on the placement chosen.",
          "name": "shouldUpdatePlacement",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { placement: Placement; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean)",
            "value": [
              {
                "value": "(data: { placement: Placement; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldShow": {
          "defaultValue": null,
          "description": "Start showing the disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "shouldShow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldHide": {
          "defaultValue": null,
          "description": "Start hiding this disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "shouldHide",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "DialogCard": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/dialog/lib/DialogCard.tsx",
      "description": "",
      "displayName": "DialogCard",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "Children of the Card. Should contain a `<Card.Body>` and an optional `<Card.Heading>`",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/PopupCard.tsx",
            "name": "PopupCardProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/PopupCard.tsx",
              "name": "PopupCardProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "DialogPopper": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/dialog/lib/DialogPopper.tsx",
      "description": "",
      "displayName": "DialogPopper",
      "methods": [],
      "props": {
        "placement": {
          "defaultValue": {
            "value": "bottom"
          },
          "description": "The placement of the `Popper` contents relative to the `anchorElement`. Accepts `auto`, `top`,\n`right`, `bottom`, or `left`. Each placement can also be modified using any of the following\nvariations: `-start` or `-end`.",
          "name": "placement",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/PopupPopper.tsx",
            "name": "PopupPopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/PopupPopper.tsx",
              "name": "PopupPopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Placement",
            "value": [
              {
                "value": "\"auto\""
              },
              {
                "value": "\"auto-start\""
              },
              {
                "value": "\"auto-end\""
              },
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"right\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"top-start\""
              },
              {
                "value": "\"top-end\""
              },
              {
                "value": "\"bottom-start\""
              },
              {
                "value": "\"bottom-end\""
              },
              {
                "value": "\"right-start\""
              },
              {
                "value": "\"right-end\""
              },
              {
                "value": "\"left-start\""
              },
              {
                "value": "\"left-end\""
              }
            ]
          }
        },
        "popperOptions": {
          "defaultValue": null,
          "description": "The additional options passed to the Popper's `popper.js` instance.",
          "name": "popperOptions",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/PopupPopper.tsx",
            "name": "PopupPopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/PopupPopper.tsx",
              "name": "PopupPopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Partial<Options>",
            "value": [
              {
                "value": "Partial<Options>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "anchorElement": {
          "defaultValue": null,
          "description": "The reference element used to position the Popper. Popper content will try to follow the\n`anchorElement` if it moves and will reposition itself if there is no longer room in the\nwindow.",
          "name": "anchorElement",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Element | RefObject<Element> | null",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "Element",
                "description": "Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
                "fullComment": "Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
                "tags": {}
              },
              {
                "value": "RefObject<Element>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "children": {
          "defaultValue": null,
          "description": "The content of the Popper. If a function is provided, it will be treated as a Render Prop and\npass the `placement` chosen by PopperJS. This `placement` value is useful if your popup needs\nto animate and that animation depends on the direction of the content in relation to the\n`anchorElement`.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode | ((props: { placement: Placement; }) => ReactNode)",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "(props: { placement: Placement; }) => ReactNode",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "getAnchorClientRect": {
          "defaultValue": null,
          "description": "When provided, this optional callback will be used to determine positioning for the Popper element\ninstead of calling `getBoundingClientRect` on the `anchorElement` prop. Use this when you need\ncomplete control over positioning. When this prop is specified, it is safe to pass `null` into the\n`anchorElement` prop. If `null` is passed into the `anchorElement` prop, an `owner` will not be\nprovided for the `PopupStack`.",
          "name": "getAnchorClientRect",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(() => DOMRect)",
            "value": [
              {
                "value": "() => DOMRect",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "open": {
          "defaultValue": {
            "value": "true"
          },
          "description": "Determines if `Popper` content should be rendered. The content only exists in the DOM when\n`open` is `true`",
          "name": "open",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "onPlacementChange": {
          "defaultValue": null,
          "description": "A callback function that will be called whenever PopperJS chooses a placement that is different\nfrom the provided `placement` preference. If a `placement` preference doesn't fit, PopperJS\nwill choose a new one and call this callback.",
          "name": "onPlacementChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((placement: Placement) => void)",
            "value": [
              {
                "value": "(placement: Placement) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "portal": {
          "defaultValue": {
            "value": "true"
          },
          "description": "If false, render the Popper within the\nDOM hierarchy of its parent. A non-portal Popper will constrained by the parent container\noverflows. If you set this to `false`, you may experience issues where you content gets cut off\nby scrollbars or `overflow: hidden`",
          "name": "portal",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "popperInstanceRef": {
          "defaultValue": null,
          "description": "Reference to the PopperJS instance. Useful for making direct method calls on the popper\ninstance like `update`.",
          "name": "popperInstanceRef",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Ref<Instance>",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "(instance: Instance | null) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "RefObject<Instance>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/form-field": {
    "FormField": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/form-field/lib/FormField.tsx",
      "description": "",
      "displayName": "FormField",
      "methods": [],
      "props": {
        "labelPosition": {
          "defaultValue": {
            "value": "FormField.FormFieldLabelPosition.Top"
          },
          "description": "The position of the FormField label.",
          "name": "labelPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "FormFieldLabelPosition",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "2",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "label": {
          "defaultValue": null,
          "description": "The text of the FormField label.",
          "name": "label",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "hintText": {
          "defaultValue": null,
          "description": "The text of the message displayed below the input component. This is required if `error` is defined.",
          "name": "hintText",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "hintId": {
          "defaultValue": null,
          "description": "The HTML `id` of the message displayed below the input component. This is required for the `aria-describedby` accessibility attribute if `error` and `hintText` are defined.",
          "name": "hintId",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "inputId": {
          "defaultValue": null,
          "description": "The HTML `id` of the input component. If an `id` is not specified for the input, this will be used as it's `id`. This is referenced by the label's `htmlFor` attribute. This is required for accessiblity if `label` is defined.",
          "name": "inputId",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the FormField (if applicable). This is passed to the input component.",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "required": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, style the FormField label to indicate that it is required.",
          "name": "required",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "useFieldset": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, render the FormField using a `fieldset` and a `legend` instead of a `div` and a `label`. This must be set to `true` if you're using a Radio Group inside of a FormField (for accessibility reasons).",
          "name": "useFieldset",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "errorLabel": {
          "defaultValue": {
            "value": "'Error'"
          },
          "description": "The label for the error message hint text if `hintText` and `error` are defined. This prop should only be used for translating the default string 'Error'.",
          "name": "errorLabel",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "alertLabel": {
          "defaultValue": {
            "value": "'Alert'"
          },
          "description": "The label for the alert message hint text if `hintText` and `error` are defined. This prop should only be used for translating the default string 'Alert'.",
          "name": "alertLabel",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "Hint": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/form-field/lib/Hint.tsx",
      "description": "",
      "displayName": "Hint",
      "methods": [],
      "props": {
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the Hint (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/Hint.tsx",
            "name": "HintProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/Hint.tsx",
              "name": "HintProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "errorLabel": {
          "defaultValue": {
            "value": "'Error'"
          },
          "description": "The label for the error message hint text if `hintText` and `error` are defined. This prop should only be used for translating the default string 'Error'.",
          "name": "errorLabel",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/Hint.tsx",
            "name": "HintProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/Hint.tsx",
              "name": "HintProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "alertLabel": {
          "defaultValue": {
            "value": "'Alert'"
          },
          "description": "The label for the alert message hint text if `hintText` and `error` are defined. This prop should only be used for translating the default string 'Alert'.",
          "name": "alertLabel",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/Hint.tsx",
            "name": "HintProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/Hint.tsx",
              "name": "HintProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "Label": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/form-field/lib/Label.tsx",
      "description": "",
      "displayName": "Label",
      "methods": [],
      "props": {
        "labelPosition": {
          "defaultValue": {
            "value": "Label.Position.Top"
          },
          "description": "The position of the Label.",
          "name": "labelPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/Label.tsx",
            "name": "LabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/Label.tsx",
              "name": "LabelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "FormFieldLabelPosition",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "2",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "isLegend": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, style the Label as a legend.",
          "name": "isLegend",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/Label.tsx",
            "name": "LabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/Label.tsx",
              "name": "LabelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "htmlFor": {
          "defaultValue": null,
          "description": "The id of a labelable form-related element. Synonymous with `for`.",
          "name": "htmlFor",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/Label.tsx",
            "name": "LabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/Label.tsx",
              "name": "LabelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "required": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, style the Label to indicate that it is required.",
          "name": "required",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/Label.tsx",
            "name": "LabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/Label.tsx",
              "name": "LabelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "requiredLabel": {
          "defaultValue": {
            "value": "required"
          },
          "description": "The title of the required label.",
          "name": "requiredLabel",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/Label.tsx",
            "name": "LabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/Label.tsx",
              "name": "LabelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accessibleHide": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, apply the `accessibleHide` styles to the Label.",
          "name": "accessibleHide",
          "parent": {
            "fileName": "canvas-kit/modules/react/form-field/lib/Label.tsx",
            "name": "LabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/form-field/lib/Label.tsx",
              "name": "LabelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/icon": {
    "accentIconStyles": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/icon/lib/AccentIcon.tsx",
      "description": "",
      "displayName": "accentIconStyles",
      "methods": [],
      "props": {
        "color": {
          "defaultValue": {
            "value": "colors.blueberry500"
          },
          "description": "The fill color of the AccentIcon.",
          "name": "color",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/AccentIcon.tsx",
            "name": "AccentIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/AccentIcon.tsx",
              "name": "AccentIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "transparent": {
          "defaultValue": {
            "value": false
          },
          "description": "If true, set the background fill of the AccentIcon to `transparent`. If false, set the background fill of the AccentIcon to `colors.frenchVanilla100`.",
          "name": "transparent",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/AccentIcon.tsx",
            "name": "AccentIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/AccentIcon.tsx",
              "name": "AccentIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "AccentIcon": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/icon/lib/AccentIcon.tsx",
      "description": "",
      "displayName": "AccentIcon",
      "methods": [],
      "props": {
        "icon": {
          "defaultValue": null,
          "description": "The icon to display from `@workday/canvas-accent-icons-web`.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/AccentIcon.tsx",
            "name": "AccentIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/AccentIcon.tsx",
              "name": "AccentIconProps"
            }
          ],
          "required": true,
          "type": {
            "name": "CanvasAccentIcon"
          }
        },
        "size": {
          "defaultValue": {
            "value": "56"
          },
          "description": "The size of the AccentIcon in `px`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/AccentIcon.tsx",
            "name": "AccentIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/AccentIcon.tsx",
              "name": "AccentIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "color": {
          "defaultValue": {
            "value": "colors.blueberry500"
          },
          "description": "The fill color of the AccentIcon.",
          "name": "color",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/AccentIcon.tsx",
            "name": "AccentIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/AccentIcon.tsx",
              "name": "AccentIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "transparent": {
          "defaultValue": {
            "value": false
          },
          "description": "If true, set the background fill of the AccentIcon to `transparent`. If false, set the background fill of the AccentIcon to `colors.frenchVanilla100`.",
          "name": "transparent",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/AccentIcon.tsx",
            "name": "AccentIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/AccentIcon.tsx",
              "name": "AccentIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "styles": {
          "defaultValue": null,
          "description": "",
          "name": "styles",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CSSObject",
            "value": [
              {
                "value": "CSSObject",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirror": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the SVG's x-axis to mirror the graphic",
          "name": "shouldMirror",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "appletIconStyles": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/icon/lib/AppletIcon.tsx",
      "description": "",
      "displayName": "appletIconStyles",
      "methods": [],
      "props": {
        "color": {
          "defaultValue": {
            "value": "BrandingColor.Blueberry"
          },
          "description": "The icon color hue. Must use a member of the `AppletIcon.Colors` static enum.",
          "name": "color",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/AppletIcon.tsx",
            "name": "AppletIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/AppletIcon.tsx",
              "name": "AppletIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "BrandingColor",
            "value": [
              {
                "value": "\"cinnamon\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"peach\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"chiliMango\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"cantaloupe\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"sourLemon\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"juicyPear\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"kiwi\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"greenApple\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"watermelon\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"jewel\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"toothpaste\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"blueberry\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"plum\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"berrySmoothie\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"blackberry\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"islandPunch\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"grapeSoda\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"pomegranate\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"fruitPunch\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"rootBeer\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"toastedMarshmallow\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"cappuccino\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"licorice\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"blackPepper\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "AppletIcon": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/icon/lib/AppletIcon.tsx",
      "description": "",
      "displayName": "AppletIcon",
      "methods": [],
      "props": {
        "icon": {
          "defaultValue": null,
          "description": "The icon to display from `@workday/canvas-applet-icons-web`.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/AppletIcon.tsx",
            "name": "AppletIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/AppletIcon.tsx",
              "name": "AppletIconProps"
            }
          ],
          "required": true,
          "type": {
            "name": "CanvasAppletIcon"
          }
        },
        "size": {
          "defaultValue": {
            "value": "92"
          },
          "description": "The size of the AppletIcon in `px`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/AppletIcon.tsx",
            "name": "AppletIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/AppletIcon.tsx",
              "name": "AppletIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "color": {
          "defaultValue": {
            "value": "BrandingColor.Blueberry"
          },
          "description": "The icon color hue. Must use a member of the `AppletIcon.Colors` static enum.",
          "name": "color",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/AppletIcon.tsx",
            "name": "AppletIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/AppletIcon.tsx",
              "name": "AppletIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "BrandingColor",
            "value": [
              {
                "value": "\"cinnamon\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"peach\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"chiliMango\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"cantaloupe\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"sourLemon\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"juicyPear\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"kiwi\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"greenApple\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"watermelon\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"jewel\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"toothpaste\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"blueberry\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"plum\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"berrySmoothie\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"blackberry\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"islandPunch\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"grapeSoda\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"pomegranate\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"fruitPunch\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"rootBeer\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"toastedMarshmallow\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"cappuccino\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"licorice\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"blackPepper\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirror": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the SVG's x-axis to mirror the graphic",
          "name": "shouldMirror",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "graphicStyles": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/icon/lib/Graphic.tsx",
      "description": "",
      "displayName": "graphicStyles",
      "methods": [],
      "props": {
        "width": {
          "defaultValue": {
            "value": "width of graphic"
          },
          "description": "The width of the Graphic in `px`. The Graphic's `width` takes precedence over its `height` in order to preserve its proportions.",
          "name": "width",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Graphic.tsx",
            "name": "GraphicStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Graphic.tsx",
              "name": "GraphicStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "height": {
          "defaultValue": {
            "value": "height of graphic"
          },
          "description": "The height of the Graphic in `px`. If the Graphic's `height` is set, its `width` will be set to `100%`.",
          "name": "height",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Graphic.tsx",
            "name": "GraphicStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Graphic.tsx",
              "name": "GraphicStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, expand the Graphic to fit its container. `grow` takes precedence over both `width` and `height`.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Graphic.tsx",
            "name": "GraphicStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Graphic.tsx",
              "name": "GraphicStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "Graphic": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/icon/lib/Graphic.tsx",
      "description": "",
      "displayName": "Graphic",
      "methods": [],
      "props": {
        "src": {
          "defaultValue": null,
          "description": "The graphic to display from `@workday/canvas-graphics-web`.",
          "name": "src",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Graphic.tsx",
            "name": "GraphicProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Graphic.tsx",
              "name": "GraphicProps"
            }
          ],
          "required": true,
          "type": {
            "name": "CanvasGraphic"
          }
        },
        "width": {
          "defaultValue": {
            "value": "width of graphic"
          },
          "description": "The width of the Graphic in `px`. The Graphic's `width` takes precedence over its `height` in order to preserve its proportions.",
          "name": "width",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Graphic.tsx",
            "name": "GraphicStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Graphic.tsx",
              "name": "GraphicStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "height": {
          "defaultValue": {
            "value": "height of graphic"
          },
          "description": "The height of the Graphic in `px`. If the Graphic's `height` is set, its `width` will be set to `100%`.",
          "name": "height",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Graphic.tsx",
            "name": "GraphicStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Graphic.tsx",
              "name": "GraphicStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, expand the Graphic to fit its container. `grow` takes precedence over both `width` and `height`.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Graphic.tsx",
            "name": "GraphicStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Graphic.tsx",
              "name": "GraphicStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "shouldMirror": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the SVG's x-axis to mirror the graphic",
          "name": "shouldMirror",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "Icon": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/icon/lib/Icon.tsx",
      "description": "",
      "displayName": "Icon",
      "methods": [],
      "props": {
        "src": {
          "defaultValue": null,
          "description": "",
          "name": "src",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Icon.tsx",
            "name": "IconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Icon.tsx",
              "name": "IconProps"
            }
          ],
          "required": true,
          "type": {
            "name": "CanvasIcon"
          }
        },
        "size": {
          "defaultValue": null,
          "description": "",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Icon.tsx",
            "name": "IconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Icon.tsx",
              "name": "IconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "type": {
          "defaultValue": null,
          "description": "",
          "name": "type",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Icon.tsx",
            "name": "IconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Icon.tsx",
              "name": "IconProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "CanvasIconTypes.Accent | CanvasIconTypes.Applet | CanvasIconTypes.System",
            "value": [
              {
                "value": "\"accent\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"applet\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"system\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "styles": {
          "defaultValue": null,
          "description": "",
          "name": "styles",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CSSObject",
            "value": [
              {
                "value": "CSSObject",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirror": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the SVG's x-axis to mirror the graphic",
          "name": "shouldMirror",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "Svg": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/icon/lib/Svg.tsx",
      "description": "",
      "displayName": "Svg",
      "methods": [],
      "props": {
        "src": {
          "defaultValue": null,
          "description": "",
          "name": "src",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": true,
          "type": {
            "name": "CanvasIcon"
          }
        },
        "styles": {
          "defaultValue": null,
          "description": "",
          "name": "styles",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CSSObject",
            "value": [
              {
                "value": "CSSObject",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "type": {
          "defaultValue": null,
          "description": "",
          "name": "type",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "CanvasIconTypes",
            "value": [
              {
                "value": "\"accent\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"applet\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"system\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"graphic\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirror": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the SVG's x-axis to mirror the graphic",
          "name": "shouldMirror",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "systemIconStyles": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
      "description": "",
      "displayName": "systemIconStyles",
      "methods": [],
      "props": {
        "accent": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon. This overrides `color`.",
          "name": "accent",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accentHover": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "accentHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "background": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon.",
          "name": "background",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "backgroundHover": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon on hover.",
          "name": "backgroundHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "color": {
          "defaultValue": {
            "value": "iconColors.standard"
          },
          "description": "The color of the SystemIcon. This defines `accent` and `fill`. `color` may be overriden by `accent` and `fill`.",
          "name": "color",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "colorHover": {
          "defaultValue": {
            "value": "iconColors.hover"
          },
          "description": "The hover color of the SystemIcon. This defines `accentHover` and `fillHover`. `colorHover` may be overriden by `accentHover` and `fillHover`.",
          "name": "colorHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fill": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon. This overrides `color`.",
          "name": "fill",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fillHover": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "fillHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        }
      }
    },
    "SystemIcon": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
      "description": "",
      "displayName": "SystemIcon",
      "methods": [],
      "props": {
        "icon": {
          "defaultValue": null,
          "description": "The icon to display from `@workday/canvas-system-icons-web`.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": true,
          "type": {
            "name": "CanvasSystemIcon"
          }
        },
        "size": {
          "defaultValue": null,
          "description": "The size of the SystemIcon in `px`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "className": {
          "defaultValue": null,
          "description": "",
          "name": "className",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accent": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon. This overrides `color`.",
          "name": "accent",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accentHover": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "accentHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "background": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon.",
          "name": "background",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "backgroundHover": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon on hover.",
          "name": "backgroundHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "color": {
          "defaultValue": {
            "value": "iconColors.standard"
          },
          "description": "The color of the SystemIcon. This defines `accent` and `fill`. `color` may be overriden by `accent` and `fill`.",
          "name": "color",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "colorHover": {
          "defaultValue": {
            "value": "iconColors.hover"
          },
          "description": "The hover color of the SystemIcon. This defines `accentHover` and `fillHover`. `colorHover` may be overriden by `accentHover` and `fillHover`.",
          "name": "colorHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fill": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon. This overrides `color`.",
          "name": "fill",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fillHover": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "fillHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "styles": {
          "defaultValue": null,
          "description": "",
          "name": "styles",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CSSObject",
            "value": [
              {
                "value": "CSSObject",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirror": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the SVG's x-axis to mirror the graphic",
          "name": "shouldMirror",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "SystemIconCircle": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/icon/lib/SystemIconCircle.tsx",
      "description": "",
      "displayName": "SystemIconCircle",
      "methods": [],
      "props": {
        "background": {
          "defaultValue": {
            "value": "colors.soap300"
          },
          "description": "The background color of the SystemIconCircle from `@workday/canvas-colors-web`.",
          "name": "background",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIconCircle.tsx",
            "name": "SystemIconCircleProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIconCircle.tsx",
              "name": "SystemIconCircleProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon to display from `@workday/canvas-accent-icons-web`.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIconCircle.tsx",
            "name": "SystemIconCircleProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIconCircle.tsx",
              "name": "SystemIconCircleProps"
            }
          ],
          "required": true,
          "type": {
            "name": "CanvasSystemIcon"
          }
        },
        "size": {
          "defaultValue": {
            "value": "SystemIconCircleSize.l"
          },
          "description": "The size of the SystemIconCircle.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIconCircle.tsx",
            "name": "SystemIconCircleProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIconCircle.tsx",
              "name": "SystemIconCircleProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "shouldMirror": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the SVG's x-axis to mirror the graphic",
          "name": "shouldMirror",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/layout": {
    "boxStyleFn": {
      "tags": {
        "example": "```\nimport { boxStyleFn } from '@workday/canvas-kit-react/layout';\nconst StyledHeader = styled('h1')(\n boxStyleFn,\n {\n   fontWeight: 400,\n }\n)\n\n...\n\n<StyledHeader color='red'>Hello World</StyledHeader>\n```"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/layout/lib/Box.tsx",
      "description": "A function that allows us to call Box styles on an element and reduce the amount of elements in the React Dom tree.\nInstead of using the `as` in a styled function, you can just call this instead to pass those props to the styled element",
      "displayName": "boxStyleFn",
      "methods": [],
      "props": {}
    },
    "Box": {
      "tags": {
        "example": "import { Box, BoxProps } from '@workday/canvas-kit-react/layout';\n\ninterface CardProps extends BoxProps {\n  // card-specific props\n}\n\n// `Card`'s default values are set using `BoxProps`\nconst Card = (props: CardProps) => (\n  <Box depth={1} padding=\"m\" borderRadius=\"l\" {...props}>Hello, Card!</Box>\n);"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/layout/lib/Box.tsx",
      "description": "`Box` is a primitive component that provides a common, ergonomic API around Canvas design tokens.\nIt is highly flexible, and its primary purpose is to build other components.",
      "displayName": "Box",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "DeprecatedColumn": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/layout/lib/Column.tsx",
      "description": "",
      "displayName": "DeprecatedColumn",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The children of the DeprecatedColumn (cannot be empty).",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
            "name": "DeprecatedColumnProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
              "name": "DeprecatedColumnProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "spacing": {
          "defaultValue": {
            "value": "12"
          },
          "description": "The left and right padding of the DeprecatedColumn (inherits from Layout prop).",
          "name": "spacing",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
            "name": "DeprecatedColumnProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
              "name": "DeprecatedColumnProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "columns": {
          "defaultValue": null,
          "description": "The size of the 12-column grid.",
          "name": "columns",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
            "name": "DeprecatedColumnProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
              "name": "DeprecatedColumnProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "2 | 3 | 1 | 4 | 5 | 6 | 10 | 12 | 7 | 8 | 9 | 11",
            "value": [
              {
                "value": "2"
              },
              {
                "value": "3"
              },
              {
                "value": "1"
              },
              {
                "value": "4"
              },
              {
                "value": "5"
              },
              {
                "value": "6"
              },
              {
                "value": "10"
              },
              {
                "value": "12"
              },
              {
                "value": "7"
              },
              {
                "value": "8"
              },
              {
                "value": "9"
              },
              {
                "value": "11"
              }
            ]
          }
        },
        "width": {
          "defaultValue": null,
          "description": "The width of the columns. This will take precedence over `columns`.",
          "name": "width",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
            "name": "DeprecatedColumnProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
              "name": "DeprecatedColumnProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        }
      }
    },
    "Flex": {
      "tags": {
        "example": "```tsx\nimport { Flex, FlexProps } from '@workday/canvas-kit-react/layout';\n\ninterface CardProps extends FlexProps {\n  // card-specific props\n}\n\n// `Card`'s default values are set using `FlexProps`\nconst Card = (props: CardProps) => (\n  <Flex flexDirection=\"column\" alignItems=\"flex-start\" depth={1} space=\"m\" {...props}>\n    <h1>Hello, Card!</h1>\n    <p>This card uses flexbox to set its layout.</p>\n  </Flex>\n);\n```"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/layout/lib/Flex.tsx",
      "description": "`Flex` is a low-level layout component that provides a common, ergonomic API for applying CSS flexbox styles.\nIt is highly flexible, and can be used on its own or to build other components.\n`Flex` is built on top of `Box` and has access to all `BoxProps`.",
      "displayName": "Flex",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "Grid": {
      "tags": {
        "example": "```tsx\nimport { Grid } from '@workday/canvas-kit-react/layout';\n\ninterface CardProps extends GridProps {\n  // card-specific props\n}\n\n// `Card`'s default values are set using `GridProps`\nconst Card = (props: CardProps) => (\n  <Grid gridAutoFlow=\"row\" alignItems=\"start\" depth={1} space=\"m\" {...props}>\n    <h1>Hello, Card!</h1>\n    <p>This card uses grid to set its layout.</p>\n  </Grid>\n);\n```"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/layout/lib/Grid.tsx",
      "description": "`Grid` is a two-dimensional layout system for the web. It lets you lay content out in rows and columns.\nIt is highly flexible, and can be used on its own or to build other components.\n`Grid` is built on top of `Box` and has access to all `BoxProps`.",
      "displayName": "Grid",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "DeprecatedLayout": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/layout/lib/Layout.tsx",
      "description": "### Deprecated Layout\n\nAs of Canvas Kit v8, Layout is being soft-deprecated.\nIt will be hard-deprecated (completely removed) in v9. Please see the\n[upgrade guide](https://workday.github.io/canvas-kit/?path=/story/welcome-upgrade-guides-v8-0--page)\nfor more information.",
      "displayName": "DeprecatedLayout",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The children of the DeprecatedLayout (cannot be empty).",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Layout.tsx",
            "name": "DeprecatedLayoutProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Layout.tsx",
              "name": "DeprecatedLayoutProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode | ReactElement<DeprecatedColumnProps, string | JSXElementConstructor<any>>[]",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactElement<DeprecatedColumnProps, string | JSXElementConstructor<any>>[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "spacing": {
          "defaultValue": null,
          "description": "The spacing of the DeprecatedLayout children.",
          "name": "spacing",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Layout.tsx",
            "name": "DeprecatedLayoutProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Layout.tsx",
              "name": "DeprecatedLayoutProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "gutter": {
          "defaultValue": {
            "value": "12"
          },
          "description": "The padding of the DeprecatedLayout's outside container.",
          "name": "gutter",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Layout.tsx",
            "name": "DeprecatedLayoutProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Layout.tsx",
              "name": "DeprecatedLayoutProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "capWidth": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the max width of the DeprecatedLayout container to `1280px`.",
          "name": "capWidth",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Layout.tsx",
            "name": "DeprecatedLayoutProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Layout.tsx",
              "name": "DeprecatedLayoutProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "DeprecatedLayout.Column": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/layout/lib/Layout.tsx",
      "description": "",
      "displayName": "DeprecatedLayout.Column",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The children of the DeprecatedColumn (cannot be empty).",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
            "name": "DeprecatedColumnProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
              "name": "DeprecatedColumnProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "spacing": {
          "defaultValue": {
            "value": "12"
          },
          "description": "The left and right padding of the DeprecatedColumn (inherits from Layout prop).",
          "name": "spacing",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
            "name": "DeprecatedColumnProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
              "name": "DeprecatedColumnProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "columns": {
          "defaultValue": null,
          "description": "The size of the 12-column grid.",
          "name": "columns",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
            "name": "DeprecatedColumnProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
              "name": "DeprecatedColumnProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "2 | 3 | 1 | 4 | 5 | 6 | 10 | 12 | 7 | 8 | 9 | 11",
            "value": [
              {
                "value": "2"
              },
              {
                "value": "3"
              },
              {
                "value": "1"
              },
              {
                "value": "4"
              },
              {
                "value": "5"
              },
              {
                "value": "6"
              },
              {
                "value": "10"
              },
              {
                "value": "12"
              },
              {
                "value": "7"
              },
              {
                "value": "8"
              },
              {
                "value": "9"
              },
              {
                "value": "11"
              }
            ]
          }
        },
        "width": {
          "defaultValue": null,
          "description": "The width of the columns. This will take precedence over `columns`.",
          "name": "width",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
            "name": "DeprecatedColumnProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Column.tsx",
              "name": "DeprecatedColumnProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        }
      }
    },
    "Stack": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/layout/lib/Stack.tsx",
      "description": "",
      "displayName": "Stack",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "HStack": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/layout/lib/Stack.tsx",
      "description": "",
      "displayName": "HStack",
      "methods": [],
      "props": {
        "flexDirection": {
          "defaultValue": {
            "value": "\"row\""
          },
          "description": "sets the direction for the stack",
          "name": "flexDirection",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
            "name": "HStackProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
              "name": "HStackProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"row\" | \"row-reverse\"",
            "value": [
              {
                "value": "\"row\""
              },
              {
                "value": "\"row-reverse\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "VStack": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/layout/lib/Stack.tsx",
      "description": "",
      "displayName": "VStack",
      "methods": [],
      "props": {
        "flexDirection": {
          "defaultValue": {
            "value": "\"column\""
          },
          "description": "sets the direction for the stack",
          "name": "flexDirection",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
            "name": "VStackProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
              "name": "VStackProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"column\" | \"column-reverse\"",
            "value": [
              {
                "value": "\"column\""
              },
              {
                "value": "\"column-reverse\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/loading-dots": {
    "LoadingDots": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/loading-dots/lib/LoadingDots.tsx",
      "description": "A simple component that displays three horizontal dots, to be used when some data is loading.",
      "displayName": "LoadingDots",
      "methods": [],
      "props": {}
    }
  },
  "@workday/canvas-kit-react/menu": {
    "Menu": {
      "tags": {
        "example": "<Menu>\n  <Menu.Target>Open</Menu.Target>\n  <Menu.Popper>\n    <Menu.Card>\n      <Menu.List>\n        <Menu.Item data-id=\"first\">First Item</Menu.Item>\n        <Menu.Item data-id=\"second\">Second Item</Menu.Item>\n      </Menu.List>\n    </Menu.Card>\n  </Menu.Popper>\n</Menu>"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/menu/lib/Menu.tsx",
      "description": "An accessible dropdown menu component. A dropdown menu usually contains a target element that\nopens to a menu.",
      "displayName": "Menu",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The contents of the Menu. Can be `Menu` children or any valid elements.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/menu/lib/Menu.tsx",
            "name": "MenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/menu/lib/Menu.tsx",
              "name": "MenuProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "mode": {
          "defaultValue": null,
          "description": "Determines the default selection manager used as well as if the menu closes when an item is selected",
          "name": "mode",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"single\" | \"multiple\"",
            "value": [
              {
                "value": "\"single\""
              },
              {
                "value": "\"multiple\""
              }
            ]
          }
        },
        "returnFocusRef": {
          "defaultValue": null,
          "description": "Optional reference to an element that should receive focus when a popup is hidden. If left\nblank, focus will return to the `targetRef`",
          "name": "returnFocusRef",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RefObject<any>",
            "value": [
              {
                "value": "RefObject<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "initialFocusRef": {
          "defaultValue": null,
          "description": "Optional reference to an element that should receive focus when a popup is shown. If left blank,\nfocus will be moved to the first focusable element inside the popup.",
          "name": "initialFocusRef",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RefObject<any>",
            "value": [
              {
                "value": "RefObject<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "id": {
          "defaultValue": null,
          "description": "ID reference of the list. Children ids can be derived from this id",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "initialVisibility": {
          "defaultValue": {
            "value": "'hidden'"
          },
          "description": "The initial visibility of the disclosed content",
          "name": "initialVisibility",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Visibility",
            "value": [
              {
                "value": "\"hidden\""
              },
              {
                "value": "\"visible\""
              }
            ]
          }
        },
        "initialSelectedIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialSelectedIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SelectedIds",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"all\""
              }
            ]
          }
        },
        "initialUnselectedIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialUnselectedIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "selection": {
          "defaultValue": null,
          "description": "",
          "name": "selection",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SelectionManager",
            "value": [
              {
                "value": "SelectionManager",
                "description": "A SelectionManager is used",
                "fullComment": "A SelectionManager is used",
                "tags": {}
              }
            ]
          }
        },
        "initialCursorId": {
          "defaultValue": null,
          "description": "Initial cursor position. If not provided, the cursor will point to the first item in the list",
          "name": "initialCursorId",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "columnCount": {
          "defaultValue": {
            "value": "0"
          },
          "description": "If this is set it will cause a wrapping of a list that will turn it into a grid",
          "name": "columnCount",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "navigation": {
          "defaultValue": null,
          "description": "Controls the state changes when the user sends navigation events to the model. For example,\nwhen the user hits the \"right\" arrow, a behavior hook will determine directionality\n(left-to-right or right-to-left) and call the correct navigation method. In our example, a\nleft-to-right language would send a `getNext`. The navigation manager may return the next item\nin the list. Different managers can be created for slightly different use cases. The default\nnavigation manager will accept `orientation` and directionality to determine mapping.\n\nAn example override might be a tab list with an overflow menu that is meant to be transparent\nto screen reader users. This would require the overflow menu to accept both up/down keys as\nwell as left/right keys to give a more consistent experience to all users.",
          "name": "navigation",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "NavigationManager",
            "value": [
              {
                "value": "NavigationManager",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "getId": {
          "defaultValue": null,
          "description": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
          "name": "getId",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((item: any) => string)",
            "value": [
              {
                "value": "(item: any) => string",
                "description": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
                "fullComment": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
                "tags": {}
              }
            ]
          }
        },
        "getTextValue": {
          "defaultValue": null,
          "description": "",
          "name": "getTextValue",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((item: any) => string)",
            "value": [
              {
                "value": "(item: any) => string",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "nonInteractiveIds": {
          "defaultValue": null,
          "description": "Array of all ids which are currently disabled. This is used for navigation to skip over items\nwhich are not focusable.",
          "name": "nonInteractiveIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "orientation": {
          "defaultValue": {
            "value": "'vertical'"
          },
          "description": "The orientation of a list of items. Values are either `vertical` or `horizontal`. This value will\neffect which ids activate progression through a list. For example, `horizontal` will activate with\nleft and right arrows while `vertical` will activate with up and down arrows.",
          "name": "orientation",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Orientation",
            "value": [
              {
                "value": "\"vertical\""
              },
              {
                "value": "\"horizontal\""
              }
            ]
          }
        },
        "defaultItemHeight": {
          "defaultValue": {
            "value": "50"
          },
          "description": "Best guess to the default item height for virtualization. Getting this number correct\navoids a rerender while the list is initializing.",
          "name": "defaultItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "shouldVirtualize": {
          "defaultValue": null,
          "description": "",
          "name": "shouldVirtualize",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "items": {
          "defaultValue": null,
          "description": "Optional array of items. If provided, use a render prop for list children instead of static\nchildren. If the shape of each item object does not have an `id` property or uses a different\nproperty to uniquely identify each item, a `getId` must also be supplied.",
          "name": "items",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/collection/lib/useBaseListModel.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "any[]",
            "value": [
              {
                "value": "any[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUpdatePlacement": {
          "defaultValue": null,
          "description": "Called whenever a popup placement changes around a target. This is useful for animations that\ndepend on the placement chosen.",
          "name": "onUpdatePlacement",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { placement: Placement; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void)",
            "value": [
              {
                "value": "(data: { placement: Placement; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onShow": {
          "defaultValue": null,
          "description": "Start showing the disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "onShow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onHide": {
          "defaultValue": null,
          "description": "Start hiding this disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "onHide",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSelect": {
          "defaultValue": null,
          "description": "Select a specific item by its identifier.",
          "name": "onSelect",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSelectAll": {
          "defaultValue": null,
          "description": "Select all items. This will set `selectedIds` to `'all'` and remove all `unselectedIds`.\nThis is especially useful for virtual lists where not all items are loaded in memory.",
          "name": "onSelectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnselectAll": {
          "defaultValue": null,
          "description": "Unselect all items.",
          "name": "onUnselectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onRegisterItem": {
          "defaultValue": null,
          "description": "Register an item to the list. Takes in an identifier, a React.Ref and an optional index. This\nshould be called on component mount",
          "name": "onRegisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void)",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoTo": {
          "defaultValue": null,
          "description": "Directly sets the cursor to the list item by its identifier.",
          "name": "onGoTo",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNext": {
          "defaultValue": null,
          "description": "Set the cursor to the \"next\" item in the list. This event delegates to the `getNext` method of\nthe navigation manager. For a list, the default navigation manager will wrap if cursor is\ncurrently on the last item. For a grid, the default navigation manager will stay on the last\nitem in a row.",
          "name": "onGoToNext",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPrevious": {
          "defaultValue": null,
          "description": "Set the cursor to the \"previous\" item in the list. If the beginning of the list is detected,\nit will wrap to the last item",
          "name": "onGoToPrevious",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPreviousRow": {
          "defaultValue": null,
          "description": "Previous item perpendicular to the orientation of a list, or the previous row in a grid. For\nexample, if a list is horizontal, the previous row would describe an up direction. This could\nbe ignored by the navigation manager, or return the same result as `previous()`. In a grid,\nthis would be the previous row (current position - column count).",
          "name": "onGoToPreviousRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNextRow": {
          "defaultValue": null,
          "description": "Next item perpendicular to the orientation of a list, or the next row in a grid. For example,\nif a list is horizontal, the next row would describe a down direction. This could be ignored by\nthe navigation manager, or return the same result as `next()`. In a grid, this would be the\nnext row (current position + column count).",
          "name": "onGoToNextRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToFirst": {
          "defaultValue": null,
          "description": "Set the cursor to the first item in the list",
          "name": "onGoToFirst",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToLast": {
          "defaultValue": null,
          "description": "Set the cursor to the last item in the list",
          "name": "onGoToLast",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToFirstOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToFirstOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToLastOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToLastOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNextPage": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToNextPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPreviousPage": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToPreviousPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnregisterItem": {
          "defaultValue": null,
          "description": "Unregister an item by its identifier. This should be called when the component is unmounted.\nThis event is only called for static rendering.",
          "name": "onUnregisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUpdateItemHeight": {
          "defaultValue": null,
          "description": "Updates the default item height. This should only be called when item height is measured.\nCalling this with a different default item height than previous will cause a virtual list to\nrecalculate the overall height of the list and invalidate any height caching. Doing this only\non the first item may save the user from experiencing odd scrolling behavior where the\nscrollbar updates while scrolling. If the user uses the mouse to drag the bar, it can become\n\"detached\" since the browser recalculates scroll bar position while the overflow container is\nupdated.",
          "name": "onUpdateItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { value: number; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: { value: number; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUpdatePlacement": {
          "defaultValue": null,
          "description": "Called whenever a popup placement changes around a target. This is useful for animations that\ndepend on the placement chosen.",
          "name": "shouldUpdatePlacement",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { placement: Placement; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean)",
            "value": [
              {
                "value": "(data: { placement: Placement; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldShow": {
          "defaultValue": null,
          "description": "Start showing the disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "shouldShow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldHide": {
          "defaultValue": null,
          "description": "Start hiding this disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "shouldHide",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSelect": {
          "defaultValue": null,
          "description": "Select a specific item by its identifier.",
          "name": "shouldSelect",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: { id: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSelectAll": {
          "defaultValue": null,
          "description": "Select all items. This will set `selectedIds` to `'all'` and remove all `unselectedIds`.\nThis is especially useful for virtual lists where not all items are loaded in memory.",
          "name": "shouldSelectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnselectAll": {
          "defaultValue": null,
          "description": "Unselect all items.",
          "name": "shouldUnselectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldRegisterItem": {
          "defaultValue": null,
          "description": "Register an item to the list. Takes in an identifier, a React.Ref and an optional index. This\nshould be called on component mount",
          "name": "shouldRegisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean)",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 17 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoTo": {
          "defaultValue": null,
          "description": "Directly sets the cursor to the list item by its identifier.",
          "name": "shouldGoTo",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: { id: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNext": {
          "defaultValue": null,
          "description": "Set the cursor to the \"next\" item in the list. This event delegates to the `getNext` method of\nthe navigation manager. For a list, the default navigation manager will wrap if cursor is\ncurrently on the last item. For a grid, the default navigation manager will stay on the last\nitem in a row.",
          "name": "shouldGoToNext",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPrevious": {
          "defaultValue": null,
          "description": "Set the cursor to the \"previous\" item in the list. If the beginning of the list is detected,\nit will wrap to the last item",
          "name": "shouldGoToPrevious",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPreviousRow": {
          "defaultValue": null,
          "description": "Previous item perpendicular to the orientation of a list, or the previous row in a grid. For\nexample, if a list is horizontal, the previous row would describe an up direction. This could\nbe ignored by the navigation manager, or return the same result as `previous()`. In a grid,\nthis would be the previous row (current position - column count).",
          "name": "shouldGoToPreviousRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNextRow": {
          "defaultValue": null,
          "description": "Next item perpendicular to the orientation of a list, or the next row in a grid. For example,\nif a list is horizontal, the next row would describe a down direction. This could be ignored by\nthe navigation manager, or return the same result as `next()`. In a grid, this would be the\nnext row (current position + column count).",
          "name": "shouldGoToNextRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToFirst": {
          "defaultValue": null,
          "description": "Set the cursor to the first item in the list",
          "name": "shouldGoToFirst",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToLast": {
          "defaultValue": null,
          "description": "Set the cursor to the last item in the list",
          "name": "shouldGoToLast",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToFirstOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToFirstOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToLastOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToLastOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNextPage": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToNextPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPreviousPage": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToPreviousPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnregisterItem": {
          "defaultValue": null,
          "description": "Unregister an item by its identifier. This should be called when the component is unmounted.\nThis event is only called for static rendering.",
          "name": "shouldUnregisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: { id: string; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUpdateItemHeight": {
          "defaultValue": null,
          "description": "Updates the default item height. This should only be called when item height is measured.\nCalling this with a different default item height than previous will cause a virtual list to\nrecalculate the overall height of the list and invalidate any height caching. Doing this only\non the first item may save the user from experiencing odd scrolling behavior where the\nscrollbar updates while scrolling. If the user uses the mouse to drag the bar, it can become\n\"detached\" since the browser recalculates scroll bar position while the overflow container is\nupdated.",
          "name": "shouldUpdateItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { value: number; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...>; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: { value: number; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<...> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPr...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPro...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "MenuCard": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/menu/lib/MenuCard.tsx",
      "description": "",
      "displayName": "MenuCard",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "Children of the Card. Should contain a `<Card.Body>` and an optional `<Card.Heading>`",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/menu/lib/MenuCard.tsx",
            "name": "MenuCardProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/menu/lib/MenuCard.tsx",
              "name": "MenuCardProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPr...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPro...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "MenuTarget": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/menu/lib/MenuTarget.tsx",
      "description": "",
      "displayName": "MenuTarget",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPr...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPro...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "MenuDivider": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/menu/lib/MenuDivider.tsx",
      "description": "",
      "displayName": "MenuDivider",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "MenuItem": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/menu/lib/MenuItem.tsx",
      "description": "",
      "displayName": "MenuItem",
      "methods": [],
      "props": {
        "index": {
          "defaultValue": null,
          "description": "Optionally pass index to menu item. This should be done if `Menu.Item` components were created\nvia a `Array::map` function. This index will ensure keyboard navigation works even if items are\ninserted out of order.",
          "name": "index",
          "parent": {
            "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
            "name": "MenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
              "name": "MenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "children": {
          "defaultValue": null,
          "description": "The label text of the MenuItem.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
            "name": "MenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
              "name": "MenuItemProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "data-id": {
          "defaultValue": null,
          "description": "The name of the menu item. This name will be used in the `onSelect` callback in the model. If\nthis property is not provided, it will default to a string representation of the the zero-based\nindex of the Tab when it was initialized.",
          "name": "data-id",
          "parent": {
            "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
            "name": "MenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
              "name": "MenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "aria-disabled": {
          "defaultValue": null,
          "description": "",
          "name": "aria-disabled",
          "parent": {
            "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
            "name": "MenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/menu/lib/MenuItem.tsx",
              "name": "MenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPr...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPro...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "MenuList": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/menu/lib/MenuList.tsx",
      "description": "",
      "displayName": "MenuList",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The label text of the MenuList.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/menu/lib/MenuList.tsx",
            "name": "MenuListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/menu/lib/MenuList.tsx",
              "name": "MenuListProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode | ((item: any) => ReactNode)",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "(item: any) => ReactNode",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPr...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPro...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "MenuPopper": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/menu/lib/MenuPopper.tsx",
      "description": "",
      "displayName": "MenuPopper",
      "methods": [],
      "props": {
        "anchorElement": {
          "defaultValue": null,
          "description": "The reference element used to position the Popper. Popper content will try to follow the\n`anchorElement` if it moves and will reposition itself if there is no longer room in the\nwindow.",
          "name": "anchorElement",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Element | RefObject<Element> | null",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "Element",
                "description": "Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
                "fullComment": "Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
                "tags": {}
              },
              {
                "value": "RefObject<Element>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "children": {
          "defaultValue": null,
          "description": "The content of the Popper. If a function is provided, it will be treated as a Render Prop and\npass the `placement` chosen by PopperJS. This `placement` value is useful if your popup needs\nto animate and that animation depends on the direction of the content in relation to the\n`anchorElement`.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode | ((props: { placement: Placement; }) => ReactNode)",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "(props: { placement: Placement; }) => ReactNode",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "getAnchorClientRect": {
          "defaultValue": null,
          "description": "When provided, this optional callback will be used to determine positioning for the Popper element\ninstead of calling `getBoundingClientRect` on the `anchorElement` prop. Use this when you need\ncomplete control over positioning. When this prop is specified, it is safe to pass `null` into the\n`anchorElement` prop. If `null` is passed into the `anchorElement` prop, an `owner` will not be\nprovided for the `PopupStack`.",
          "name": "getAnchorClientRect",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(() => DOMRect)",
            "value": [
              {
                "value": "() => DOMRect",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "open": {
          "defaultValue": {
            "value": "true"
          },
          "description": "Determines if `Popper` content should be rendered. The content only exists in the DOM when\n`open` is `true`",
          "name": "open",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "placement": {
          "defaultValue": {
            "value": "bottom"
          },
          "description": "The placement of the `Popper` contents relative to the `anchorElement`. Accepts `auto`, `top`,\n`right`, `bottom`, or `left`. Each placement can also be modified using any of the following\nvariations: `-start` or `-end`.",
          "name": "placement",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Placement",
            "value": [
              {
                "value": "\"auto\""
              },
              {
                "value": "\"auto-start\""
              },
              {
                "value": "\"auto-end\""
              },
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"right\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"top-start\""
              },
              {
                "value": "\"top-end\""
              },
              {
                "value": "\"bottom-start\""
              },
              {
                "value": "\"bottom-end\""
              },
              {
                "value": "\"right-start\""
              },
              {
                "value": "\"right-end\""
              },
              {
                "value": "\"left-start\""
              },
              {
                "value": "\"left-end\""
              }
            ]
          }
        },
        "onPlacementChange": {
          "defaultValue": null,
          "description": "A callback function that will be called whenever PopperJS chooses a placement that is different\nfrom the provided `placement` preference. If a `placement` preference doesn't fit, PopperJS\nwill choose a new one and call this callback.",
          "name": "onPlacementChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((placement: Placement) => void)",
            "value": [
              {
                "value": "(placement: Placement) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "popperOptions": {
          "defaultValue": null,
          "description": "The additional options passed to the Popper's `popper.js` instance.",
          "name": "popperOptions",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Partial<Options>",
            "value": [
              {
                "value": "Partial<Options>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "portal": {
          "defaultValue": {
            "value": "true"
          },
          "description": "If false, render the Popper within the\nDOM hierarchy of its parent. A non-portal Popper will constrained by the parent container\noverflows. If you set this to `false`, you may experience issues where you content gets cut off\nby scrollbars or `overflow: hidden`",
          "name": "portal",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "popperInstanceRef": {
          "defaultValue": null,
          "description": "Reference to the PopperJS instance. Useful for making direct method calls on the popper\ninstance like `update`.",
          "name": "popperInstanceRef",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Ref<Instance>",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "(instance: Instance | null) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "RefObject<Instance>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPr...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPro...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "MenuTargetContext": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/menu/lib/MenuTarget.tsx",
      "description": "",
      "displayName": "MenuTargetContext",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPr...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPro...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/modal": {
    "Modal": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/modal/lib/Modal.tsx",
      "description": "",
      "displayName": "Modal",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The contents of the Dialog. Can be `Dialog` children or any valid elements.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/dialog/lib/Dialog.tsx",
            "name": "DialogProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/dialog/lib/Dialog.tsx",
              "name": "DialogProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "returnFocusRef": {
          "defaultValue": null,
          "description": "Optional reference to an element that should receive focus when a popup is hidden. If left\nblank, focus will return to the `targetRef`",
          "name": "returnFocusRef",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RefObject<any>",
            "value": [
              {
                "value": "RefObject<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "initialFocusRef": {
          "defaultValue": null,
          "description": "Optional reference to an element that should receive focus when a popup is shown. If left blank,\nfocus will be moved to the first focusable element inside the popup.",
          "name": "initialFocusRef",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RefObject<any>",
            "value": [
              {
                "value": "RefObject<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "id": {
          "defaultValue": null,
          "description": "ID reference of the list. Children ids can be derived from this id",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "initialVisibility": {
          "defaultValue": {
            "value": "'hidden'"
          },
          "description": "The initial visibility of the disclosed content",
          "name": "initialVisibility",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Visibility",
            "value": [
              {
                "value": "\"hidden\""
              },
              {
                "value": "\"visible\""
              }
            ]
          }
        },
        "onUpdatePlacement": {
          "defaultValue": null,
          "description": "Called whenever a popup placement changes around a target. This is useful for animations that\ndepend on the placement chosen.",
          "name": "onUpdatePlacement",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { placement: Placement; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void)",
            "value": [
              {
                "value": "(data: { placement: Placement; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onShow": {
          "defaultValue": null,
          "description": "Start showing the disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "onShow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onHide": {
          "defaultValue": null,
          "description": "Start hiding this disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "onHide",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUpdatePlacement": {
          "defaultValue": null,
          "description": "Called whenever a popup placement changes around a target. This is useful for animations that\ndepend on the placement chosen.",
          "name": "shouldUpdatePlacement",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { placement: Placement; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean)",
            "value": [
              {
                "value": "(data: { placement: Placement; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldShow": {
          "defaultValue": null,
          "description": "Start showing the disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "shouldShow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldHide": {
          "defaultValue": null,
          "description": "Start hiding this disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "shouldHide",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ModalCard": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/modal/lib/ModalCard.tsx",
      "description": "",
      "displayName": "ModalCard",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "Children of the Card. Should contain a `<Card.Body>` and an optional `<Card.Heading>`",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/PopupCard.tsx",
            "name": "PopupCardProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/PopupCard.tsx",
              "name": "PopupCardProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ModalHeading": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/modal/lib/ModalHeading.tsx",
      "description": "",
      "displayName": "ModalHeading",
      "methods": [],
      "props": {
        "id": {
          "defaultValue": null,
          "description": "The id of the Card heading. Tie this to an `aria-labelledby` for accessibility.",
          "name": "id",
          "parent": {
            "fileName": "canvas-kit/modules/react/card/lib/CardHeading.tsx",
            "name": "CardHeadingProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/card/lib/CardHeading.tsx",
              "name": "CardHeadingProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ModalOverflowOverlay": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/modal/lib/ModalOverflowOverlay.tsx",
      "description": "",
      "displayName": "ModalOverflowOverlay",
      "methods": [],
      "props": {
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ModalOverlay": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/modal/lib/ModalOverlay.tsx",
      "description": "",
      "displayName": "ModalOverlay",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/pagination": {
    "AdditionalDetails": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/AdditionalDetails.tsx",
      "description": "",
      "displayName": "AdditionalDetails",
      "methods": [],
      "props": {
        "model": {
          "defaultValue": null,
          "description": "",
          "name": "model",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/AdditionalDetails.tsx",
            "name": "AdditionalDetailsProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/AdditionalDetails.tsx",
              "name": "AdditionalDetailsProps"
            }
          ],
          "required": true,
          "type": {
            "name": "PaginationModel"
          }
        },
        "shouldAnnounceToScreenReader": {
          "defaultValue": null,
          "description": "",
          "name": "shouldAnnounceToScreenReader",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/AdditionalDetails.tsx",
            "name": "AdditionalDetailsProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/AdditionalDetails.tsx",
              "name": "AdditionalDetailsProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "shouldHideDetails": {
          "defaultValue": null,
          "description": "",
          "name": "shouldHideDetails",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/AdditionalDetails.tsx",
            "name": "AdditionalDetailsProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/AdditionalDetails.tsx",
              "name": "AdditionalDetailsProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "List": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/common/List.tsx",
      "description": "",
      "displayName": "List",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ListItem": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/common/List.tsx",
      "description": "",
      "displayName": "ListItem",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "Controls": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Controls.tsx",
      "description": "",
      "displayName": "Controls",
      "methods": [],
      "props": {}
    },
    "JumpToFirstButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Controls.tsx",
      "description": "",
      "displayName": "JumpToFirstButton",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the TertiaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are three button sizes: `extraSmall`, `small`, and `medium`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Controls.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": true,
          "type": {
            "name": "PaginationModel"
          }
        }
      }
    },
    "StepToPreviousButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Controls.tsx",
      "description": "",
      "displayName": "StepToPreviousButton",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the TertiaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are three button sizes: `extraSmall`, `small`, and `medium`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Controls.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": true,
          "type": {
            "name": "PaginationModel"
          }
        }
      }
    },
    "StepToNextButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Controls.tsx",
      "description": "",
      "displayName": "StepToNextButton",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the TertiaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are three button sizes: `extraSmall`, `small`, and `medium`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Controls.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": true,
          "type": {
            "name": "PaginationModel"
          }
        }
      }
    },
    "JumpToLastButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Controls.tsx",
      "description": "",
      "displayName": "JumpToLastButton",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the TertiaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are three button sizes: `extraSmall`, `small`, and `medium`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Controls.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": true,
          "type": {
            "name": "PaginationModel"
          }
        }
      }
    },
    "GoToForm": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Form.tsx",
      "description": "",
      "displayName": "GoToForm",
      "methods": [],
      "props": {
        "flexDirection": {
          "defaultValue": {
            "value": "\"row\""
          },
          "description": "sets the direction for the stack",
          "name": "flexDirection",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
            "name": "HStackProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
              "name": "HStackProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"row\" | \"row-reverse\"",
            "value": [
              {
                "value": "\"row\""
              },
              {
                "value": "\"row-reverse\""
              }
            ]
          }
        },
        "spacing": {
          "defaultValue": {
            "value": "xxs"
          },
          "description": "",
          "name": "spacing",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Form.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number | (string & {}) | keyof CanvasSpace",
            "value": [
              {
                "value": "number"
              },
              {
                "value": "\"s\""
              },
              {
                "value": "string & {}"
              },
              {
                "value": "\"zero\""
              },
              {
                "value": "\"m\""
              },
              {
                "value": "\"l\""
              },
              {
                "value": "\"xxxs\""
              },
              {
                "value": "\"xxs\""
              },
              {
                "value": "\"xs\""
              },
              {
                "value": "\"xl\""
              },
              {
                "value": "\"xxl\""
              },
              {
                "value": "\"xxxl\""
              }
            ]
          }
        }
      }
    },
    "GoTo": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/GoTo/GoTo.tsx",
      "description": "",
      "displayName": "GoTo",
      "methods": [],
      "props": {
        "model": {
          "defaultValue": null,
          "description": "",
          "name": "model",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/GoTo.tsx",
            "name": "GoToProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/GoTo.tsx",
              "name": "GoToProps"
            }
          ],
          "required": true,
          "type": {
            "name": "PaginationModel"
          }
        },
        "onSubmit": {
          "defaultValue": null,
          "description": "",
          "name": "onSubmit",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/useGoToForm.tsx",
            "name": "UseGoToFormConfig"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/useGoToForm.tsx",
              "name": "UseGoToFormConfig"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((event: FormEvent<HTMLFormElement>) => void)",
            "value": [
              {
                "value": "(event: FormEvent<HTMLFormElement>) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "GoTo.Form": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/GoTo/GoTo.tsx",
      "description": "",
      "displayName": "GoTo.Form",
      "methods": [],
      "props": {
        "flexDirection": {
          "defaultValue": {
            "value": "\"row\""
          },
          "description": "sets the direction for the stack",
          "name": "flexDirection",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
            "name": "HStackProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
              "name": "HStackProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"row\" | \"row-reverse\"",
            "value": [
              {
                "value": "\"row\""
              },
              {
                "value": "\"row-reverse\""
              }
            ]
          }
        },
        "spacing": {
          "defaultValue": null,
          "description": "",
          "name": "spacing",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Form.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number | (string & {}) | keyof CanvasSpace",
            "value": [
              {
                "value": "number"
              },
              {
                "value": "\"s\""
              },
              {
                "value": "string & {}"
              },
              {
                "value": "\"zero\""
              },
              {
                "value": "\"m\""
              },
              {
                "value": "\"l\""
              },
              {
                "value": "\"xxxs\""
              },
              {
                "value": "\"xxs\""
              },
              {
                "value": "\"xs\""
              },
              {
                "value": "\"xl\""
              },
              {
                "value": "\"xxl\""
              },
              {
                "value": "\"xxxl\""
              }
            ]
          }
        }
      }
    },
    "GoTo.TextInput": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/GoTo/GoTo.tsx",
      "description": "",
      "displayName": "GoTo.TextInput",
      "methods": [],
      "props": {
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the TextInput (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
            "name": "TextInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
              "name": "TextInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "width": {
          "defaultValue": null,
          "description": "The width of the TextInput.",
          "name": "width",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
            "name": "TextInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
              "name": "TextInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "aria-label": {
          "defaultValue": null,
          "description": "",
          "name": "aria-label",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/TextInput.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "value": {
          "defaultValue": null,
          "description": "",
          "name": "value",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/TextInput.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        }
      }
    },
    "GoTo.Label": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/GoTo/GoTo.tsx",
      "description": "",
      "displayName": "GoTo.Label",
      "methods": [],
      "props": {
        "model": {
          "defaultValue": null,
          "description": "",
          "name": "model",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Label.tsx",
            "name": "GoToLabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Label.tsx",
              "name": "GoToLabelProps"
            }
          ],
          "required": true,
          "type": {
            "name": "PaginationModel"
          }
        },
        "children": {
          "defaultValue": null,
          "description": "Accepts child elements or a render prop.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Label.tsx",
            "name": "GoToLabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Label.tsx",
              "name": "GoToLabelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((model: PaginationModel) => ReactNode)",
            "value": [
              {
                "value": "(model: PaginationModel) => ReactNode",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "GoToLabel": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Label.tsx",
      "description": "",
      "displayName": "GoToLabel",
      "methods": [],
      "props": {
        "model": {
          "defaultValue": null,
          "description": "",
          "name": "model",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Label.tsx",
            "name": "GoToLabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Label.tsx",
              "name": "GoToLabelProps"
            }
          ],
          "required": true,
          "type": {
            "name": "PaginationModel"
          }
        },
        "children": {
          "defaultValue": null,
          "description": "Accepts child elements or a render prop.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Label.tsx",
            "name": "GoToLabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Label.tsx",
              "name": "GoToLabelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((model: PaginationModel) => ReactNode)",
            "value": [
              {
                "value": "(model: PaginationModel) => ReactNode",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "GoToTextInput": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/GoTo/TextInput.tsx",
      "description": "",
      "displayName": "GoToTextInput",
      "methods": [],
      "props": {
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the TextInput (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
            "name": "TextInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
              "name": "TextInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "width": {
          "defaultValue": null,
          "description": "The width of the TextInput.",
          "name": "width",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
            "name": "TextInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
              "name": "TextInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "aria-label": {
          "defaultValue": null,
          "description": "",
          "name": "aria-label",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/TextInput.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "value": {
          "defaultValue": {
            "value": ""
          },
          "description": "",
          "name": "value",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/TextInput.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        }
      }
    },
    "Pagination": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
      "description": "",
      "displayName": "Pagination",
      "methods": [],
      "props": {
        "aria-label": {
          "defaultValue": null,
          "description": "",
          "name": "aria-label",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Nav.tsx",
            "name": "PaginationNavProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Nav.tsx",
              "name": "PaginationNavProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "lastPage": {
          "defaultValue": null,
          "description": "",
          "name": "lastPage",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
              "name": "TypeLiteral"
            },
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "firstPage": {
          "defaultValue": null,
          "description": "",
          "name": "firstPage",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
              "name": "TypeLiteral"
            },
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "initialCurrentPage": {
          "defaultValue": null,
          "description": "",
          "name": "initialCurrentPage",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
              "name": "TypeLiteral"
            },
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "rangeSize": {
          "defaultValue": null,
          "description": "",
          "name": "rangeSize",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
              "name": "TypeLiteral"
            },
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
              "name": "TypeLiteral"
            },
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "PaginationModel",
            "value": [
              {
                "value": "PaginationModel",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onPageChange": {
          "defaultValue": null,
          "description": "",
          "name": "onPageChange",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
              "name": "TypeLiteral"
            },
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((pageNumber: number) => void)",
            "value": [
              {
                "value": "(pageNumber: number) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "Pagination.Controls": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
      "description": "",
      "displayName": "Pagination.Controls",
      "methods": [],
      "props": {}
    },
    "Pagination.JumpToFirstButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
      "description": "",
      "displayName": "Pagination.JumpToFirstButton",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the TertiaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are three button sizes: `extraSmall`, `small`, and `medium`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "Pagination.StepToPreviousButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
      "description": "",
      "displayName": "Pagination.StepToPreviousButton",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the TertiaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are three button sizes: `extraSmall`, `small`, and `medium`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "Pagination.StepToNextButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
      "description": "",
      "displayName": "Pagination.StepToNextButton",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the TertiaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are three button sizes: `extraSmall`, `small`, and `medium`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "Pagination.JumpToLastButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
      "description": "",
      "displayName": "Pagination.JumpToLastButton",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the TertiaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are three button sizes: `extraSmall`, `small`, and `medium`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "Pagination.PageList": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
      "description": "",
      "displayName": "Pagination.PageList",
      "methods": [],
      "props": {
        "flexDirection": {
          "defaultValue": {
            "value": "\"row\""
          },
          "description": "sets the direction for the stack",
          "name": "flexDirection",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
            "name": "HStackProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
              "name": "HStackProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"row\" | \"row-reverse\"",
            "value": [
              {
                "value": "\"row\""
              },
              {
                "value": "\"row-reverse\""
              }
            ]
          }
        }
      }
    },
    "Pagination.PageListItem": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
      "description": "",
      "displayName": "Pagination.PageListItem",
      "methods": [],
      "props": {}
    },
    "Pagination.PageButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
      "description": "",
      "displayName": "Pagination.PageButton",
      "methods": [],
      "props": {
        "pageNumber": {
          "defaultValue": null,
          "description": "",
          "name": "pageNumber",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/PageButton.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": true,
          "type": {
            "name": "number"
          }
        }
      }
    },
    "Pagination.AdditionalDetails": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
      "description": "",
      "displayName": "Pagination.AdditionalDetails",
      "methods": [],
      "props": {
        "shouldAnnounceToScreenReader": {
          "defaultValue": null,
          "description": "",
          "name": "shouldAnnounceToScreenReader",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/AdditionalDetails.tsx",
            "name": "AdditionalDetailsProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/AdditionalDetails.tsx",
              "name": "AdditionalDetailsProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "shouldHideDetails": {
          "defaultValue": null,
          "description": "",
          "name": "shouldHideDetails",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/AdditionalDetails.tsx",
            "name": "AdditionalDetailsProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/AdditionalDetails.tsx",
              "name": "AdditionalDetailsProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "Pagination.GoToForm": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
      "description": "",
      "displayName": "Pagination.GoToForm",
      "methods": [],
      "props": {
        "flexDirection": {
          "defaultValue": {
            "value": "\"row\""
          },
          "description": "sets the direction for the stack",
          "name": "flexDirection",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
            "name": "HStackProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
              "name": "HStackProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"row\" | \"row-reverse\"",
            "value": [
              {
                "value": "\"row\""
              },
              {
                "value": "\"row-reverse\""
              }
            ]
          }
        },
        "spacing": {
          "defaultValue": null,
          "description": "",
          "name": "spacing",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Form.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number | (string & {}) | keyof CanvasSpace",
            "value": [
              {
                "value": "number"
              },
              {
                "value": "\"s\""
              },
              {
                "value": "string & {}"
              },
              {
                "value": "\"zero\""
              },
              {
                "value": "\"m\""
              },
              {
                "value": "\"l\""
              },
              {
                "value": "\"xxxs\""
              },
              {
                "value": "\"xxs\""
              },
              {
                "value": "\"xs\""
              },
              {
                "value": "\"xl\""
              },
              {
                "value": "\"xxl\""
              },
              {
                "value": "\"xxxl\""
              }
            ]
          }
        }
      }
    },
    "Pagination.GoToTextInput": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
      "description": "",
      "displayName": "Pagination.GoToTextInput",
      "methods": [],
      "props": {
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the TextInput (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
            "name": "TextInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
              "name": "TextInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "width": {
          "defaultValue": null,
          "description": "The width of the TextInput.",
          "name": "width",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
            "name": "TextInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
              "name": "TextInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "aria-label": {
          "defaultValue": null,
          "description": "",
          "name": "aria-label",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/TextInput.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "value": {
          "defaultValue": null,
          "description": "",
          "name": "value",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/TextInput.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        }
      }
    },
    "Pagination.GoToLabel": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Pagination.tsx",
      "description": "",
      "displayName": "Pagination.GoToLabel",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "Accepts child elements or a render prop.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Label.tsx",
            "name": "GoToLabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/GoTo/Label.tsx",
              "name": "GoToLabelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((model: PaginationModel) => ReactNode)",
            "value": [
              {
                "value": "(model: PaginationModel) => ReactNode",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "usePaginationModel": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/index.tsx",
      "description": "",
      "displayName": "usePaginationModel",
      "methods": [],
      "props": {
        "lastPage": {
          "defaultValue": null,
          "description": "The page number for the last page (it can also be used as a total page\ncount)",
          "name": "lastPage",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/usePaginationModel.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": true,
          "type": {
            "name": "number"
          }
        },
        "firstPage": {
          "defaultValue": {
            "value": 1
          },
          "description": "The page number for the first page",
          "name": "firstPage",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/usePaginationModel.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "initialCurrentPage": {
          "defaultValue": {
            "value": 1
          },
          "description": "The initial current page",
          "name": "initialCurrentPage",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/usePaginationModel.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "onPageChange": {
          "defaultValue": null,
          "description": "The function called when the page changes",
          "name": "onPageChange",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/usePaginationModel.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((pageNumber: number) => void)",
            "value": [
              {
                "value": "(pageNumber: number) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "rangeSize": {
          "defaultValue": {
            "value": 5
          },
          "description": "The size of the pagination range",
          "name": "rangeSize",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/usePaginationModel.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        }
      }
    },
    "getLastPage": {
      "tags": {
        "param": "resultCount number of results per page\ntotalCount total number of results",
        "example": "const lastPage = getLastPage(10, 120); //=> 12"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/index.tsx",
      "description": "Returns the last page for the total results",
      "displayName": "getLastPage",
      "methods": [],
      "props": {}
    },
    "getRangeMin": {
      "tags": {
        "param": "range the range of numbers for the pagination component",
        "example": "const rangeMin = getRangeMin([1,2,3,4,5]) //=> 1"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/index.tsx",
      "description": "Returns the first number in the pagination range",
      "displayName": "getRangeMin",
      "methods": [],
      "props": {}
    },
    "getRangeMax": {
      "tags": {
        "param": "range the range of numbers for the pagination component",
        "example": "const rangeMax = getRangeMax([1,2,3,4,5]) //=> 5"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/index.tsx",
      "description": "Returns the last number in the pagination range",
      "displayName": "getRangeMax",
      "methods": [],
      "props": {}
    },
    "getVisibleResultsMin": {
      "tags": {
        "param": "currentPage current page for the range\nresultCount number of results per page",
        "example": "const pageMin = getVisibleResultsMin(5, 10); //=> 41"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/index.tsx",
      "description": "Returns the first page number for the visible results",
      "displayName": "getVisibleResultsMin",
      "methods": [],
      "props": {}
    },
    "getVisibleResultsMax": {
      "tags": {
        "param": "currentPage current page for the range\nresultCount number of results per page\ntotalCount total number of results",
        "example": "const pageMax = getVisiblePageMax(5,10,100); //=> 50"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/index.tsx",
      "description": "Returns the last page number for the visible results",
      "displayName": "getVisibleResultsMax",
      "methods": [],
      "props": {}
    },
    "PaginationNav": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/Nav.tsx",
      "description": "",
      "displayName": "PaginationNav",
      "methods": [],
      "props": {
        "aria-label": {
          "defaultValue": null,
          "description": "",
          "name": "aria-label",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Nav.tsx",
            "name": "PaginationNavProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/Nav.tsx",
              "name": "PaginationNavProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        }
      }
    },
    "PageButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/PageButton.tsx",
      "description": "",
      "displayName": "PageButton",
      "methods": [],
      "props": {
        "model": {
          "defaultValue": null,
          "description": "",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/PageButton.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": true,
          "type": {
            "name": "PaginationModel"
          }
        },
        "pageNumber": {
          "defaultValue": null,
          "description": "",
          "name": "pageNumber",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/PageButton.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": true,
          "type": {
            "name": "number"
          }
        }
      }
    },
    "PageList": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/PageList.tsx",
      "description": "",
      "displayName": "PageList",
      "methods": [],
      "props": {
        "model": {
          "defaultValue": null,
          "description": "",
          "name": "model",
          "parent": {
            "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/PageList.tsx",
            "name": "PageListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/pagination/lib/Pagination/PageList.tsx",
              "name": "PageListProps"
            }
          ],
          "required": true,
          "type": {
            "name": "PaginationModel"
          }
        },
        "flexDirection": {
          "defaultValue": {
            "value": "\"row\""
          },
          "description": "sets the direction for the stack",
          "name": "flexDirection",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
            "name": "HStackProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
              "name": "HStackProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"row\" | \"row-reverse\"",
            "value": [
              {
                "value": "\"row\""
              },
              {
                "value": "\"row-reverse\""
              }
            ]
          }
        }
      }
    },
    "PageListItem": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/pagination/lib/Pagination/PageList.tsx",
      "description": "",
      "displayName": "PageListItem",
      "methods": [],
      "props": {}
    }
  },
  "@workday/canvas-kit-react/popup": {
    "Popper": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/popup/lib/Popper.tsx",
      "description": "",
      "displayName": "Popper",
      "methods": [],
      "props": {
        "anchorElement": {
          "defaultValue": null,
          "description": "The reference element used to position the Popper. Popper content will try to follow the\n`anchorElement` if it moves and will reposition itself if there is no longer room in the\nwindow.",
          "name": "anchorElement",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Element | RefObject<Element> | null",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "Element",
                "description": "Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
                "fullComment": "Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
                "tags": {}
              },
              {
                "value": "RefObject<Element>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "children": {
          "defaultValue": null,
          "description": "The content of the Popper. If a function is provided, it will be treated as a Render Prop and\npass the `placement` chosen by PopperJS. This `placement` value is useful if your popup needs\nto animate and that animation depends on the direction of the content in relation to the\n`anchorElement`.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode | ((props: { placement: Placement; }) => ReactNode)",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "(props: { placement: Placement; }) => ReactNode",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "getAnchorClientRect": {
          "defaultValue": null,
          "description": "When provided, this optional callback will be used to determine positioning for the Popper element\ninstead of calling `getBoundingClientRect` on the `anchorElement` prop. Use this when you need\ncomplete control over positioning. When this prop is specified, it is safe to pass `null` into the\n`anchorElement` prop. If `null` is passed into the `anchorElement` prop, an `owner` will not be\nprovided for the `PopupStack`.",
          "name": "getAnchorClientRect",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(() => DOMRect)",
            "value": [
              {
                "value": "() => DOMRect",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "open": {
          "defaultValue": {
            "value": true
          },
          "description": "Determines if `Popper` content should be rendered. The content only exists in the DOM when\n`open` is `true`",
          "name": "open",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "placement": {
          "defaultValue": {
            "value": "bottom"
          },
          "description": "The placement of the `Popper` contents relative to the `anchorElement`. Accepts `auto`, `top`,\n`right`, `bottom`, or `left`. Each placement can also be modified using any of the following\nvariations: `-start` or `-end`.",
          "name": "placement",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Placement",
            "value": [
              {
                "value": "\"auto\""
              },
              {
                "value": "\"auto-start\""
              },
              {
                "value": "\"auto-end\""
              },
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"right\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"top-start\""
              },
              {
                "value": "\"top-end\""
              },
              {
                "value": "\"bottom-start\""
              },
              {
                "value": "\"bottom-end\""
              },
              {
                "value": "\"right-start\""
              },
              {
                "value": "\"right-end\""
              },
              {
                "value": "\"left-start\""
              },
              {
                "value": "\"left-end\""
              }
            ]
          }
        },
        "onPlacementChange": {
          "defaultValue": null,
          "description": "A callback function that will be called whenever PopperJS chooses a placement that is different\nfrom the provided `placement` preference. If a `placement` preference doesn't fit, PopperJS\nwill choose a new one and call this callback.",
          "name": "onPlacementChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((placement: Placement) => void)",
            "value": [
              {
                "value": "(placement: Placement) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "popperOptions": {
          "defaultValue": {
            "value": "{}"
          },
          "description": "The additional options passed to the Popper's `popper.js` instance.",
          "name": "popperOptions",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Partial<Options>",
            "value": [
              {
                "value": "Partial<Options>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "portal": {
          "defaultValue": {
            "value": true
          },
          "description": "If false, render the Popper within the\nDOM hierarchy of its parent. A non-portal Popper will constrained by the parent container\noverflows. If you set this to `false`, you may experience issues where you content gets cut off\nby scrollbars or `overflow: hidden`",
          "name": "portal",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "popperInstanceRef": {
          "defaultValue": null,
          "description": "Reference to the PopperJS instance. Useful for making direct method calls on the popper\ninstance like `update`.",
          "name": "popperInstanceRef",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Ref<Instance>",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "(instance: Instance | null) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "RefObject<Instance>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "Popup": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/popup/lib/Popup.tsx",
      "description": "",
      "displayName": "Popup",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The contents of the Popup. Can be `Popup` children or any valid elements.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popup.tsx",
            "name": "PopupProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popup.tsx",
              "name": "PopupProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "returnFocusRef": {
          "defaultValue": null,
          "description": "Optional reference to an element that should receive focus when a popup is hidden. If left\nblank, focus will return to the `targetRef`",
          "name": "returnFocusRef",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RefObject<any>",
            "value": [
              {
                "value": "RefObject<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "initialFocusRef": {
          "defaultValue": null,
          "description": "Optional reference to an element that should receive focus when a popup is shown. If left blank,\nfocus will be moved to the first focusable element inside the popup.",
          "name": "initialFocusRef",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RefObject<any>",
            "value": [
              {
                "value": "RefObject<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "id": {
          "defaultValue": null,
          "description": "ID reference of the list. Children ids can be derived from this id",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "initialVisibility": {
          "defaultValue": {
            "value": "'hidden'"
          },
          "description": "The initial visibility of the disclosed content",
          "name": "initialVisibility",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Visibility",
            "value": [
              {
                "value": "\"hidden\""
              },
              {
                "value": "\"visible\""
              }
            ]
          }
        },
        "onUpdatePlacement": {
          "defaultValue": null,
          "description": "Called whenever a popup placement changes around a target. This is useful for animations that\ndepend on the placement chosen.",
          "name": "onUpdatePlacement",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { placement: Placement; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void)",
            "value": [
              {
                "value": "(data: { placement: Placement; }, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onShow": {
          "defaultValue": null,
          "description": "Start showing the disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "onShow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onHide": {
          "defaultValue": null,
          "description": "Start hiding this disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "onHide",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, prevState: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUpdatePlacement": {
          "defaultValue": null,
          "description": "Called whenever a popup placement changes around a target. This is useful for animations that\ndepend on the placement chosen.",
          "name": "shouldUpdatePlacement",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { placement: Placement; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean)",
            "value": [
              {
                "value": "(data: { placement: Placement; }, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldShow": {
          "defaultValue": null,
          "description": "Start showing the disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "shouldShow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldHide": {
          "defaultValue": null,
          "description": "Start hiding this disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "shouldHide",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<...>; ... 4 more ...; visibility: \"hidden\" | \"visible\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "PopupBody": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/popup/lib/PopupBody.tsx",
      "description": "",
      "displayName": "PopupBody",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "PopupCard": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/popup/lib/PopupCard.tsx",
      "description": "",
      "displayName": "PopupCard",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "Children of the Card. Should contain a `<Card.Body>` and an optional `<Card.Heading>`",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/PopupCard.tsx",
            "name": "PopupCardProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/PopupCard.tsx",
              "name": "PopupCardProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "PopupCloseButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/popup/lib/PopupCloseButton.tsx",
      "description": "",
      "displayName": "PopupCloseButton",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "PopupCloseIcon": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/popup/lib/PopupCloseIcon.tsx",
      "description": "",
      "displayName": "PopupCloseIcon",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the TertiaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are three button sizes: `extraSmall`, `small`, and `medium`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "PopupHeading": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/popup/lib/PopupHeading.tsx",
      "description": "",
      "displayName": "PopupHeading",
      "methods": [],
      "props": {
        "id": {
          "defaultValue": null,
          "description": "The id of the Card heading. Tie this to an `aria-labelledby` for accessibility.",
          "name": "id",
          "parent": {
            "fileName": "canvas-kit/modules/react/card/lib/CardHeading.tsx",
            "name": "CardHeadingProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/card/lib/CardHeading.tsx",
              "name": "CardHeadingProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "PopupPopper": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/popup/lib/PopupPopper.tsx",
      "description": "",
      "displayName": "PopupPopper",
      "methods": [],
      "props": {
        "placement": {
          "defaultValue": {
            "value": "bottom"
          },
          "description": "The placement of the `Popper` contents relative to the `anchorElement`. Accepts `auto`, `top`,\n`right`, `bottom`, or `left`. Each placement can also be modified using any of the following\nvariations: `-start` or `-end`.",
          "name": "placement",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/PopupPopper.tsx",
            "name": "PopupPopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/PopupPopper.tsx",
              "name": "PopupPopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Placement",
            "value": [
              {
                "value": "\"auto\""
              },
              {
                "value": "\"auto-start\""
              },
              {
                "value": "\"auto-end\""
              },
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"right\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"top-start\""
              },
              {
                "value": "\"top-end\""
              },
              {
                "value": "\"bottom-start\""
              },
              {
                "value": "\"bottom-end\""
              },
              {
                "value": "\"right-start\""
              },
              {
                "value": "\"right-end\""
              },
              {
                "value": "\"left-start\""
              },
              {
                "value": "\"left-end\""
              }
            ]
          }
        },
        "popperOptions": {
          "defaultValue": null,
          "description": "The additional options passed to the Popper's `popper.js` instance.",
          "name": "popperOptions",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/PopupPopper.tsx",
            "name": "PopupPopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/PopupPopper.tsx",
              "name": "PopupPopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Partial<Options>",
            "value": [
              {
                "value": "Partial<Options>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "anchorElement": {
          "defaultValue": null,
          "description": "The reference element used to position the Popper. Popper content will try to follow the\n`anchorElement` if it moves and will reposition itself if there is no longer room in the\nwindow.",
          "name": "anchorElement",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Element | RefObject<Element> | null",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "Element",
                "description": "Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
                "fullComment": "Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
                "tags": {}
              },
              {
                "value": "RefObject<Element>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "children": {
          "defaultValue": null,
          "description": "The content of the Popper. If a function is provided, it will be treated as a Render Prop and\npass the `placement` chosen by PopperJS. This `placement` value is useful if your popup needs\nto animate and that animation depends on the direction of the content in relation to the\n`anchorElement`.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode | ((props: { placement: Placement; }) => ReactNode)",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "(props: { placement: Placement; }) => ReactNode",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "getAnchorClientRect": {
          "defaultValue": null,
          "description": "When provided, this optional callback will be used to determine positioning for the Popper element\ninstead of calling `getBoundingClientRect` on the `anchorElement` prop. Use this when you need\ncomplete control over positioning. When this prop is specified, it is safe to pass `null` into the\n`anchorElement` prop. If `null` is passed into the `anchorElement` prop, an `owner` will not be\nprovided for the `PopupStack`.",
          "name": "getAnchorClientRect",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(() => DOMRect)",
            "value": [
              {
                "value": "() => DOMRect",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "open": {
          "defaultValue": {
            "value": "true"
          },
          "description": "Determines if `Popper` content should be rendered. The content only exists in the DOM when\n`open` is `true`",
          "name": "open",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "onPlacementChange": {
          "defaultValue": null,
          "description": "A callback function that will be called whenever PopperJS chooses a placement that is different\nfrom the provided `placement` preference. If a `placement` preference doesn't fit, PopperJS\nwill choose a new one and call this callback.",
          "name": "onPlacementChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((placement: Placement) => void)",
            "value": [
              {
                "value": "(placement: Placement) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "portal": {
          "defaultValue": {
            "value": "true"
          },
          "description": "If false, render the Popper within the\nDOM hierarchy of its parent. A non-portal Popper will constrained by the parent container\noverflows. If you set this to `false`, you may experience issues where you content gets cut off\nby scrollbars or `overflow: hidden`",
          "name": "portal",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "popperInstanceRef": {
          "defaultValue": null,
          "description": "Reference to the PopperJS instance. Useful for making direct method calls on the popper\ninstance like `update`.",
          "name": "popperInstanceRef",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Ref<Instance>",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "(instance: Instance | null) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "RefObject<Instance>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "PopupTarget": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/popup/lib/PopupTarget.tsx",
      "description": "",
      "displayName": "PopupTarget",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/radio": {
    "Radio": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/radio/lib/Radio.tsx",
      "description": "",
      "displayName": "Radio",
      "methods": [],
      "props": {
        "checked": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the Radio button to the checked state.",
          "name": "checked",
          "parent": {
            "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
            "name": "RadioProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
              "name": "RadioProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "disabled": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the Radio button to the disabled state.",
          "name": "disabled",
          "parent": {
            "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
            "name": "RadioProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
              "name": "RadioProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "id": {
          "defaultValue": {
            "value": "A uniquely generated id"
          },
          "description": "The HTML `id` of the underlying radio input element. This is required if `label` is defined as a non-empty string.",
          "name": "id",
          "parent": {
            "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
            "name": "RadioProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
              "name": "RadioProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "label": {
          "defaultValue": {
            "value": "''"
          },
          "description": "The text of the Radio button label.",
          "name": "label",
          "parent": {
            "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
            "name": "RadioProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
              "name": "RadioProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "name": {
          "defaultValue": null,
          "description": "The name of the Radio button.",
          "name": "name",
          "parent": {
            "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
            "name": "RadioProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
              "name": "RadioProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "onChange": {
          "defaultValue": null,
          "description": "The function called when the Radio button state changes.",
          "name": "onChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
            "name": "RadioProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
              "name": "RadioProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((e: ChangeEvent<HTMLInputElement>) => void)",
            "value": [
              {
                "value": "(e: ChangeEvent<HTMLInputElement>) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "value": {
          "defaultValue": null,
          "description": "The value of the Radio button.",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
            "name": "RadioProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
              "name": "RadioProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "variant": {
          "defaultValue": null,
          "description": "",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
            "name": "RadioProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/radio/lib/Radio.tsx",
              "name": "RadioProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "RadioGroup": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/radio/lib/RadioGroup.tsx",
      "description": "",
      "displayName": "RadioGroup",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The Radio button children of the RadioGroup (must be at least two).",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/radio/lib/RadioGroup.tsx",
            "name": "RadioGroupProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/radio/lib/RadioGroup.tsx",
              "name": "RadioGroupProps"
            }
          ],
          "required": true,
          "type": {
            "name": "ReactElement<RadioProps, string | JSXElementConstructor<any>>[]"
          }
        },
        "value": {
          "defaultValue": {
            "value": "0"
          },
          "description": "The selected value of the RadioGroup. If a string is provided, the Radio button with the corresponding value will be selected. If a number is provided, the Radio button with the corresponding index will be selected.",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/react/radio/lib/RadioGroup.tsx",
            "name": "RadioGroupProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/radio/lib/RadioGroup.tsx",
              "name": "RadioGroupProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "name": {
          "defaultValue": null,
          "description": "The common `name` passed to all Radio button children of the RadioGroup. This enables you to avoid specifying the `name` for each child.",
          "name": "name",
          "parent": {
            "fileName": "canvas-kit/modules/react/radio/lib/RadioGroup.tsx",
            "name": "RadioGroupProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/radio/lib/RadioGroup.tsx",
              "name": "RadioGroupProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the RadioGroup (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/react/radio/lib/RadioGroup.tsx",
            "name": "RadioGroupProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/radio/lib/RadioGroup.tsx",
              "name": "RadioGroupProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onChange": {
          "defaultValue": null,
          "description": "The function called when the RadioGroup state changes. The value passed to the callback function will be the value of the selected Radio button if it has one; otherwise, the index of the selected Radio button will be passed in.",
          "name": "onChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/radio/lib/RadioGroup.tsx",
            "name": "RadioGroupProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/radio/lib/RadioGroup.tsx",
              "name": "RadioGroupProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((value: string | number) => void)",
            "value": [
              {
                "value": "(value: string | number) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/segmented-control": {
    "SegmentedControl": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/segmented-control/lib/SegmentedControl.tsx",
      "description": "",
      "displayName": "SegmentedControl",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The Button children of the SegmentedControl (must be at least two).\nTODO: Add support for text children",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/segmented-control/lib/SegmentedControl.tsx",
            "name": "SegmentedControlProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/segmented-control/lib/SegmentedControl.tsx",
              "name": "SegmentedControlProps"
            }
          ],
          "required": true,
          "type": {
            "name": "ReactElement<SegmentedControlButtonProps, string | JSXElementConstructor<any>>[]"
          }
        },
        "value": {
          "defaultValue": {
            "value": "0"
          },
          "description": "The value or index of the Button that the SegmentedControl should be toggled on to.\nIf a string is provided, the Button with the corresponding value will be selected.\nIf a number is provided, the Button with the corresponding index will be selected.",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/react/segmented-control/lib/SegmentedControl.tsx",
            "name": "SegmentedControlProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/segmented-control/lib/SegmentedControl.tsx",
              "name": "SegmentedControlProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "onChange": {
          "defaultValue": null,
          "description": "The function called when a button in the SegmentedControl is toggled.\nIf the selected button has a value, that value will be passed to the callback function;\notherwise, the index of the button will be passed.",
          "name": "onChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/segmented-control/lib/SegmentedControl.tsx",
            "name": "SegmentedControlProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/segmented-control/lib/SegmentedControl.tsx",
              "name": "SegmentedControlProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((value: string | number) => void)",
            "value": [
              {
                "value": "(value: string | number) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "SegmentedControlButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/segmented-control/lib/SegmentedControlButton.tsx",
      "description": "",
      "displayName": "SegmentedControlButton",
      "methods": [],
      "props": {
        "toggled": {
          "defaultValue": null,
          "description": "",
          "name": "toggled",
          "parent": {
            "fileName": "canvas-kit/modules/react/segmented-control/lib/SegmentedControlButton.tsx",
            "name": "SegmentedControlButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/segmented-control/lib/SegmentedControlButton.tsx",
              "name": "SegmentedControlButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/segmented-control/lib/SegmentedControlButton.tsx",
            "name": "SegmentedControlButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/segmented-control/lib/SegmentedControlButton.tsx",
              "name": "SegmentedControlButtonProps"
            }
          ],
          "required": true,
          "type": {
            "name": "CanvasSystemIcon"
          }
        },
        "value": {
          "defaultValue": null,
          "description": "",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/react/segmented-control/lib/SegmentedControlButton.tsx",
            "name": "SegmentedControlButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/segmented-control/lib/SegmentedControlButton.tsx",
              "name": "SegmentedControlButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "size": {
          "defaultValue": null,
          "description": "There are four button sizes: `extraSmall`, `small`, `medium`, and `large`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/segmented-control/lib/SegmentedControlButton.tsx",
            "name": "SegmentedControlButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/segmented-control/lib/SegmentedControlButton.tsx",
              "name": "SegmentedControlButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"small\" | \"medium\" | \"large\"",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/select": {
    "Select": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/select/lib/Select.tsx",
      "description": "",
      "displayName": "Select",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The SelectOption children of the Select (must be at least two).",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/select/lib/Select.tsx",
            "name": "SelectProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/select/lib/Select.tsx",
              "name": "SelectProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactElement<SelectOption, string | JSXElementConstructor<any>> | ReactElement<SelectOption, string | JSXElementConstructor<any>>[]",
            "value": [
              {
                "value": "ReactElement<SelectOption, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactElement<SelectOption, string | JSXElementConstructor<any>>[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "disabled": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the Select to the disabled state.",
          "name": "disabled",
          "parent": {
            "fileName": "canvas-kit/modules/react/select/lib/Select.tsx",
            "name": "SelectProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/select/lib/Select.tsx",
              "name": "SelectProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the Select (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/react/select/lib/Select.tsx",
            "name": "SelectProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/select/lib/Select.tsx",
              "name": "SelectProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onChange": {
          "defaultValue": null,
          "description": "The function called when the Select state changes.",
          "name": "onChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/select/lib/Select.tsx",
            "name": "SelectProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/select/lib/Select.tsx",
              "name": "SelectProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((e: ChangeEvent<HTMLSelectElement>) => void)",
            "value": [
              {
                "value": "(e: ChangeEvent<HTMLSelectElement>) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "value": {
          "defaultValue": null,
          "description": "The value of the Select.",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/react/select/lib/Select.tsx",
            "name": "SelectProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/select/lib/Select.tsx",
              "name": "SelectProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "SelectOption": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/select/lib/SelectOption.tsx",
      "description": "",
      "displayName": "SelectOption",
      "methods": [],
      "props": {
        "value": {
          "defaultValue": null,
          "description": "The value of the SelectOption.",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/react/select/lib/SelectOption.tsx",
            "name": "SelectOptionProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/select/lib/SelectOption.tsx",
              "name": "SelectOptionProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "label": {
          "defaultValue": null,
          "description": "The text of the SelectOption label.",
          "name": "label",
          "parent": {
            "fileName": "canvas-kit/modules/react/select/lib/SelectOption.tsx",
            "name": "SelectOptionProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/select/lib/SelectOption.tsx",
              "name": "SelectOptionProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "disabled": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the SelectOption to the disabled state.",
          "name": "disabled",
          "parent": {
            "fileName": "canvas-kit/modules/react/select/lib/SelectOption.tsx",
            "name": "SelectOptionProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/select/lib/SelectOption.tsx",
              "name": "SelectOptionProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/side-panel": {
    "SidePanel": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
      "description": "",
      "displayName": "SidePanel",
      "methods": [],
      "props": {
        "open": {
          "defaultValue": {
            "value": "false;"
          },
          "description": "If true, set the SidePanel to the open state.",
          "name": "open",
          "parent": {
            "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "onToggleClick": {
          "defaultValue": null,
          "description": "The function called when the toggle button is clicked. The toggle button is only shown if this prop is defined.",
          "name": "onToggleClick",
          "parent": {
            "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(() => void)",
            "value": [
              {
                "value": "() => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "header": {
          "defaultValue": null,
          "description": "The text or element to display as the SidePanel header.",
          "name": "header",
          "parent": {
            "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "openDirection": {
          "defaultValue": {
            "value": "SidePanelOpenDirection.Left"
          },
          "description": "The side from which the SidePanel opens. Accepts `Left` or `Right`.",
          "name": "openDirection",
          "parent": {
            "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SidePanelOpenDirection",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onBreakpointChange": {
          "defaultValue": null,
          "description": "The function called when the window width changes and reaches a width equivalent to `breakpoint`. For example, if the window is resized from a width of `1000px`, this will be called when the window reaches a width equivalent to `breakpoint`. The `aboveBreakpoint` argument passed to the callback function indicates whether the current window width is above or below `breakpoint` so you can control `open` based on the change.",
          "name": "onBreakpointChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((aboveBreakpoint: boolean) => void)",
            "value": [
              {
                "value": "(aboveBreakpoint: boolean) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "padding": {
          "defaultValue": null,
          "description": "The padding of the SidePanel when it's open.",
          "name": "padding",
          "parent": {
            "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSpaceValues",
            "value": [
              {
                "value": "\"16px\""
              },
              {
                "value": "\"0px\""
              },
              {
                "value": "\"24px\""
              },
              {
                "value": "\"32px\""
              },
              {
                "value": "\"4px\""
              },
              {
                "value": "\"8px\""
              },
              {
                "value": "\"12px\""
              },
              {
                "value": "\"40px\""
              },
              {
                "value": "\"64px\""
              },
              {
                "value": "\"80px\""
              }
            ]
          }
        },
        "breakpoint": {
          "defaultValue": {
            "value": "768px"
          },
          "description": "The window width at which the SidePanel triggers `onBreakPointChange`.",
          "name": "breakpoint",
          "parent": {
            "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "openWidth": {
          "defaultValue": {
            "value": "300px"
          },
          "description": "The width of the SidePanel when it's open.",
          "name": "openWidth",
          "parent": {
            "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "backgroundColor": {
          "defaultValue": {
            "value": "SidePanelBackgroundColor.White"
          },
          "description": "The background color of the SidePanel when it's open.",
          "name": "backgroundColor",
          "parent": {
            "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SidePanelBackgroundColor",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "2",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "closeNavigationAriaLabel": {
          "defaultValue": {
            "value": "'close navigation'"
          },
          "description": "The `aria-label` that describes closing the navigation.",
          "name": "closeNavigationAriaLabel",
          "parent": {
            "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "openNavigationAriaLabel": {
          "defaultValue": {
            "value": "'open navigation'"
          },
          "description": "The `aria-label` that describes opening the navigation.",
          "name": "openNavigationAriaLabel",
          "parent": {
            "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/skeleton": {
    "SkeletonHeader": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/skeleton/lib/parts/skeletonHeader.tsx",
      "description": "",
      "displayName": "SkeletonHeader",
      "methods": [],
      "props": {
        "backgroundColor": {
          "defaultValue": {
            "value": "soap200"
          },
          "description": "The background color of the skeleton",
          "name": "backgroundColor",
          "parent": {
            "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonHeader.tsx",
            "name": "SkeletonHeaderProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonHeader.tsx",
              "name": "SkeletonHeaderProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "height": {
          "defaultValue": {
            "value": "28px"
          },
          "description": "The height of the shape in `px` or `%`.",
          "name": "height",
          "parent": {
            "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonHeader.tsx",
            "name": "SkeletonHeaderProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonHeader.tsx",
              "name": "SkeletonHeaderProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "width": {
          "defaultValue": {
            "value": "100%"
          },
          "description": "The width of the shape in `px` or `%`.",
          "name": "width",
          "parent": {
            "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonHeader.tsx",
            "name": "SkeletonHeaderProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonHeader.tsx",
              "name": "SkeletonHeaderProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "SkeletonShape": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/skeleton/lib/parts/skeletonShape.tsx",
      "description": "",
      "displayName": "SkeletonShape",
      "methods": [],
      "props": {
        "width": {
          "defaultValue": {
            "value": "100%"
          },
          "description": "The width of the shape in `px` or `%`.",
          "name": "width",
          "parent": {
            "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonShape.tsx",
            "name": "SkeletonShapeProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonShape.tsx",
              "name": "SkeletonShapeProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "height": {
          "defaultValue": {
            "value": "100%"
          },
          "description": "The height of the shape in `px` or `%`.",
          "name": "height",
          "parent": {
            "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonShape.tsx",
            "name": "SkeletonShapeProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonShape.tsx",
              "name": "SkeletonShapeProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "borderRadius": {
          "defaultValue": {
            "value": "0"
          },
          "description": "The borderRadius of the shape in `px` or `%`.",
          "name": "borderRadius",
          "parent": {
            "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonShape.tsx",
            "name": "SkeletonShapeProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonShape.tsx",
              "name": "SkeletonShapeProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "backgroundColor": {
          "defaultValue": {
            "value": "soap200"
          },
          "description": "The background color of the skeleton",
          "name": "backgroundColor",
          "parent": {
            "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonShape.tsx",
            "name": "SkeletonShapeProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonShape.tsx",
              "name": "SkeletonShapeProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "SkeletonText": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/skeleton/lib/parts/skeletonText.tsx",
      "description": "",
      "displayName": "SkeletonText",
      "methods": [],
      "props": {
        "lineCount": {
          "defaultValue": {
            "value": "2"
          },
          "description": "The number of \"lines\" that SkeletonText will display. If there is more than one line, the last line will have a width of `60%`.",
          "name": "lineCount",
          "parent": {
            "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonText.tsx",
            "name": "SkeletonTextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonText.tsx",
              "name": "SkeletonTextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "backgroundColor": {
          "defaultValue": {
            "value": "soap200"
          },
          "description": "The background color of the skeleton",
          "name": "backgroundColor",
          "parent": {
            "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonText.tsx",
            "name": "SkeletonTextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/skeleton/lib/parts/skeletonText.tsx",
              "name": "SkeletonTextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "Skeleton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/skeleton/lib/skeleton.tsx",
      "description": "",
      "displayName": "Skeleton",
      "methods": [],
      "props": {
        "aria-label": {
          "defaultValue": {
            "value": "'Loading'"
          },
          "description": "For accessibility reasons, `aria-label` is transformed into a text representation\n(visually hidden, but announced by screen readers) of the loader.\n\nIMPORTANT: Since we take over the use of `aria-label` here, the attribute\ndoes not get applied to the container element. We anticipate that this will change\nin a future major version.",
          "name": "aria-label",
          "parent": {
            "fileName": "canvas-kit/modules/react/skeleton/lib/skeleton.tsx",
            "name": "SkeletonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/skeleton/lib/skeleton.tsx",
              "name": "SkeletonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/status-indicator": {
    "StatusIndicator": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/status-indicator/lib/StatusIndicator.tsx",
      "description": "",
      "displayName": "StatusIndicator",
      "methods": [],
      "props": {
        "type": {
          "defaultValue": null,
          "description": "The type of the StatusIndicator. Accepts `Gray`, `Orange`, `Blue`, `Green`, `Red`, or `Transparent`.",
          "name": "type",
          "parent": {
            "fileName": "canvas-kit/modules/react/status-indicator/lib/StatusIndicator.tsx",
            "name": "StatusIndicatorProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/status-indicator/lib/StatusIndicator.tsx",
              "name": "StatusIndicatorProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "StatusIndicatorType",
            "value": [
              {
                "value": "\"gray\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"orange\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"blue\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"green\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"red\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"transparent\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "emphasis": {
          "defaultValue": {
            "value": "StatusIndicatorEmphasis.High"
          },
          "description": "The emphasis of the StatusIndicator. Accepts `High` or `Low`.",
          "name": "emphasis",
          "parent": {
            "fileName": "canvas-kit/modules/react/status-indicator/lib/StatusIndicator.tsx",
            "name": "StatusIndicatorProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/status-indicator/lib/StatusIndicator.tsx",
              "name": "StatusIndicatorProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "StatusIndicatorEmphasis",
            "value": [
              {
                "value": "\"high\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"low\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "maxWidth": {
          "defaultValue": {
            "value": "200"
          },
          "description": "The maxWidth of the container before it truncates",
          "name": "maxWidth",
          "parent": {
            "fileName": "canvas-kit/modules/react/status-indicator/lib/StatusIndicator.tsx",
            "name": "StatusIndicatorProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/status-indicator/lib/StatusIndicator.tsx",
              "name": "StatusIndicatorProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "label": {
          "defaultValue": null,
          "description": "The text of the StatusIndicator.",
          "name": "label",
          "parent": {
            "fileName": "canvas-kit/modules/react/status-indicator/lib/StatusIndicator.tsx",
            "name": "StatusIndicatorProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/status-indicator/lib/StatusIndicator.tsx",
              "name": "StatusIndicatorProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the StatusIndicator.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/status-indicator/lib/StatusIndicator.tsx",
            "name": "StatusIndicatorProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/status-indicator/lib/StatusIndicator.tsx",
              "name": "StatusIndicatorProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/switch": {
    "Switch": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/switch/lib/Switch.tsx",
      "description": "",
      "displayName": "Switch",
      "methods": [],
      "props": {
        "checked": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the Switch to the on state.",
          "name": "checked",
          "parent": {
            "fileName": "canvas-kit/modules/react/switch/lib/Switch.tsx",
            "name": "SwitchProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/switch/lib/Switch.tsx",
              "name": "SwitchProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "disabled": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the Switch to the disabled state.",
          "name": "disabled",
          "parent": {
            "fileName": "canvas-kit/modules/react/switch/lib/Switch.tsx",
            "name": "SwitchProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/switch/lib/Switch.tsx",
              "name": "SwitchProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "id": {
          "defaultValue": {
            "value": "A uniquely generated id"
          },
          "description": "The HTML `id` of the underlying checkbox input element.",
          "name": "id",
          "parent": {
            "fileName": "canvas-kit/modules/react/switch/lib/Switch.tsx",
            "name": "SwitchProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/switch/lib/Switch.tsx",
              "name": "SwitchProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "onChange": {
          "defaultValue": null,
          "description": "The function called when the Switch state changes.",
          "name": "onChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/switch/lib/Switch.tsx",
            "name": "SwitchProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/switch/lib/Switch.tsx",
              "name": "SwitchProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((e: ChangeEvent<HTMLInputElement>) => void)",
            "value": [
              {
                "value": "(e: ChangeEvent<HTMLInputElement>) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "value": {
          "defaultValue": null,
          "description": "The value of the Switch.",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/react/switch/lib/Switch.tsx",
            "name": "SwitchProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/switch/lib/Switch.tsx",
              "name": "SwitchProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the Switch (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/react/switch/lib/Switch.tsx",
            "name": "SwitchProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/switch/lib/Switch.tsx",
              "name": "SwitchProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/table": {
    "Table": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/table/lib/Table.tsx",
      "description": "",
      "displayName": "Table",
      "methods": [],
      "props": {}
    },
    "TableRow": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/table/lib/TableRow.tsx",
      "description": "",
      "displayName": "TableRow",
      "methods": [],
      "props": {
        "state": {
          "defaultValue": null,
          "description": "The state of the TableRow. Accepts `Error`, `Alert`, `InputError`, `InputAlert`, `Hover`, or `Selected`.",
          "name": "state",
          "parent": {
            "fileName": "canvas-kit/modules/react/table/lib/TableRow.tsx",
            "name": "TableRowProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/table/lib/TableRow.tsx",
              "name": "TableRowProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "TableRowState",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "2",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "3",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "4",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "5",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "header": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, render the TableRow with header elements.",
          "name": "header",
          "parent": {
            "fileName": "canvas-kit/modules/react/table/lib/TableRow.tsx",
            "name": "TableRowProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/table/lib/TableRow.tsx",
              "name": "TableRowProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/tabs": {
    "Tabs": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/tabs/lib/Tabs.tsx",
      "description": "",
      "displayName": "Tabs",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The contents of the Tabs. Can be `Tabs` children or any valid elements.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/tabs/lib/Tabs.tsx",
            "name": "TabsProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tabs/lib/Tabs.tsx",
              "name": "TabsProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "id": {
          "defaultValue": {
            "value": "useUniqueId()"
          },
          "description": "Optional id for the whole `Tabs` group. The `aria-controls` of the `Tab.Item` and `id` of the\n`Tab.Panel` will automatically derived from this id. If not provided, a unique id will be\ncreated.",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "initialTab": {
          "defaultValue": null,
          "description": "An initially selected tab. This value must match the `name` of the `Tab.Item` component. If\nnot provided, the first tab will be selected.",
          "name": "initialTab",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "orientation": {
          "defaultValue": {
            "value": "'horizontal'"
          },
          "description": "The default Tabs sub-components only handle rendering of tabs in a horizontal orientation, but\nthe sub-components could be replaced to handle vertical orientations.",
          "name": "orientation",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Orientation",
            "value": [
              {
                "value": "\"vertical\""
              },
              {
                "value": "\"horizontal\""
              }
            ]
          }
        },
        "menuConfig": {
          "defaultValue": null,
          "description": "",
          "name": "menuConfig",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(Partial<{ mode: \"single\" | \"multiple\"; returnFocusRef: RefObject<any>; initialFocusRef: RefObject<any> | undefined; id: string; initialVisibility: Visibility; ... 12 more ...; items: any[]; }> & { ...; } & { ...; }) | undefined",
            "value": [
              {
                "value": "Partial<{ mode: \"single\" | \"multiple\"; returnFocusRef: RefObject<any> | undefined; initialFocusRef: RefObject<any> | undefined; id: string; initialVisibility: Visibility; ... 12 more ...; items: any[]; }> & { ...; } & { ...; }"
              }
            ]
          }
        },
        "initialHiddenIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialHiddenIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "containerWidth": {
          "defaultValue": null,
          "description": "",
          "name": "containerWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "shouldCalculateOverflow": {
          "defaultValue": {
            "value": "true"
          },
          "description": "Determines if overflow should actually occur. For example, touch devices are better at\nside-scrolling than mouse devices. In these cases, it makes sense to disable overflowing.",
          "name": "shouldCalculateOverflow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "initialSelectedIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialSelectedIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SelectedIds",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"all\""
              }
            ]
          }
        },
        "initialUnselectedIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialUnselectedIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "selection": {
          "defaultValue": null,
          "description": "",
          "name": "selection",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SelectionManager",
            "value": [
              {
                "value": "SelectionManager",
                "description": "A SelectionManager is used",
                "fullComment": "A SelectionManager is used",
                "tags": {}
              }
            ]
          }
        },
        "initialCursorId": {
          "defaultValue": null,
          "description": "Initial cursor position. If not provided, the cursor will point to the first item in the list",
          "name": "initialCursorId",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "columnCount": {
          "defaultValue": {
            "value": "0"
          },
          "description": "If this is set it will cause a wrapping of a list that will turn it into a grid",
          "name": "columnCount",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "navigation": {
          "defaultValue": null,
          "description": "Controls the state changes when the user sends navigation events to the model. For example,\nwhen the user hits the \"right\" arrow, a behavior hook will determine directionality\n(left-to-right or right-to-left) and call the correct navigation method. In our example, a\nleft-to-right language would send a `getNext`. The navigation manager may return the next item\nin the list. Different managers can be created for slightly different use cases. The default\nnavigation manager will accept `orientation` and directionality to determine mapping.\n\nAn example override might be a tab list with an overflow menu that is meant to be transparent\nto screen reader users. This would require the overflow menu to accept both up/down keys as\nwell as left/right keys to give a more consistent experience to all users.",
          "name": "navigation",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "NavigationManager",
            "value": [
              {
                "value": "NavigationManager",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "getId": {
          "defaultValue": null,
          "description": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
          "name": "getId",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((item: any) => string)",
            "value": [
              {
                "value": "(item: any) => string",
                "description": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
                "fullComment": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
                "tags": {}
              }
            ]
          }
        },
        "getTextValue": {
          "defaultValue": null,
          "description": "",
          "name": "getTextValue",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((item: any) => string)",
            "value": [
              {
                "value": "(item: any) => string",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "nonInteractiveIds": {
          "defaultValue": null,
          "description": "Array of all ids which are currently disabled. This is used for navigation to skip over items\nwhich are not focusable.",
          "name": "nonInteractiveIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "defaultItemHeight": {
          "defaultValue": {
            "value": "50"
          },
          "description": "Best guess to the default item height for virtualization. Getting this number correct\navoids a rerender while the list is initializing.",
          "name": "defaultItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "shouldVirtualize": {
          "defaultValue": null,
          "description": "",
          "name": "shouldVirtualize",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "items": {
          "defaultValue": null,
          "description": "Optional array of items. If provided, use a render prop for list children instead of static\nchildren. If the shape of each item object does not have an `id` property or uses a different\nproperty to uniquely identify each item, a `getId` must also be supplied.",
          "name": "items",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/collection/lib/useBaseListModel.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "any[]",
            "value": [
              {
                "value": "any[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onRegisterPanel": {
          "defaultValue": null,
          "description": "This event registers panels with state.panels. Called when a panel is mounted.",
          "name": "onRegisterPanel",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnregisterPanel": {
          "defaultValue": null,
          "description": "This event unregisters panels with state.panels. Called when a panel is unmounted.",
          "name": "onUnregisterPanel",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSelect": {
          "defaultValue": null,
          "description": "",
          "name": "onSelect",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSetContainerWidth": {
          "defaultValue": null,
          "description": "",
          "name": "onSetContainerWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { width?: number; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => void) | undefined",
            "value": [
              {
                "value": "(data: { width?: number | undefined; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSetOverflowTargetWidth": {
          "defaultValue": null,
          "description": "",
          "name": "onSetOverflowTargetWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { width: number; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { width: number; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onAddItemWidth": {
          "defaultValue": null,
          "description": "",
          "name": "onAddItemWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; width: number; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; width: number; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onRemoveItemWidth": {
          "defaultValue": null,
          "description": "",
          "name": "onRemoveItemWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onAddHiddenKey": {
          "defaultValue": null,
          "description": "",
          "name": "onAddHiddenKey",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onRemoveHiddenKey": {
          "defaultValue": null,
          "description": "",
          "name": "onRemoveHiddenKey",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSelectAll": {
          "defaultValue": null,
          "description": "Select all items. This will set `selectedIds` to `'all'` and remove all `unselectedIds`.\nThis is especially useful for virtual lists where not all items are loaded in memory.",
          "name": "onSelectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnselectAll": {
          "defaultValue": null,
          "description": "Unselect all items.",
          "name": "onUnselectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onRegisterItem": {
          "defaultValue": null,
          "description": "Register an item to the list. Takes in an identifier, a React.Ref and an optional index. This\nshould be called on component mount",
          "name": "onRegisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoTo": {
          "defaultValue": null,
          "description": "Directly sets the cursor to the list item by its identifier.",
          "name": "onGoTo",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNext": {
          "defaultValue": null,
          "description": "Set the cursor to the \"next\" item in the list. This event delegates to the `getNext` method of\nthe navigation manager. For a list, the default navigation manager will wrap if cursor is\ncurrently on the last item. For a grid, the default navigation manager will stay on the last\nitem in a row.",
          "name": "onGoToNext",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPrevious": {
          "defaultValue": null,
          "description": "Set the cursor to the \"previous\" item in the list. If the beginning of the list is detected,\nit will wrap to the last item",
          "name": "onGoToPrevious",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPreviousRow": {
          "defaultValue": null,
          "description": "Previous item perpendicular to the orientation of a list, or the previous row in a grid. For\nexample, if a list is horizontal, the previous row would describe an up direction. This could\nbe ignored by the navigation manager, or return the same result as `previous()`. In a grid,\nthis would be the previous row (current position - column count).",
          "name": "onGoToPreviousRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNextRow": {
          "defaultValue": null,
          "description": "Next item perpendicular to the orientation of a list, or the next row in a grid. For example,\nif a list is horizontal, the next row would describe a down direction. This could be ignored by\nthe navigation manager, or return the same result as `next()`. In a grid, this would be the\nnext row (current position + column count).",
          "name": "onGoToNextRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToFirst": {
          "defaultValue": null,
          "description": "Set the cursor to the first item in the list",
          "name": "onGoToFirst",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToLast": {
          "defaultValue": null,
          "description": "Set the cursor to the last item in the list",
          "name": "onGoToLast",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToFirstOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToFirstOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToLastOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToLastOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNextPage": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToNextPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPreviousPage": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToPreviousPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnregisterItem": {
          "defaultValue": null,
          "description": "Unregister an item by its identifier. This should be called when the component is unmounted.\nThis event is only called for static rendering.",
          "name": "onUnregisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUpdateItemHeight": {
          "defaultValue": null,
          "description": "Updates the default item height. This should only be called when item height is measured.\nCalling this with a different default item height than previous will cause a virtual list to\nrecalculate the overall height of the list and invalidate any height caching. Doing this only\non the first item may save the user from experiencing odd scrolling behavior where the\nscrollbar updates while scrolling. If the user uses the mouse to drag the bar, it can become\n\"detached\" since the browser recalculates scroll bar position while the overflow container is\nupdated.",
          "name": "onUpdateItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { value: number; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { value: number; }, prevState: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldRegisterPanel": {
          "defaultValue": null,
          "description": "This event registers panels with state.panels. Called when a panel is mounted.",
          "name": "shouldRegisterPanel",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnregisterPanel": {
          "defaultValue": null,
          "description": "This event unregisters panels with state.panels. Called when a panel is unmounted.",
          "name": "shouldUnregisterPanel",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSelect": {
          "defaultValue": null,
          "description": "",
          "name": "shouldSelect",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSetContainerWidth": {
          "defaultValue": null,
          "description": "",
          "name": "shouldSetContainerWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { width?: number; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: { width?: number | undefined; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSetOverflowTargetWidth": {
          "defaultValue": null,
          "description": "",
          "name": "shouldSetOverflowTargetWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { width: number; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { width: number; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldAddItemWidth": {
          "defaultValue": null,
          "description": "",
          "name": "shouldAddItemWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; width: number; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; width: number; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldRemoveItemWidth": {
          "defaultValue": null,
          "description": "",
          "name": "shouldRemoveItemWidth",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldAddHiddenKey": {
          "defaultValue": null,
          "description": "",
          "name": "shouldAddHiddenKey",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldRemoveHiddenKey": {
          "defaultValue": null,
          "description": "",
          "name": "shouldRemoveHiddenKey",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSelectAll": {
          "defaultValue": null,
          "description": "Select all items. This will set `selectedIds` to `'all'` and remove all `unselectedIds`.\nThis is especially useful for virtual lists where not all items are loaded in memory.",
          "name": "shouldSelectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnselectAll": {
          "defaultValue": null,
          "description": "Unselect all items.",
          "name": "shouldUnselectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldRegisterItem": {
          "defaultValue": null,
          "description": "Register an item to the list. Takes in an identifier, a React.Ref and an optional index. This\nshould be called on component mount",
          "name": "shouldRegisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoTo": {
          "defaultValue": null,
          "description": "Directly sets the cursor to the list item by its identifier.",
          "name": "shouldGoTo",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNext": {
          "defaultValue": null,
          "description": "Set the cursor to the \"next\" item in the list. This event delegates to the `getNext` method of\nthe navigation manager. For a list, the default navigation manager will wrap if cursor is\ncurrently on the last item. For a grid, the default navigation manager will stay on the last\nitem in a row.",
          "name": "shouldGoToNext",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPrevious": {
          "defaultValue": null,
          "description": "Set the cursor to the \"previous\" item in the list. If the beginning of the list is detected,\nit will wrap to the last item",
          "name": "shouldGoToPrevious",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPreviousRow": {
          "defaultValue": null,
          "description": "Previous item perpendicular to the orientation of a list, or the previous row in a grid. For\nexample, if a list is horizontal, the previous row would describe an up direction. This could\nbe ignored by the navigation manager, or return the same result as `previous()`. In a grid,\nthis would be the previous row (current position - column count).",
          "name": "shouldGoToPreviousRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNextRow": {
          "defaultValue": null,
          "description": "Next item perpendicular to the orientation of a list, or the next row in a grid. For example,\nif a list is horizontal, the next row would describe a down direction. This could be ignored by\nthe navigation manager, or return the same result as `next()`. In a grid, this would be the\nnext row (current position + column count).",
          "name": "shouldGoToNextRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToFirst": {
          "defaultValue": null,
          "description": "Set the cursor to the first item in the list",
          "name": "shouldGoToFirst",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToLast": {
          "defaultValue": null,
          "description": "Set the cursor to the last item in the list",
          "name": "shouldGoToLast",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToFirstOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToFirstOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToLastOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToLastOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNextPage": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToNextPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPreviousPage": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToPreviousPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnregisterItem": {
          "defaultValue": null,
          "description": "Unregister an item by its identifier. This should be called when the component is unmounted.\nThis event is only called for static rendering.",
          "name": "shouldUnregisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUpdateItemHeight": {
          "defaultValue": null,
          "description": "Updates the default item height. This should only be called when item height is measured.\nCalling this with a different default item height than previous will cause a virtual list to\nrecalculate the overall height of the list and invalidate any height caching. Doing this only\non the first item may save the user from experiencing odd scrolling behavior where the\nscrollbar updates while scrolling. If the user uses the mouse to drag the bar, it can become\n\"detached\" since the browser recalculates scroll bar position while the overflow container is\nupdated.",
          "name": "shouldUpdateItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { value: number; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; ... 15 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { value: number; }, state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "StyledTabItem": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
      "description": "",
      "displayName": "StyledTabItem",
      "methods": [],
      "props": {
        "as": {
          "defaultValue": null,
          "description": "",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "TabsItem": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
      "description": "",
      "displayName": "TabsItem",
      "methods": [],
      "props": {
        "index": {
          "defaultValue": null,
          "description": "Optionally pass index to tab item. This should be done if `Tabs.Item` components were created\nvia a `Array::map` function. This index will ensure keyboard navigation works even if items are\ninserted out of order.",
          "name": "index",
          "parent": {
            "fileName": "canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
            "name": "TabsItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
              "name": "TabsItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "children": {
          "defaultValue": null,
          "description": "The contents of the tab item. This will be the accessible name of the tab for screen readers.\nOften, this is text. Icons are also supported. Using `Tabs.Icon` will render an icon that is\nnot visible to screen readers and therefore the icon should not be necessary to understand the\ntab. In most circumstances, `aria-label` should not be used.\n\n```tsx\n<Tabs.Item>First Tab</Tabs.Item>\n<Tabs.Item>\n  <Tabs.Icon icon={canvasIcon} />\n  <Tabs.Text>Second Tab</Tabs.Text>\n</Tabs.Item>\n```",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
            "name": "TabsItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
              "name": "TabsItemProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "data-id": {
          "defaultValue": null,
          "description": "The identifier of the tab. This identifier will be used in change events and for `initialTab`.\nMust match the `data-id` of the associated tab panel. If this property is not provided, it will\ndefault to a string representation of the the zero-based index of the Tab when it was\ninitialized.",
          "name": "data-id",
          "parent": {
            "fileName": "canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
            "name": "TabsItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
              "name": "TabsItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "id": {
          "defaultValue": null,
          "description": "Optional id. If not set, it will inherit the ID passed to the `Tabs` component and append the\nindex at the end. Only set this for advanced cases.",
          "name": "id",
          "parent": {
            "fileName": "canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
            "name": "TabsItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
              "name": "TabsItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "aria-controls": {
          "defaultValue": null,
          "description": "Part of the ARIA specification for tabs. This attributes links a `role=tab` to a\n`role=tabpanel`. This value must be the same as the associated `id` attribute of the tab panel.\nThis is automatically set by the component and should only be used in advanced cases.",
          "name": "aria-controls",
          "parent": {
            "fileName": "canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
            "name": "TabsItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
              "name": "TabsItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "aria-selected": {
          "defaultValue": null,
          "description": "Part of the ARIA specification for tabs. Lets screen readers know which tab is active. This\nshould either be `true` or `undefined` and never `false`. This is automatically set by the\ncomponent and should only be used in advanced cases.",
          "name": "aria-selected",
          "parent": {
            "fileName": "canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
            "name": "TabsItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
              "name": "TabsItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "tabIndex": {
          "defaultValue": null,
          "description": "Part of the ARIA specification for tabs. The currently active tab should not have a `tabIndex`\nset while all inactive tabs should have a `tabIndex={-1}`",
          "name": "tabIndex",
          "parent": {
            "fileName": "canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
            "name": "TabsItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tabs/lib/TabsItem.tsx",
              "name": "TabsItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "TabsList": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/tabs/lib/TabsList.tsx",
      "description": "",
      "displayName": "TabsList",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "If items are passed to a `TabsModel`, the child of `Tabs.List` should be a render prop. The\nList will determine how and when the item will be rendered.\n@example <Tabs.List>\n  {(item) => <Tabs.Item>{item.text}</Tabs.Item>}\n</Tabs.List>",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/tabs/lib/TabsList.tsx",
            "name": "TabListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tabs/lib/TabsList.tsx",
              "name": "TabListProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode | ((item: any) => ReactNode)",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "(item: any) => ReactNode",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "overflowButton": {
          "defaultValue": null,
          "description": "",
          "name": "overflowButton",
          "parent": {
            "fileName": "canvas-kit/modules/react/tabs/lib/TabsList.tsx",
            "name": "TabListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tabs/lib/TabsList.tsx",
              "name": "TabListProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "TabsMenuPopper": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/tabs/lib/TabsMenuPopper.tsx",
      "description": "",
      "displayName": "TabsMenuPopper",
      "methods": [],
      "props": {
        "anchorElement": {
          "defaultValue": null,
          "description": "The reference element used to position the Popper. Popper content will try to follow the\n`anchorElement` if it moves and will reposition itself if there is no longer room in the\nwindow.",
          "name": "anchorElement",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Element | RefObject<Element> | null",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "Element",
                "description": "Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
                "fullComment": "Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
                "tags": {}
              },
              {
                "value": "RefObject<Element>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "children": {
          "defaultValue": null,
          "description": "The content of the Popper. If a function is provided, it will be treated as a Render Prop and\npass the `placement` chosen by PopperJS. This `placement` value is useful if your popup needs\nto animate and that animation depends on the direction of the content in relation to the\n`anchorElement`.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode | ((props: { placement: Placement; }) => ReactNode)",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "(props: { placement: Placement; }) => ReactNode",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "getAnchorClientRect": {
          "defaultValue": null,
          "description": "When provided, this optional callback will be used to determine positioning for the Popper element\ninstead of calling `getBoundingClientRect` on the `anchorElement` prop. Use this when you need\ncomplete control over positioning. When this prop is specified, it is safe to pass `null` into the\n`anchorElement` prop. If `null` is passed into the `anchorElement` prop, an `owner` will not be\nprovided for the `PopupStack`.",
          "name": "getAnchorClientRect",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(() => DOMRect)",
            "value": [
              {
                "value": "() => DOMRect",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "open": {
          "defaultValue": {
            "value": "true"
          },
          "description": "Determines if `Popper` content should be rendered. The content only exists in the DOM when\n`open` is `true`",
          "name": "open",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "placement": {
          "defaultValue": {
            "value": "bottom"
          },
          "description": "The placement of the `Popper` contents relative to the `anchorElement`. Accepts `auto`, `top`,\n`right`, `bottom`, or `left`. Each placement can also be modified using any of the following\nvariations: `-start` or `-end`.",
          "name": "placement",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Placement",
            "value": [
              {
                "value": "\"auto\""
              },
              {
                "value": "\"auto-start\""
              },
              {
                "value": "\"auto-end\""
              },
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"right\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"top-start\""
              },
              {
                "value": "\"top-end\""
              },
              {
                "value": "\"bottom-start\""
              },
              {
                "value": "\"bottom-end\""
              },
              {
                "value": "\"right-start\""
              },
              {
                "value": "\"right-end\""
              },
              {
                "value": "\"left-start\""
              },
              {
                "value": "\"left-end\""
              }
            ]
          }
        },
        "onPlacementChange": {
          "defaultValue": null,
          "description": "A callback function that will be called whenever PopperJS chooses a placement that is different\nfrom the provided `placement` preference. If a `placement` preference doesn't fit, PopperJS\nwill choose a new one and call this callback.",
          "name": "onPlacementChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((placement: Placement) => void)",
            "value": [
              {
                "value": "(placement: Placement) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "popperOptions": {
          "defaultValue": null,
          "description": "The additional options passed to the Popper's `popper.js` instance.",
          "name": "popperOptions",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Partial<Options>",
            "value": [
              {
                "value": "Partial<Options>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "portal": {
          "defaultValue": {
            "value": "true"
          },
          "description": "If false, render the Popper within the\nDOM hierarchy of its parent. A non-portal Popper will constrained by the parent container\noverflows. If you set this to `false`, you may experience issues where you content gets cut off\nby scrollbars or `overflow: hidden`",
          "name": "portal",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "popperInstanceRef": {
          "defaultValue": null,
          "description": "Reference to the PopperJS instance. Useful for making direct method calls on the popper\ninstance like `update`.",
          "name": "popperInstanceRef",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
            "name": "PopperProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/Popper.tsx",
              "name": "PopperProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Ref<Instance>",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "(instance: Instance | null) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "RefObject<Instance>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPr...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; ... 16 more ...; mode: \"single\" | \"multiple\"; }; events: { ...; }; selection: SelectionManager; navigation: NavigationManager; getId: (item: any) => string; }, elemPro...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "TabsOverflowButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/tabs/lib/TabsOverflowButton.tsx",
      "description": "",
      "displayName": "TabsOverflowButton",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The label text of the Tab.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/tabs/lib/TabsOverflowButton.tsx",
            "name": "OverflowButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tabs/lib/TabsOverflowButton.tsx",
              "name": "OverflowButtonProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "TabsPanel": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/tabs/lib/TabsPanel.tsx",
      "description": "",
      "displayName": "TabsPanel",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The contents of the TabPanel.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/tabs/lib/TabsPanel.tsx",
            "name": "TabPanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tabs/lib/TabsPanel.tsx",
              "name": "TabPanelProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "data-id": {
          "defaultValue": null,
          "description": "The identifier of the tab. This identifier will be used in change events and for `initialTab`.\nMust match the `data-id` of the associated tab item. If this property is not provided, it will\ndefault to a string representation of the the zero-based index of the Tab when it was\ninitialized.",
          "name": "data-id",
          "parent": {
            "fileName": "canvas-kit/modules/react/tabs/lib/TabsPanel.tsx",
            "name": "TabPanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tabs/lib/TabsPanel.tsx",
              "name": "TabPanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "tabIndex": {
          "defaultValue": null,
          "description": "Part of the ARIA specification for tabs. By default, all `tabpanel` elements have a `tabIndex`\nof `0` which makes the whole content area receive focus. If you have a focusable item near the\ntop of the tab panel content area, you may set `tabIndex` to `undefined` to prevent the tab\npanel element from receiving focus. Only do this is a child of the tab panel can receive focus.",
          "name": "tabIndex",
          "parent": {
            "fileName": "canvas-kit/modules/react/tabs/lib/TabsPanel.tsx",
            "name": "TabPanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tabs/lib/TabsPanel.tsx",
              "name": "TabPanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "TabsPanels": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/tabs/lib/TabsPanels.tsx",
      "description": "",
      "displayName": "TabsPanels",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
            "value": [
              {
                "value": "{ state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { getId: (item: any) => string; orientation: Orientation; panels: Item<any>[]; panelIndexRef: MutableRefObject<number>; hiddenIds: string[]; ... 14 more ...; items: Item<...>[]; }; ... 4 more ...; getId: (item: any) => string; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/testing": {
    "ComponentStatesTable": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/testing/lib/ComponentStatesTable.tsx",
      "description": "",
      "displayName": "ComponentStatesTable",
      "methods": [],
      "props": {
        "rowProps": {
          "defaultValue": null,
          "description": "The props that will be passed to the component when it is rendered and the corresponding\nrow label for that permutation. It is encouraged to use the result of permutateProps()\nrather than passing in a list so we don't miss any combinations.",
          "name": "rowProps",
          "parent": {
            "fileName": "canvas-kit/modules/react/testing/lib/ComponentStatesTable.tsx",
            "name": "ComponentStatesTableProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/testing/lib/ComponentStatesTable.tsx",
              "name": "ComponentStatesTableProps"
            }
          ],
          "required": true,
          "type": {
            "name": "PropCombination[]"
          }
        },
        "columnProps": {
          "defaultValue": null,
          "description": "The props that will be passed to the component when it is rendered and the corresponding\ncolumn label for that permutation. It is encouraged to use the result of permutateProps()\nrather than passing in a list so we don't miss any combinations.",
          "name": "columnProps",
          "parent": {
            "fileName": "canvas-kit/modules/react/testing/lib/ComponentStatesTable.tsx",
            "name": "ComponentStatesTableProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/testing/lib/ComponentStatesTable.tsx",
              "name": "ComponentStatesTableProps"
            }
          ],
          "required": true,
          "type": {
            "name": "PropCombination[]"
          }
        },
        "children": {
          "defaultValue": null,
          "description": "The render function called to render the component in each cell of the table. This gives you\nthe ability to add extra styling or markup (a blue background for an inverse variant, for example).",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/testing/lib/ComponentStatesTable.tsx",
            "name": "ComponentStatesTableProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/testing/lib/ComponentStatesTable.tsx",
              "name": "ComponentStatesTableProps"
            }
          ],
          "required": true,
          "type": {
            "name": "(props: Props) => ReactNode"
          }
        }
      }
    },
    "convertToStaticStates": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/testing/lib/StaticStates.tsx",
      "description": "",
      "displayName": "convertToStaticStates",
      "methods": [],
      "props": {}
    },
    "StaticStates": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/testing/lib/StaticStates.tsx",
      "description": "",
      "displayName": "StaticStates",
      "methods": [],
      "props": {
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/testing/lib/StaticStates.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "PartialEmotionCanvasTheme",
            "value": [
              {
                "value": "PartialEmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/text-area": {
    "TextArea": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/text-area/lib/TextArea.tsx",
      "description": "",
      "displayName": "TextArea",
      "methods": [],
      "props": {
        "disabled": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the TextArea to the disabled state.",
          "name": "disabled",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-area/lib/TextArea.tsx",
            "name": "TextAreaProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-area/lib/TextArea.tsx",
              "name": "TextAreaProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the TextArea (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-area/lib/TextArea.tsx",
            "name": "TextAreaProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-area/lib/TextArea.tsx",
              "name": "TextAreaProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onChange": {
          "defaultValue": null,
          "description": "The function called when the TextArea state changes.",
          "name": "onChange",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-area/lib/TextArea.tsx",
            "name": "TextAreaProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-area/lib/TextArea.tsx",
              "name": "TextAreaProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((e: ChangeEvent<HTMLTextAreaElement>) => void)",
            "value": [
              {
                "value": "(e: ChangeEvent<HTMLTextAreaElement>) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "placeholder": {
          "defaultValue": null,
          "description": "The placeholder text of the TextArea.",
          "name": "placeholder",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-area/lib/TextArea.tsx",
            "name": "TextAreaProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-area/lib/TextArea.tsx",
              "name": "TextAreaProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "readOnly": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the TextArea to read-only. The user will be unable to interact with the TextArea.",
          "name": "readOnly",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-area/lib/TextArea.tsx",
            "name": "TextAreaProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-area/lib/TextArea.tsx",
              "name": "TextAreaProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "resize": {
          "defaultValue": {
            "value": "TextArea.ResizeDirection.Both"
          },
          "description": "The resize constraints of the TextArea.",
          "name": "resize",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-area/lib/TextArea.tsx",
            "name": "TextAreaProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-area/lib/TextArea.tsx",
              "name": "TextAreaProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "TextAreaResizeDirection",
            "value": [
              {
                "value": "\"none\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"both\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"horizontal\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"vertical\"",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "value": {
          "defaultValue": null,
          "description": "The value of the TextArea.",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-area/lib/TextArea.tsx",
            "name": "TextAreaProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-area/lib/TextArea.tsx",
              "name": "TextAreaProps"
            }
          ],
          "required": false,
          "type": {
            "name": "any"
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/text-input": {
    "InputIconContainer": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/text-input/lib/InputIconContainer.tsx",
      "description": "",
      "displayName": "InputIconContainer",
      "methods": [],
      "props": {
        "icon": {
          "defaultValue": null,
          "description": "",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-input/lib/InputIconContainer.tsx",
            "name": "InputIconContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-input/lib/InputIconContainer.tsx",
              "name": "InputIconContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactElement<ElementComponent<\"span\", SystemIconProps>, string | JSXElementConstructor<any>>",
            "value": [
              {
                "value": "ReactElement<ElementComponent<\"span\", SystemIconProps>, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "TextInput": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/text-input/lib/TextInput.tsx",
      "description": "",
      "displayName": "TextInput",
      "methods": [],
      "props": {
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the TextInput (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
            "name": "TextInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
              "name": "TextInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "width": {
          "defaultValue": null,
          "description": "The width of the TextInput.",
          "name": "width",
          "parent": {
            "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
            "name": "TextInputProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text-input/lib/TextInput.tsx",
              "name": "TextInputProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/text": {
    "LabelText": {
      "tags": {
        "example": "```tsx\nimport { LabelText } from '@workday/canvas-kit-react/text';\n\nconst CustomLabelText = () => (\n  <LabelText>Input Label Text</LabelText>\n);\n```"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/text/lib/LabelText.tsx",
      "description": "## LabelText\n[View Docs](https://canvas.workday.com/components/text/label-text)\n\n---\nThis component is intended to be used for labeling input fields.\nIt's built on top of the `Text` component, so it has access to all `TextProps`.\nBy default, it renders a semantic `label` element.\n\nIt also uses the `subtext.large` typeLevel by default:\n- font-size: 14px (0.875rem)\n- font-weight: regular (400)",
      "displayName": "LabelText",
      "methods": [],
      "props": {
        "cursor": {
          "defaultValue": null,
          "description": "sets [CSS cursor property](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor)",
          "name": "cursor",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/LabelText.tsx",
            "name": "TypeLabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/LabelText.tsx",
              "name": "TypeLabelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Cursor",
            "value": [
              {
                "value": "\"progress\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"auto\""
              },
              {
                "value": "string & {}"
              },
              {
                "value": "\"-moz-initial\""
              },
              {
                "value": "\"inherit\""
              },
              {
                "value": "\"initial\""
              },
              {
                "value": "\"revert\""
              },
              {
                "value": "\"unset\""
              },
              {
                "value": "\"none\""
              },
              {
                "value": "\"-moz-grab\""
              },
              {
                "value": "\"-webkit-grab\""
              },
              {
                "value": "\"alias\""
              },
              {
                "value": "\"all-scroll\""
              },
              {
                "value": "\"cell\""
              },
              {
                "value": "\"col-resize\""
              },
              {
                "value": "\"context-menu\""
              },
              {
                "value": "\"copy\""
              },
              {
                "value": "\"crosshair\""
              },
              {
                "value": "\"default\""
              },
              {
                "value": "\"e-resize\""
              },
              {
                "value": "\"ew-resize\""
              },
              {
                "value": "\"grab\""
              },
              {
                "value": "\"grabbing\""
              },
              {
                "value": "\"help\""
              },
              {
                "value": "\"move\""
              },
              {
                "value": "\"n-resize\""
              },
              {
                "value": "\"ne-resize\""
              },
              {
                "value": "\"nesw-resize\""
              },
              {
                "value": "\"no-drop\""
              },
              {
                "value": "\"not-allowed\""
              },
              {
                "value": "\"ns-resize\""
              },
              {
                "value": "\"nw-resize\""
              },
              {
                "value": "\"nwse-resize\""
              },
              {
                "value": "\"pointer\""
              },
              {
                "value": "\"row-resize\""
              },
              {
                "value": "\"s-resize\""
              },
              {
                "value": "\"se-resize\""
              },
              {
                "value": "\"sw-resize\""
              },
              {
                "value": "\"vertical-text\""
              },
              {
                "value": "\"w-resize\""
              },
              {
                "value": "\"wait\""
              },
              {
                "value": "\"zoom-in\""
              },
              {
                "value": "\"zoom-out\""
              }
            ]
          }
        },
        "disabled": {
          "defaultValue": null,
          "description": "",
          "name": "disabled",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/LabelText.tsx",
            "name": "TypeLabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/LabelText.tsx",
              "name": "TypeLabelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "typeLevel": {
          "defaultValue": null,
          "description": "Type token as string with level and size separated by dot.\nThese values map to our [Canvas type levels](https://canvas.workday.com/tokens/type#type-styles).\n@example ```tsx\n<Text typeLevel=\"body.small\">Small body text</Text>\n```",
          "name": "typeLevel",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
            "name": "TextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
              "name": "TextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"body.small\" | \"body.medium\" | \"body.large\" | \"title.small\" | \"title.medium\" | \"title.large\" | \"heading.small\" | \"heading.medium\" | \"heading.large\" | \"subtext.small\" | \"subtext.medium\" | \"subtext.large\"",
            "value": [
              {
                "value": "\"body.small\""
              },
              {
                "value": "\"body.medium\""
              },
              {
                "value": "\"body.large\""
              },
              {
                "value": "\"title.small\""
              },
              {
                "value": "\"title.medium\""
              },
              {
                "value": "\"title.large\""
              },
              {
                "value": "\"heading.small\""
              },
              {
                "value": "\"heading.medium\""
              },
              {
                "value": "\"heading.large\""
              },
              {
                "value": "\"subtext.small\""
              },
              {
                "value": "\"subtext.medium\""
              },
              {
                "value": "\"subtext.large\""
              }
            ]
          }
        },
        "variant": {
          "defaultValue": null,
          "description": "Type variant token names: `error`, `hint` or `inverse`.\n@example ```tsx\n<Text variant=\"error\" typeLevel=\"subtext.large\">Error text</Text>\n```",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
            "name": "TextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
              "name": "TextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "keyof CanvasTypeVariants",
            "value": [
              {
                "value": "\"inverse\""
              },
              {
                "value": "\"error\""
              },
              {
                "value": "\"hint\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "Text": {
      "tags": {
        "example": "```tsx\nimport { Text } from '@workday/canvas-kit-react/text';\n\nconst CustomErrorText = () => (\n  <Text typeLevel=\"subtext.small\" variant=\"error\">\n    Error Text\n  </Text>\n);\n```"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/text/lib/Text.tsx",
      "description": "## Text\n[View Docs](https://canvas.workday.com/components/text/text)\n\n---\nThis is a generic base component intended to render any text.\nIt's built on top of the `Box` component, so it has access to all [BoxProps](https://canvas.workday.com/components/layout/box/#props).\nIt also has `typeLevel` and `variant` style props that simplify navigating our type hierarchy and using [Canvas type tokens](https://canvas.workday.com/tokens/type#type-styles).\nBy default, it renders a semantic `span` element, but you can adjust this as needed with the `as` prop.\n\nThe type hierarchy is organized into four levels, which correspond to our [Canvas type levels](https://canvas.workday.com/tokens/type#type-styles).\n\n- `title`: Intended to be used for large page titles.\n- `heading`: Intended to be used for headings and large text.\n- `body`: Intended to be used for standard body text.\n- `subtext`: Intended to be used for small subtext content or in tight spaces.\n\nEach level has three sizes: `large`, `medium`, and `small`.\n\nYou can provide any level and size to the `typeLevel` prop, and it will apply the correct styles accordingly.\nIn the example below we're providing the `subtext` level and `small` size to the component with the value `subtext.small`.",
      "displayName": "Text",
      "methods": [],
      "props": {
        "typeLevel": {
          "defaultValue": null,
          "description": "Type token as string with level and size separated by dot.\nThese values map to our [Canvas type levels](https://canvas.workday.com/tokens/type#type-styles).\n@example ```tsx\n<Text typeLevel=\"body.small\">Small body text</Text>\n```",
          "name": "typeLevel",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
            "name": "TextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
              "name": "TextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"body.small\" | \"body.medium\" | \"body.large\" | \"title.small\" | \"title.medium\" | \"title.large\" | \"heading.small\" | \"heading.medium\" | \"heading.large\" | \"subtext.small\" | \"subtext.medium\" | \"subtext.large\"",
            "value": [
              {
                "value": "\"body.small\""
              },
              {
                "value": "\"body.medium\""
              },
              {
                "value": "\"body.large\""
              },
              {
                "value": "\"title.small\""
              },
              {
                "value": "\"title.medium\""
              },
              {
                "value": "\"title.large\""
              },
              {
                "value": "\"heading.small\""
              },
              {
                "value": "\"heading.medium\""
              },
              {
                "value": "\"heading.large\""
              },
              {
                "value": "\"subtext.small\""
              },
              {
                "value": "\"subtext.medium\""
              },
              {
                "value": "\"subtext.large\""
              }
            ]
          }
        },
        "variant": {
          "defaultValue": null,
          "description": "Type variant token names: `error`, `hint` or `inverse`.\n@example ```tsx\n<Text variant=\"error\" typeLevel=\"subtext.large\">Error text</Text>\n```",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
            "name": "TextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
              "name": "TextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "keyof CanvasTypeVariants",
            "value": [
              {
                "value": "\"inverse\""
              },
              {
                "value": "\"error\""
              },
              {
                "value": "\"hint\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "Subtext": {
      "tags": {
        "example": "```tsx\nimport { Subtext } from '@workday/canvas-kit-react/text';\n\nconst CustomSubtext = () => (\n  <Subtext size=\"small\">Subtext</Subtext>\n);\n```"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/text/lib/TypeLevelComponents.tsx",
      "description": "## Subtext\n[View Docs](https://canvas.workday.com/components/text/subtext)\n\n---\nThis component is intended to be used for small subtext content or in tight spaces.\nBy default, it renders a semantic `p` element, but you can adjust this as needed with the `as` prop.\nIt has three sizes: large, medium, and small.\nHere's a quick reference for font-sizes and weights:\n\n- `large`\n  - font-size: 14px (0.875rem)\n  - font-weight: regular (400)\n- `medium`\n  - font-size: 12px (0.75rem)\n  - font-weight: regular (400)\n- `small`\n  - font-size: 10px (0.625rem)\n  - font-weight: regular (400)",
      "displayName": "Subtext",
      "methods": [],
      "props": {
        "size": {
          "defaultValue": null,
          "description": "Each type level has three sizes: `large`, `medium`, and `small`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/TypeLevelComponents.tsx",
            "name": "TypeLevelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/TypeLevelComponents.tsx",
              "name": "TypeLevelProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "\"small\" | \"medium\" | \"large\"",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "variant": {
          "defaultValue": null,
          "description": "Type variant token names: `error`, `hint` or `inverse`.\n@example ```tsx\n<Text variant=\"error\" typeLevel=\"subtext.large\">Error text</Text>\n```",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
            "name": "TextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
              "name": "TextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "keyof CanvasTypeVariants",
            "value": [
              {
                "value": "\"inverse\""
              },
              {
                "value": "\"error\""
              },
              {
                "value": "\"hint\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "BodyText": {
      "tags": {
        "example": "```tsx\nimport { BodyText } from '@workday/canvas-kit-react/text';\n\nconst CustomBodyText = () => (\n  <BodyText size=\"small\">Body Text</BodyText>\n);\n```"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/text/lib/TypeLevelComponents.tsx",
      "description": "## BodyText\n[View Docs](https://canvas.workday.com/components/text/body-text)\n\n---\nThis component is intended to be used for standard body text.\nBy default, it renders a semantic `p` element, but you can adjust this as needed with the `as` prop.\nIt has three sizes: large, medium, and small.\nHere's a quick reference for font-sizes and weights:\n\n- `large`\n  - font-size: 20px (1.25rem)\n  - font-weight: regular (400)\n- `medium`\n  - font-size: 18px (1.125rem)\n  - font-weight: regular (400)\n- `small`\n  - font-size: 16px (1rem)\n  - font-weight: regular (400)",
      "displayName": "BodyText",
      "methods": [],
      "props": {
        "size": {
          "defaultValue": null,
          "description": "Each type level has three sizes: `large`, `medium`, and `small`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/TypeLevelComponents.tsx",
            "name": "TypeLevelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/TypeLevelComponents.tsx",
              "name": "TypeLevelProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "\"small\" | \"medium\" | \"large\"",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "variant": {
          "defaultValue": null,
          "description": "Type variant token names: `error`, `hint` or `inverse`.\n@example ```tsx\n<Text variant=\"error\" typeLevel=\"subtext.large\">Error text</Text>\n```",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
            "name": "TextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
              "name": "TextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "keyof CanvasTypeVariants",
            "value": [
              {
                "value": "\"inverse\""
              },
              {
                "value": "\"error\""
              },
              {
                "value": "\"hint\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "Heading": {
      "tags": {
        "example": "```tsx\nimport { Heading } from '@workday/canvas-kit-react/text';\n\nconst CustomHeading = () => (\n  <Heading size=\"small\">Heading Text</Heading>\n);\n```"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/text/lib/TypeLevelComponents.tsx",
      "description": "## Heading\n[View Docs](https://canvas.workday.com/components/text/heading)\n\n---\nThis component is intended to be used for headings and large text.\nBy default, it renders a semantic `h2` element, but you can adjust this as needed with the `as` prop.\nIt has three sizes: large, medium, and small.\nHere's a quick reference for font-sizes and weights:\n\n- `large`\n  - font-size: 32px (2rem)\n  - font-weight: bold (700)\n- `medium`\n  - font-size: 28px (1.75rem)\n  - font-weight: bold (700)\n- `small`\n  - font-size: 24px (1.5rem)\n  - font-weight: bold (700)",
      "displayName": "Heading",
      "methods": [],
      "props": {
        "size": {
          "defaultValue": null,
          "description": "Each type level has three sizes: `large`, `medium`, and `small`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/TypeLevelComponents.tsx",
            "name": "TypeLevelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/TypeLevelComponents.tsx",
              "name": "TypeLevelProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "\"small\" | \"medium\" | \"large\"",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "variant": {
          "defaultValue": null,
          "description": "Type variant token names: `error`, `hint` or `inverse`.\n@example ```tsx\n<Text variant=\"error\" typeLevel=\"subtext.large\">Error text</Text>\n```",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
            "name": "TextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
              "name": "TextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "keyof CanvasTypeVariants",
            "value": [
              {
                "value": "\"inverse\""
              },
              {
                "value": "\"error\""
              },
              {
                "value": "\"hint\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "Title": {
      "tags": {
        "example": "```tsx\nimport { Title } from '@workday/canvas-kit-react/text';\n\nconst CustomTitle = () => (\n  <Title size=\"small\">Title Text</Title>\n);\n```"
      },
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/text/lib/TypeLevelComponents.tsx",
      "description": "## Title\n[View Docs](https://canvas.workday.com/components/text/title)\n\n---\nThis component is intended to be used large page titles.\nBy default, it renders a semantic `h1` element, but you can adjust this as needed with the `as` prop.\nIt has three sizes: large, medium, and small.\nHere's a quick reference for font-sizes and weights:\n\n- `large`\n  - font-size: 56px (3/5rem)\n  - font-weight: bold (700)\n- `medium`\n  - font-size: 48px (3rem)\n  - font-weight: bold (700)\n- `small`\n  - font-size: 40px (2.5rem)\n  - font-weight: bold (700)",
      "displayName": "Title",
      "methods": [],
      "props": {
        "size": {
          "defaultValue": null,
          "description": "Each type level has three sizes: `large`, `medium`, and `small`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/TypeLevelComponents.tsx",
            "name": "TypeLevelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/TypeLevelComponents.tsx",
              "name": "TypeLevelProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "\"small\" | \"medium\" | \"large\"",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "variant": {
          "defaultValue": null,
          "description": "Type variant token names: `error`, `hint` or `inverse`.\n@example ```tsx\n<Text variant=\"error\" typeLevel=\"subtext.large\">Error text</Text>\n```",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
            "name": "TextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
              "name": "TextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "keyof CanvasTypeVariants",
            "value": [
              {
                "value": "\"inverse\""
              },
              {
                "value": "\"error\""
              },
              {
                "value": "\"hint\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/toast": {
    "Toast": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/toast/lib/Toast.tsx",
      "description": "",
      "displayName": "Toast",
      "methods": [],
      "props": {
        "icon": {
          "defaultValue": {
            "value": "checkIcon"
          },
          "description": "The icon of the Toast.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/toast/lib/Toast.tsx",
            "name": "ToastProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/toast/lib/Toast.tsx",
              "name": "ToastProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "iconColor": {
          "defaultValue": {
            "value": "colors.greenApple400"
          },
          "description": "The color of the Toast icon.",
          "name": "iconColor",
          "parent": {
            "fileName": "canvas-kit/modules/react/toast/lib/Toast.tsx",
            "name": "ToastProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/toast/lib/Toast.tsx",
              "name": "ToastProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "children": {
          "defaultValue": null,
          "description": "The text of the Toast message.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/toast/lib/Toast.tsx",
            "name": "ToastProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/toast/lib/Toast.tsx",
              "name": "ToastProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "onClose": {
          "defaultValue": null,
          "description": "The function called when the Toast is closed.",
          "name": "onClose",
          "parent": {
            "fileName": "canvas-kit/modules/react/toast/lib/Toast.tsx",
            "name": "ToastProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/toast/lib/Toast.tsx",
              "name": "ToastProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(() => void)",
            "value": [
              {
                "value": "() => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onActionClick": {
          "defaultValue": null,
          "description": "The function called when the Toast action is clicked.",
          "name": "onActionClick",
          "parent": {
            "fileName": "canvas-kit/modules/react/toast/lib/Toast.tsx",
            "name": "ToastProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/toast/lib/Toast.tsx",
              "name": "ToastProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(() => void)",
            "value": [
              {
                "value": "() => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "actionText": {
          "defaultValue": null,
          "description": "The text of the Toast action.",
          "name": "actionText",
          "parent": {
            "fileName": "canvas-kit/modules/react/toast/lib/Toast.tsx",
            "name": "ToastProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/toast/lib/Toast.tsx",
              "name": "ToastProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-react/tooltip": {
    "findOverflowElement": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/tooltip/lib/OverflowTooltip.tsx",
      "description": "Look for an element within the tree for an overflow element (auto, scroll, clip, or hidden).\nThis could be the passed element, or a descendant. If no element is found, `null` is returned.",
      "displayName": "findOverflowElement",
      "methods": [],
      "props": {}
    },
    "findEllipsisElement": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/tooltip/lib/OverflowTooltip.tsx",
      "description": "Look for an element within the tree for a `text-overflow` CSS property of `ellipsis`.\nThis could be the passed element, or a descendant. If no element is found, `null` is returned.",
      "displayName": "findEllipsisElement",
      "methods": [],
      "props": {}
    },
    "OverflowTooltip": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/tooltip/lib/OverflowTooltip.tsx",
      "description": "",
      "displayName": "OverflowTooltip",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The target (anchor element) for the Tooltip.\n\n**Note:** This **must** be a single Element, StyledComponent, or any other component that\nforwards extra props to an Element. Tooltip works running `React.cloneElement` on the children\nand adds extra properties like aria attributes and event handlers. This is currently a\nlimitation of the Tooltip component. Functionality will not work if this condition isn't met.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/tooltip/lib/OverflowTooltip.tsx",
            "name": "OverflowTooltipProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tooltip/lib/OverflowTooltip.tsx",
              "name": "OverflowTooltipProps"
            }
          ],
          "required": true,
          "type": {
            "name": "ReactElement<any, string | JSXElementConstructor<any>>"
          }
        },
        "placement": {
          "defaultValue": {
            "value": "top"
          },
          "description": "Sets the placement preference used by PopperJS.",
          "name": "placement",
          "parent": {
            "fileName": "canvas-kit/modules/react/tooltip/lib/OverflowTooltip.tsx",
            "name": "OverflowTooltipProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tooltip/lib/OverflowTooltip.tsx",
              "name": "OverflowTooltipProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Placement",
            "value": [
              {
                "value": "\"auto\""
              },
              {
                "value": "\"auto-start\""
              },
              {
                "value": "\"auto-end\""
              },
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"right\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"top-start\""
              },
              {
                "value": "\"top-end\""
              },
              {
                "value": "\"bottom-start\""
              },
              {
                "value": "\"bottom-end\""
              },
              {
                "value": "\"right-start\""
              },
              {
                "value": "\"right-end\""
              },
              {
                "value": "\"left-start\""
              },
              {
                "value": "\"left-end\""
              }
            ]
          }
        }
      }
    },
    "Tooltip": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/tooltip/lib/Tooltip.tsx",
      "description": "",
      "displayName": "Tooltip",
      "methods": [],
      "props": {
        "title": {
          "defaultValue": null,
          "description": "This should be a string in most cases. HTML is supported, but only text is understood\nby assistive technology. This is true for both `label` and `describe` modes.",
          "name": "title",
          "parent": {
            "fileName": "canvas-kit/modules/react/tooltip/lib/Tooltip.tsx",
            "name": "TooltipProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tooltip/lib/Tooltip.tsx",
              "name": "TooltipProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "children": {
          "defaultValue": null,
          "description": "The target (anchor element) for the Tooltip.\n\n**Note:** This **must** be a single Element, StyledComponent, or any other component that\nforwards extra props to an Element. Tooltip works running `React.cloneElement` on the children\nand adds extra properties like aria attributes and event handlers. This is currently a\nlimitation of the Tooltip component. Functionality will not work if this condition isn't met.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/tooltip/lib/Tooltip.tsx",
            "name": "TooltipProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tooltip/lib/Tooltip.tsx",
              "name": "TooltipProps"
            }
          ],
          "required": true,
          "type": {
            "name": "ReactElement<any, string | JSXElementConstructor<any>>"
          }
        },
        "placement": {
          "defaultValue": {
            "value": "top"
          },
          "description": "Sets the placement preference used by PopperJS.",
          "name": "placement",
          "parent": {
            "fileName": "canvas-kit/modules/react/tooltip/lib/Tooltip.tsx",
            "name": "TooltipProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tooltip/lib/Tooltip.tsx",
              "name": "TooltipProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Placement",
            "value": [
              {
                "value": "\"auto\""
              },
              {
                "value": "\"auto-start\""
              },
              {
                "value": "\"auto-end\""
              },
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              },
              {
                "value": "\"right\""
              },
              {
                "value": "\"left\""
              },
              {
                "value": "\"top-start\""
              },
              {
                "value": "\"top-end\""
              },
              {
                "value": "\"bottom-start\""
              },
              {
                "value": "\"bottom-end\""
              },
              {
                "value": "\"right-start\""
              },
              {
                "value": "\"right-end\""
              },
              {
                "value": "\"left-start\""
              },
              {
                "value": "\"left-end\""
              }
            ]
          }
        },
        "type": {
          "defaultValue": {
            "value": "label"
          },
          "description": "Determines the tooltip type for accessibility.\n\n- `label`: Sets the accessible name for the wrapped element. Use for icons or if tooltip\n  `title` prop is the same as the text content of the wrapped element. E.g. TertiaryButtons that render an icon or\n  Ellipsis tooltips.\n- `describe`: Sets `aria-describedby` of the wrapped element. Use if the tooltip has additional\n  information about the target.\n- `muted`: No effort is made to make the tooltip accessible to screen readers. Use if the\n  tooltip contents are not useful to a screen reader or if you have handled accessibility of\n  the tooltip yourself.\n\n**Note**: Assistive technology may ignore `describe` techniques based on verbosity settings.\nConsider an alternate way to inform a user of additional important information.",
          "name": "type",
          "parent": {
            "fileName": "canvas-kit/modules/react/tooltip/lib/Tooltip.tsx",
            "name": "TooltipProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tooltip/lib/Tooltip.tsx",
              "name": "TooltipProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"label\" | \"describe\" | \"muted\"",
            "value": [
              {
                "value": "\"label\""
              },
              {
                "value": "\"describe\""
              },
              {
                "value": "\"muted\""
              }
            ]
          }
        },
        "showDelay": {
          "defaultValue": {
            "value": 300
          },
          "description": "Amount of time (in ms) to delay before showing the tooltip",
          "name": "showDelay",
          "parent": {
            "fileName": "canvas-kit/modules/react/tooltip/lib/Tooltip.tsx",
            "name": "TooltipProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tooltip/lib/Tooltip.tsx",
              "name": "TooltipProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "hideDelay": {
          "defaultValue": {
            "value": 100
          },
          "description": "Amount of time (in ms) to delay before hiding the tooltip",
          "name": "hideDelay",
          "parent": {
            "fileName": "canvas-kit/modules/react/tooltip/lib/Tooltip.tsx",
            "name": "TooltipProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tooltip/lib/Tooltip.tsx",
              "name": "TooltipProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        }
      }
    },
    "TooltipContainer": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/react/tooltip/lib/TooltipContainer.tsx",
      "description": "",
      "displayName": "TooltipContainer",
      "methods": [],
      "props": {
        "transformOrigin": {
          "defaultValue": {
            "value": "{horizontal: 'center', vertical: 'top'}"
          },
          "description": "The origin from which the Tooltip will animate. Pass in `null` for no animation",
          "name": "transformOrigin",
          "parent": {
            "fileName": "canvas-kit/modules/react/tooltip/lib/TooltipContainer.tsx",
            "name": "TooltipContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tooltip/lib/TooltipContainer.tsx",
              "name": "TooltipContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "TransformOrigin | null",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "TransformOrigin",
                "description": "TransformOrigin behavior for things like popups and tooltips",
                "fullComment": "TransformOrigin behavior for things like popups and tooltips",
                "tags": {}
              }
            ]
          }
        },
        "popperProps": {
          "defaultValue": null,
          "description": "optional popper properties if `placement` is set",
          "name": "popperProps",
          "parent": {
            "fileName": "canvas-kit/modules/react/tooltip/lib/TooltipContainer.tsx",
            "name": "TooltipContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/tooltip/lib/TooltipContainer.tsx",
              "name": "TooltipContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ open: boolean; anchorElement: HTMLElement | null; }",
            "value": [
              {
                "value": "{ open: boolean; anchorElement: HTMLElement | null; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-labs-react/combobox": {
    "AutocompleteList": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/combobox/lib/AutocompleteList.tsx",
      "description": "",
      "displayName": "AutocompleteList",
      "methods": [],
      "props": {
        "autocompleteItems": {
          "defaultValue": null,
          "description": "The autocomplete items of the Combobox. This array of menu items is shown under the text input.",
          "name": "autocompleteItems",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/AutocompleteList.tsx",
            "name": "AutocompleteListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/AutocompleteList.tsx",
              "name": "AutocompleteListProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactElement<any, string | JSXElementConstructor<any>>[] | ComboBoxMenuItemGroup[]",
            "value": [
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ComboBoxMenuItemGroup[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "selectedIndex": {
          "defaultValue": null,
          "description": "Index of the active autocomplete item",
          "name": "selectedIndex",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/AutocompleteList.tsx",
            "name": "AutocompleteListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/AutocompleteList.tsx",
              "name": "AutocompleteListProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "number | null",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "handleAutocompleteClick": {
          "defaultValue": null,
          "description": "The function called when an autocomplete item is selected",
          "name": "handleAutocompleteClick",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/AutocompleteList.tsx",
            "name": "AutocompleteListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/AutocompleteList.tsx",
              "name": "AutocompleteListProps"
            }
          ],
          "required": true,
          "type": {
            "name": "(event: SyntheticEvent<Element, Event>, menuItemProps: any) => void"
          }
        },
        "labelId": {
          "defaultValue": null,
          "description": "The id of the form field.",
          "name": "labelId",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/AutocompleteList.tsx",
            "name": "AutocompleteListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/AutocompleteList.tsx",
              "name": "AutocompleteListProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "comboboxId": {
          "defaultValue": null,
          "description": "The id of the combobox.",
          "name": "comboboxId",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/AutocompleteList.tsx",
            "name": "AutocompleteListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/AutocompleteList.tsx",
              "name": "AutocompleteListProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "showGroupText": {
          "defaultValue": null,
          "description": "True when group changes via keyboard control",
          "name": "showGroupText",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/AutocompleteList.tsx",
            "name": "AutocompleteListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/AutocompleteList.tsx",
              "name": "AutocompleteListProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "getTextFromElement": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
      "description": "",
      "displayName": "getTextFromElement",
      "methods": [],
      "props": {}
    },
    "Combobox": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
      "description": "",
      "displayName": "Combobox",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The TextInput child of the Combobox.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
            "name": "ComboboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
              "name": "ComboboxProps"
            }
          ],
          "required": true,
          "type": {
            "name": "ReactElement<TextInputProps, string | JSXElementConstructor<any>>"
          }
        },
        "initialValue": {
          "defaultValue": null,
          "description": "The initial value of the Combobox.",
          "name": "initialValue",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
            "name": "ComboboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
              "name": "ComboboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "clearButtonVariant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the Combobox clear button. The default is a TertiaryButton",
          "name": "clearButtonVariant",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
            "name": "ComboboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
              "name": "ComboboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "showClearButton": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, render the Combobox with a button to clear the text input.",
          "name": "showClearButton",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
            "name": "ComboboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
              "name": "ComboboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "clearButtonAriaLabel": {
          "defaultValue": {
            "value": "`Reset Search Input`"
          },
          "description": "The `aria-label` for the Combobox clear button.",
          "name": "clearButtonAriaLabel",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
            "name": "ComboboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
              "name": "ComboboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "autocompleteItems": {
          "defaultValue": null,
          "description": "The autocomplete items of the Combobox. This array of menu items is shown under the text input.",
          "name": "autocompleteItems",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
            "name": "ComboboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
              "name": "ComboboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactElement<any, string | JSXElementConstructor<any>>[] | ComboBoxMenuItemGroup[]",
            "value": [
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ComboBoxMenuItemGroup[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onChange": {
          "defaultValue": null,
          "description": "The function called when the Combobox text input changes.",
          "name": "onChange",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
            "name": "ComboboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
              "name": "ComboboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((e: ChangeEvent<HTMLInputElement>) => void)",
            "value": [
              {
                "value": "(e: ChangeEvent<HTMLInputElement>) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onFocus": {
          "defaultValue": null,
          "description": "The function called when the Combobox text input focuses.",
          "name": "onFocus",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
            "name": "ComboboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
              "name": "ComboboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "FocusEventHandler<Element>",
            "value": [
              {
                "value": "FocusEventHandler<Element>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onBlur": {
          "defaultValue": null,
          "description": "The function called when the Combobox text input blurs.",
          "name": "onBlur",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
            "name": "ComboboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
              "name": "ComboboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "FocusEventHandler<Element>",
            "value": [
              {
                "value": "FocusEventHandler<Element>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "labelId": {
          "defaultValue": null,
          "description": "The id of the form field.",
          "name": "labelId",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
            "name": "ComboboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
              "name": "ComboboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "getStatusText": {
          "defaultValue": {
            "value": "(listCount: number): string => {\n  return `There ${listCount === 1 ? 'is' : 'are'} ${listCount} suggestion${\n    listCount === 1 ? '' : 's'\n  }.`;\n}"
          },
          "description": "The text for screen readers announcing the autocomplete count",
          "name": "getStatusText",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
            "name": "ComboboxProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Combobox.tsx",
              "name": "ComboboxProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((listCount: number) => string)",
            "value": [
              {
                "value": "(listCount: number) => string",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "Status": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/combobox/lib/Status.tsx",
      "description": "",
      "displayName": "Status",
      "methods": [],
      "props": {
        "ariaLive": {
          "defaultValue": {
            "value": "polite"
          },
          "description": "",
          "name": "ariaLive",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Status.tsx",
            "name": "StatusProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Status.tsx",
              "name": "StatusProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"off\" | \"assertive\" | \"polite\"",
            "value": [
              {
                "value": "\"off\""
              },
              {
                "value": "\"assertive\""
              },
              {
                "value": "\"polite\""
              }
            ]
          }
        },
        "role": {
          "defaultValue": {
            "value": "status"
          },
          "description": "",
          "name": "role",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Status.tsx",
            "name": "StatusProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Status.tsx",
              "name": "StatusProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"marquee\" | \"progressbar\" | \"alert\" | \"log\" | \"status\" | \"timer\"",
            "value": [
              {
                "value": "\"marquee\""
              },
              {
                "value": "\"progressbar\""
              },
              {
                "value": "\"alert\""
              },
              {
                "value": "\"log\""
              },
              {
                "value": "\"status\""
              },
              {
                "value": "\"timer\""
              }
            ]
          }
        },
        "ariaRelevant": {
          "defaultValue": {
            "value": "additions"
          },
          "description": "",
          "name": "ariaRelevant",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Status.tsx",
            "name": "StatusProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Status.tsx",
              "name": "StatusProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"text\" | \"all\" | \"additions\" | \"additions text\" | \"removals\"",
            "value": [
              {
                "value": "\"text\""
              },
              {
                "value": "\"all\""
              },
              {
                "value": "\"additions\""
              },
              {
                "value": "\"additions text\""
              },
              {
                "value": "\"removals\""
              }
            ]
          }
        },
        "ariaAtomic": {
          "defaultValue": null,
          "description": "",
          "name": "ariaAtomic",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Status.tsx",
            "name": "StatusProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Status.tsx",
              "name": "StatusProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "expireMilliseconds": {
          "defaultValue": {
            "value": 500
          },
          "description": "",
          "name": "expireMilliseconds",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Status.tsx",
            "name": "StatusProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Status.tsx",
              "name": "StatusProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "announcementText": {
          "defaultValue": {
            "value": ""
          },
          "description": "",
          "name": "announcementText",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/combobox/lib/Status.tsx",
            "name": "StatusProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/combobox/lib/Status.tsx",
              "name": "StatusProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-labs-react/drawer": {
    "DeprecatedDrawerDirection": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
      "description": "### Deprecated Drawer Direction\n\nAs of Canvas Kit v8, Drawer is being soft-deprecated.\nIt will be hard-deprecated (completely removed) in v9. Please see the\n[upgrade guide](https://workday.github.io/canvas-kit/?path=/story/welcome-upgrade-guides-v8-0--page)\nfor more information.",
      "displayName": "DeprecatedDrawerDirection",
      "methods": [],
      "props": {}
    },
    "DeprecatedDrawer": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
      "description": "### Deprecated Drawer\n\nAs of Canvas Kit v8, this component is being soft-deprecated.\nIt will be hard-deprecated (completely removed) in v9. Please see the\n[upgrade guide](https://workday.github.io/canvas-kit/?path=/story/welcome-upgrade-guides-v8-0--page)\nfor more information.",
      "displayName": "DeprecatedDrawer",
      "methods": [],
      "props": {
        "padding": {
          "defaultValue": {
            "value": "space.s"
          },
          "description": "The padding of the DeprecatedDrawer contents.",
          "name": "padding",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
            "name": "DeprecatedDrawerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
              "name": "DeprecatedDrawerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSpaceValues",
            "value": [
              {
                "value": "\"16px\""
              },
              {
                "value": "\"0px\""
              },
              {
                "value": "\"24px\""
              },
              {
                "value": "\"32px\""
              },
              {
                "value": "\"4px\""
              },
              {
                "value": "\"8px\""
              },
              {
                "value": "\"12px\""
              },
              {
                "value": "\"40px\""
              },
              {
                "value": "\"64px\""
              },
              {
                "value": "\"80px\""
              }
            ]
          }
        },
        "openDirection": {
          "defaultValue": {
            "value": "DeprecatedDrawerDirection.Right"
          },
          "description": "The direction from which the DeprecatedDrawer opens. Accepts `Left` or `Right`.",
          "name": "openDirection",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
            "name": "DeprecatedDrawerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
              "name": "DeprecatedDrawerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "DeprecatedDrawerDirection",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "width": {
          "defaultValue": {
            "value": "360"
          },
          "description": "The width of the DeprecatedDrawer in `px`.",
          "name": "width",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
            "name": "DeprecatedDrawerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
              "name": "DeprecatedDrawerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "showDropShadow": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, render the DeprecatedDrawer with a drop shadow.",
          "name": "showDropShadow",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
            "name": "DeprecatedDrawerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
              "name": "DeprecatedDrawerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "header": {
          "defaultValue": null,
          "description": "The optional DeprecatedDrawerHeader component of the DeprecatedDrawer. Shows an optional string and close button.",
          "name": "header",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
            "name": "DeprecatedDrawerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
              "name": "DeprecatedDrawerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactElement<any, string | JSXElementConstructor<any>>",
            "value": [
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "aria-labelledby": {
          "defaultValue": null,
          "description": "The `aria-labelledby` of the DeprecatedDrawer. Set this when there is a `header` for accessibility. The `role` attribute should also be used when this attribute is present. This value should be the same as the `id` attribute of the `header` element.",
          "name": "aria-labelledby",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
            "name": "DeprecatedDrawerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
              "name": "DeprecatedDrawerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "aria-label": {
          "defaultValue": null,
          "description": "The `aria-label` for the DeprecatedDrawer. Set this when there is NO `header` for accessibility.",
          "name": "aria-label",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
            "name": "DeprecatedDrawerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
              "name": "DeprecatedDrawerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "role": {
          "defaultValue": null,
          "description": "The role of the DeprecatedDrawer. If `role` is provided, you must also set `aria-labelledby` to link `header` to the `role`.",
          "name": "role",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
            "name": "DeprecatedDrawerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
              "name": "DeprecatedDrawerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        }
      }
    },
    "DeprecatedDrawer.OpenDirection": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/drawer/lib/Drawer.tsx",
      "description": "### Deprecated Drawer Direction\n\nAs of Canvas Kit v8, Drawer is being soft-deprecated.\nIt will be hard-deprecated (completely removed) in v9. Please see the\n[upgrade guide](https://workday.github.io/canvas-kit/?path=/story/welcome-upgrade-guides-v8-0--page)\nfor more information.",
      "displayName": "DeprecatedDrawer.OpenDirection",
      "methods": [],
      "props": {}
    },
    "DeprecatedDrawerHeader": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
      "description": "### Deprecated Drawer Header\n\nAs of Canvas Kit v8, this component is being soft-deprecated.\nIt will be hard-deprecated (completely removed) in v9. Please see the\n[upgrade guide](https://workday.github.io/canvas-kit/?path=/story/welcome-upgrade-guides-v8-0--page)\nfor more information.",
      "displayName": "DeprecatedDrawerHeader",
      "methods": [],
      "props": {
        "title": {
          "defaultValue": null,
          "description": "The text of the DeprecatedDrawerHeader. This text will also be applied as the `title` attribute of the header element.",
          "name": "title",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
            "name": "DeprecatedDrawerHeaderProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
              "name": "DeprecatedDrawerHeaderProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "onClose": {
          "defaultValue": null,
          "description": "The function called when the DeprecatedDrawerHeader close button is clicked.",
          "name": "onClose",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
            "name": "DeprecatedDrawerHeaderProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
              "name": "DeprecatedDrawerHeaderProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "MouseEventHandler<HTMLButtonElement>",
            "value": [
              {
                "value": "MouseEventHandler<HTMLButtonElement>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "closeIconAriaLabel": {
          "defaultValue": {
            "value": "Close"
          },
          "description": "The `aria-label` for the DrawHeader close button. Useful for i18n.",
          "name": "closeIconAriaLabel",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
            "name": "DeprecatedDrawerHeaderProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
              "name": "DeprecatedDrawerHeaderProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "headerColor": {
          "defaultValue": null,
          "description": "The background color of the DeprecatedDrawerHeader.",
          "name": "headerColor",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
            "name": "DeprecatedDrawerHeaderProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
              "name": "DeprecatedDrawerHeaderProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "borderColor": {
          "defaultValue": null,
          "description": "The border color of the DeprecatedDrawerHeader. This should match something close to `headerColor`.",
          "name": "borderColor",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
            "name": "DeprecatedDrawerHeaderProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
              "name": "DeprecatedDrawerHeaderProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "inverse": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, render the icon and header in white. Useful for preserving contrast with a dark `headerColor`.",
          "name": "inverse",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
            "name": "DeprecatedDrawerHeaderProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
              "name": "DeprecatedDrawerHeaderProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "id": {
          "defaultValue": null,
          "description": "The unique id of the DeprecatedDrawerHeader for accessibility.",
          "name": "id",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
            "name": "DeprecatedDrawerHeaderProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/drawer/lib/DrawerHeader.tsx",
              "name": "DeprecatedDrawerHeaderProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-labs-react/expandable": {
    "Expandable": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/expandable/lib/Expandable.tsx",
      "description": "",
      "displayName": "Expandable",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The children of the `Expandable` container. This should contain `Expandable.Target` and\n`Expandable.Container`",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/expandable/lib/Expandable.tsx",
            "name": "ExpandableProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/expandable/lib/Expandable.tsx",
              "name": "ExpandableProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "id": {
          "defaultValue": null,
          "description": "ID reference of the list. Children ids can be derived from this id",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "initialVisibility": {
          "defaultValue": {
            "value": "'hidden'"
          },
          "description": "The initial visibility of the disclosed content",
          "name": "initialVisibility",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Visibility",
            "value": [
              {
                "value": "\"hidden\""
              },
              {
                "value": "\"visible\""
              }
            ]
          }
        },
        "onShow": {
          "defaultValue": null,
          "description": "Start showing the disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "onShow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, prevState: { id: string; visibility: \"hidden\" | \"visible\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, prevState: { id: string; visibility: \"hidden\" | \"visible\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onHide": {
          "defaultValue": null,
          "description": "Start hiding this disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "onHide",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, prevState: { id: string; visibility: \"hidden\" | \"visible\"; }) => void) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, prevState: { id: string; visibility: \"hidden\" | \"visible\"; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldShow": {
          "defaultValue": null,
          "description": "Start showing the disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "shouldShow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, state: { id: string; visibility: \"hidden\" | \"visible\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, state: { id: string; visibility: \"hidden\" | \"visible\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldHide": {
          "defaultValue": null,
          "description": "Start hiding this disclosed content. If a DOM event triggered this event, the event data will\nbe passed along. This data can be used by guards and callbacks.",
          "name": "shouldHide",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: Event | SyntheticEvent<Element, Event>, state: { id: string; visibility: \"hidden\" | \"visible\"; }) => boolean) | undefined",
            "value": [
              {
                "value": "(data: Event | SyntheticEvent<Element, Event> | undefined, state: { id: string; visibility: \"hidden\" | \"visible\"; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event>): void; hide(event?: Event | ... 1 more ... | undefined): void; }; } | undefined",
            "value": [
              {
                "value": "{ state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event> | undefined): void; hide(event?: Event | ... 1 more ... | undefined): void; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event>): void; hide(event?: Event | ... 1 more ... | undefined): void; }; }, elemProps: TProps) => any) | undefined",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event> | undefined): void; hide(event?: Event | ... 1 more ... | undefined): void; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ExpandableAvatar": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/expandable/lib/ExpandableAvatar.tsx",
      "description": "",
      "displayName": "ExpandableAvatar",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "TypeLiteral"
            },
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "SystemIconCircleSize.m"
          },
          "description": "The size of the Avatar.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
            "name": "AvatarProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "AvatarProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "variant": {
          "defaultValue": {
            "value": "AvatarVariant.Light"
          },
          "description": "The variant of the Avatar default state. Accepts `Light` or `Dark`.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
            "name": "AvatarProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "AvatarProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "AvatarVariant",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "altText": {
          "defaultValue": {
            "value": "Avatar"
          },
          "description": "The alt text of the Avatar image. This prop is also used for the aria-label",
          "name": "altText",
          "parent": {
            "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
            "name": "AvatarProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "AvatarProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "url": {
          "defaultValue": null,
          "description": "The url of the Avatar image.",
          "name": "url",
          "parent": {
            "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
            "name": "AvatarProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "AvatarProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ExpandableContent": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/expandable/lib/ExpandableContent.tsx",
      "description": "",
      "displayName": "ExpandableContent",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The children of the `Expandable.Content` whose visibility is controlled by the associated\n`Expandable.Target`",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/expandable/lib/ExpandableContent.tsx",
            "name": "ExpandableContentProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/expandable/lib/ExpandableContent.tsx",
              "name": "ExpandableContentProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event>): void; hide(event?: Event | ... 1 more ... | undefined): void; }; } | undefined",
            "value": [
              {
                "value": "{ state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event> | undefined): void; hide(event?: Event | ... 1 more ... | undefined): void; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event>): void; hide(event?: Event | ... 1 more ... | undefined): void; }; }, elemProps: TProps) => any) | undefined",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event> | undefined): void; hide(event?: Event | ... 1 more ... | undefined): void; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ExpandableIcon": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/expandable/lib/ExpandableIcon.tsx",
      "description": "",
      "displayName": "ExpandableIcon",
      "methods": [],
      "props": {
        "icon": {
          "defaultValue": {
            "value": "chevronUpIcon"
          },
          "description": "Icon to display from `@workday/canvas-accent-icons-web`",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/expandable/lib/ExpandableIcon.tsx",
            "name": "ExpandableIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/expandable/lib/ExpandableIcon.tsx",
              "name": "ExpandableIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/expandable/lib/ExpandableIcon.tsx",
            "name": "ExpandableIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/expandable/lib/ExpandableIcon.tsx",
              "name": "ExpandableIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "color": {
          "defaultValue": {
            "value": "iconColors.standard"
          },
          "description": "The color of the SystemIcon. This defines `accent` and `fill`. `color` may be overriden by `accent` and `fill`.",
          "name": "color",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "background": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon.",
          "name": "background",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fill": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon. This overrides `color`.",
          "name": "fill",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "className": {
          "defaultValue": null,
          "description": "",
          "name": "className",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "size": {
          "defaultValue": null,
          "description": "The size of the SystemIcon in `px`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "styles": {
          "defaultValue": null,
          "description": "",
          "name": "styles",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CSSObject",
            "value": [
              {
                "value": "CSSObject",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirror": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the SVG's x-axis to mirror the graphic",
          "name": "shouldMirror",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "backgroundHover": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon on hover.",
          "name": "backgroundHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "colorHover": {
          "defaultValue": {
            "value": "iconColors.hover"
          },
          "description": "The hover color of the SystemIcon. This defines `accentHover` and `fillHover`. `colorHover` may be overriden by `accentHover` and `fillHover`.",
          "name": "colorHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accent": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon. This overrides `color`.",
          "name": "accent",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accentHover": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "accentHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fillHover": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "fillHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event>): void; hide(event?: Event | ... 1 more ... | undefined): void; }; } | undefined",
            "value": [
              {
                "value": "{ state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event> | undefined): void; hide(event?: Event | ... 1 more ... | undefined): void; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event>): void; hide(event?: Event | ... 1 more ... | undefined): void; }; }, elemProps: TProps) => any) | undefined",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event> | undefined): void; hide(event?: Event | ... 1 more ... | undefined): void; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ExpandableTarget": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/expandable/lib/ExpandableTarget.tsx",
      "description": "",
      "displayName": "ExpandableTarget",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "Children of the `Expandable.Target`. Should contain `Target.Title`, an optional `Target.Avatar`\nand `Target.Icon` with an `iconPosition` prop that takes a value of either `start` or `end`.\n`Target.Icon` with `start` is meant to be placed before the `Target.Title` and `Target.Icon`\n`end` should be placed after.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/expandable/lib/ExpandableTarget.tsx",
            "name": "ExpandableTargetProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/expandable/lib/ExpandableTarget.tsx",
              "name": "ExpandableTargetProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "headingLevel": {
          "defaultValue": null,
          "description": "This specifies the semantic heading level that will wrap the `Expandable.Target`'s button. If not\ndefined, then nothing will wrap the button.",
          "name": "headingLevel",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/expandable/lib/ExpandableTarget.tsx",
            "name": "ExpandableTargetProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/expandable/lib/ExpandableTarget.tsx",
              "name": "ExpandableTargetProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
            "value": [
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event>): void; hide(event?: Event | ... 1 more ... | undefined): void; }; } | undefined",
            "value": [
              {
                "value": "{ state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event> | undefined): void; hide(event?: Event | ... 1 more ... | undefined): void; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event>): void; hide(event?: Event | ... 1 more ... | undefined): void; }; }, elemProps: TProps) => any) | undefined",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; visibility: \"hidden\" | \"visible\"; }; events: { show(event?: Event | SyntheticEvent<Element, Event> | undefined): void; hide(event?: Event | ... 1 more ... | undefined): void; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ExpandableTitle": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/expandable/lib/ExpandableTitle.tsx",
      "description": "",
      "displayName": "ExpandableTitle",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "Children of the `Expandable.Title`. This should contain a string for the title",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/expandable/lib/ExpandableTitle.tsx",
            "name": "ExpandableTitleProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/expandable/lib/ExpandableTitle.tsx",
              "name": "ExpandableTitleProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-labs-react/search-form": {
    "SearchForm": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
      "description": "",
      "displayName": "SearchForm",
      "methods": [],
      "props": {
        "onSubmit": {
          "defaultValue": null,
          "description": "The function called when the SearchForm form is submitted. The current input value is passed to the callback function.",
          "name": "onSubmit",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": true,
          "type": {
            "name": "FormEventHandler<HTMLFormElement>"
          }
        },
        "isCollapsed": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, collapse the SearchForm text input into a toggle icon. Useful for responsive layouts.",
          "name": "isCollapsed",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "onInputChange": {
          "defaultValue": null,
          "description": "The function called when the SearchForm text input changes.",
          "name": "onInputChange",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ChangeEventHandler<HTMLInputElement>",
            "value": [
              {
                "value": "ChangeEventHandler<HTMLInputElement>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "autocompleteItems": {
          "defaultValue": null,
          "description": "The autocomplete items of the SearchForm. This array of menu items is shown under the search bar.",
          "name": "autocompleteItems",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactElement<any, string | JSXElementConstructor<any>>[]",
            "value": [
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "searchTheme": {
          "defaultValue": null,
          "description": "The theme of the header the search input is being rendered in.",
          "name": "searchTheme",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SearchTheme | SearchThemeAttributes",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "2",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "SearchThemeAttributes",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "placeholder": {
          "defaultValue": {
            "value": "Search"
          },
          "description": "The placeholder text of the SearchForm text input.",
          "name": "placeholder",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "initialValue": {
          "defaultValue": null,
          "description": "The initial value of the SearchForm text input.",
          "name": "initialValue",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "rightAlign": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, right-align the SearchForm. If false, the text input should grow to left-align the SearchForm.",
          "name": "rightAlign",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "inputLabel": {
          "defaultValue": {
            "value": "Search"
          },
          "description": "The screenreader label text for the SearchForm text input.",
          "name": "inputLabel",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "submitAriaLabel": {
          "defaultValue": {
            "value": "Search"
          },
          "description": "The screenreader label text for the SearchForm submit button.",
          "name": "submitAriaLabel",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "clearButtonAriaLabel": {
          "defaultValue": {
            "value": "Reset Search Form"
          },
          "description": "The screenreader label text for the SearchForm clear button.",
          "name": "clearButtonAriaLabel",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "openButtonAriaLabel": {
          "defaultValue": {
            "value": "Open Search"
          },
          "description": "The screenreader label text for the button to open the collapsed SearchForm.",
          "name": "openButtonAriaLabel",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "closeButtonAriaLabel": {
          "defaultValue": {
            "value": "Cancel"
          },
          "description": "The screenreader label text for the button to close the open SearchForm.",
          "name": "closeButtonAriaLabel",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "showClearButton": {
          "defaultValue": {
            "value": "true"
          },
          "description": "If true, render the SearchForm with a button to clear the text input.",
          "name": "showClearButton",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "height": {
          "defaultValue": {
            "value": "40"
          },
          "description": "Height of the Search Form in pixels",
          "name": "height",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "allowEmptyStringSearch": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, allow onSubmit being called when input value is empty.",
          "name": "allowEmptyStringSearch",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
            "name": "SearchFormProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/search-form/lib/SearchForm.tsx",
              "name": "SearchFormProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-labs-react/toast": {
    "Toast": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/toast/lib/Toast.tsx",
      "description": "",
      "displayName": "Toast",
      "methods": [],
      "props": {
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            },
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) & ...",
            "value": [
              {
                "value": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) & (..."
              }
            ]
          }
        },
        "children": {
          "defaultValue": null,
          "description": "Children of the Card. Should contain a `<Card.Body>` and an optional `<Card.Heading>`",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/react/popup/lib/PopupCard.tsx",
            "name": "PopupCardProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/popup/lib/PopupCard.tsx",
              "name": "PopupCardProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "mode": {
          "defaultValue": {
            "value": "'status'"
          },
          "description": "Sets the correct aria attributes for the Toast.\nAlert toasts are used to convey urgency and important information. The `role` is set to `alert`\nStatus toasts are used to convey a message or a successful action. The `role` is set to `status`\nDialog toasts are used when there's an action to be taken. The `role` is set to `dialog`",
          "name": "mode",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "AriaRoleMode",
            "value": [
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"alert\""
              },
              {
                "value": "\"status\""
              }
            ]
          }
        },
        "id": {
          "defaultValue": null,
          "description": "When the Toast has a `mode=\"dialog\"` this adds a unique id to type the `Toast.Message` to the dialog.",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; mode: AriaRoleMode; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; mode: AriaRoleMode; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ToastBody": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/toast/lib/ToastBody.tsx",
      "description": "",
      "displayName": "ToastBody",
      "methods": [],
      "props": {
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ToastCloseIcon": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/toast/lib/ToastCloseIcon.tsx",
      "description": "",
      "displayName": "ToastCloseIcon",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the TertiaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are three button sizes: `extraSmall`, `small`, and `medium`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; } | undefined",
            "value": [
              {
                "value": "{ state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any>; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any) | u...",
            "value": [
              {
                "value": "<TProps>(model: { state: { stackRef: RefObject<HTMLDivElement>; targetRef: RefObject<HTMLButtonElement>; initialFocusRef: RefObject<any> | undefined; returnFocusRef: RefObject<...> | undefined; placement: Placement; id: string; visibility: \"hidden\" | \"visible\"; }; events: { ...; }; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ToastIcon": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/toast/lib/ToastIcon.tsx",
      "description": "",
      "displayName": "ToastIcon",
      "methods": [],
      "props": {
        "color": {
          "defaultValue": {
            "value": "iconColors.standard"
          },
          "description": "The color of the SystemIcon. This defines `accent` and `fill`. `color` may be overriden by `accent` and `fill`.",
          "name": "color",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "background": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon.",
          "name": "background",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fill": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon. This overrides `color`.",
          "name": "fill",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "className": {
          "defaultValue": null,
          "description": "",
          "name": "className",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "size": {
          "defaultValue": null,
          "description": "The size of the SystemIcon in `px`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon to display from `@workday/canvas-system-icons-web`.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": true,
          "type": {
            "name": "CanvasSystemIcon"
          }
        },
        "styles": {
          "defaultValue": null,
          "description": "",
          "name": "styles",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CSSObject",
            "value": [
              {
                "value": "CSSObject",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirror": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the SVG's x-axis to mirror the graphic",
          "name": "shouldMirror",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "backgroundHover": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon on hover.",
          "name": "backgroundHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accent": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon. This overrides `color`.",
          "name": "accent",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accentHover": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "accentHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fillHover": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "fillHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ToastLink": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/toast/lib/ToastLink.tsx",
      "description": "",
      "displayName": "ToastLink",
      "methods": [],
      "props": {
        "href": {
          "defaultValue": null,
          "description": "attribute for the hyperlink URL",
          "name": "href",
          "parent": {
            "fileName": "canvas-kit/modules/labs-react/toast/lib/ToastLink.tsx",
            "name": "ToastLinkProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/labs-react/toast/lib/ToastLink.tsx",
              "name": "ToastLinkProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "variant": {
          "defaultValue": null,
          "description": "sets modifier styles for Hyperlink\n- `inverse`: sets the color to frenchVanilla100 and updates hover, focus, and active pseudo-classes",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/Hyperlink.tsx",
            "name": "HyperlinkProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/Hyperlink.tsx",
              "name": "HyperlinkProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "ToastMessage": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/labs-react/toast/lib/ToastMessage.tsx",
      "description": "",
      "displayName": "ToastMessage",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; mode: AriaRoleMode; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; mode: AriaRoleMode; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; mode: AriaRoleMode; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; mode: AriaRoleMode; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-preview-react/color-picker": {
    "ColorPicker": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
      "description": "",
      "displayName": "ColorPicker",
      "methods": [],
      "props": {
        "onColorChange": {
          "defaultValue": null,
          "description": "The function called when the ColorPicker state changes.",
          "name": "onColorChange",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
            "name": "ColorPickerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
              "name": "ColorPickerProps"
            }
          ],
          "required": true,
          "type": {
            "name": "(color: string) => void"
          }
        },
        "value": {
          "defaultValue": {
            "value": ""
          },
          "description": "The value of the ColorPicker.",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
            "name": "ColorPickerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
              "name": "ColorPickerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "colorSet": {
          "defaultValue": {
            "value": "[\n  colors.blueberry600,\n  colors.grapeSoda600,\n  colors.pomegranate600,\n  colors.cinnamon600,\n  colors.cantaloupe600,\n  colors.sourLemon600,\n  colors.greenApple600,\n  colors.jewel600,\n\n  colors.blueberry500,\n  colors.grapeSoda500,\n  colors.pomegranate500,\n  colors.cinnamon500,\n  colors.cantaloupe500,\n  colors.sourLemon500,\n  colors.greenApple500,\n  colors.jewel500,\n\n  colors.blueberry400,\n  colors.grapeSoda400,\n  colors.pomegranate400,\n  colors.cinnamon400,\n  colors.cantaloupe400,\n  colors.sourLemon400,\n  colors.greenApple400,\n  colors.jewel400,\n\n  colors.blueberry300,\n  colors.grapeSoda300,\n  colors.pomegranate300,\n  colors.cinnamon300,\n  colors.cantaloupe300,\n  colors.sourLemon300,\n  colors.greenApple300,\n  colors.jewel300,\n\n  colors.blueberry200,\n  colors.grapeSoda200,\n  colors.pomegranate200,\n  colors.cinnamon200,\n  colors.cantaloupe200,\n  colors.sourLemon200,\n  colors.greenApple200,\n  colors.jewel200,\n\n  colors.blueberry100,\n  colors.grapeSoda100,\n  colors.pomegranate100,\n  colors.cinnamon100,\n  colors.cantaloupe100,\n  colors.sourLemon100,\n  colors.greenApple100,\n  colors.jewel100,\n\n  colors.blackPepper600,\n  colors.blackPepper400,\n  colors.blackPepper300,\n  colors.blackPepper100,\n  colors.frenchVanilla500,\n  colors.frenchVanilla400,\n  colors.frenchVanilla200,\n  colors.frenchVanilla100,\n]"
          },
          "description": "The array of colors to be rendered in the swatchbook.",
          "name": "colorSet",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
            "name": "ColorPickerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
              "name": "ColorPickerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "showCustomHexInput": {
          "defaultValue": {
            "value": false
          },
          "description": "If true, render an input for entering a custom hex color.",
          "name": "showCustomHexInput",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
            "name": "ColorPickerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
              "name": "ColorPickerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "customHexInputLabel": {
          "defaultValue": {
            "value": "Custom Hex Color"
          },
          "description": "The label text of the custom hex input.",
          "name": "customHexInputLabel",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
            "name": "ColorPickerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
              "name": "ColorPickerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "submitLabel": {
          "defaultValue": {
            "value": "Submit"
          },
          "description": "The label of the custom hex color submit icon button.",
          "name": "submitLabel",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
            "name": "ColorPickerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
              "name": "ColorPickerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "onSubmitClick": {
          "defaultValue": null,
          "description": "The function called when the submit icon is clicked.",
          "name": "onSubmitClick",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
            "name": "ColorPickerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
              "name": "ColorPickerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((event: FormEvent<Element>) => void)",
            "value": [
              {
                "value": "(event: FormEvent<Element>) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onColorReset": {
          "defaultValue": null,
          "description": "The function called when the color rest button is selected.\nIt is required to be set for the reset button to render.",
          "name": "onColorReset",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
            "name": "ColorPickerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
              "name": "ColorPickerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((color: string) => void)",
            "value": [
              {
                "value": "(color: string) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "resetColor": {
          "defaultValue": null,
          "description": "The color that the reset button resets to.\nIt is required to be set for the reset button to render.",
          "name": "resetColor",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
            "name": "ColorPickerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
              "name": "ColorPickerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "resetLabel": {
          "defaultValue": {
            "value": "Reset"
          },
          "description": "The label text of the reset button.",
          "name": "resetLabel",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
            "name": "ColorPickerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/ColorPicker.tsx",
              "name": "ColorPickerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        }
      }
    },
    "ResetButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/color-picker/lib/parts/ColorReset.tsx",
      "description": "",
      "displayName": "ResetButton",
      "methods": [],
      "props": {
        "label": {
          "defaultValue": null,
          "description": "",
          "name": "label",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/parts/ColorReset.tsx",
            "name": "ResetButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/parts/ColorReset.tsx",
              "name": "ResetButtonProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "resetColor": {
          "defaultValue": null,
          "description": "",
          "name": "resetColor",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/parts/ColorReset.tsx",
            "name": "ResetButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/parts/ColorReset.tsx",
              "name": "ResetButtonProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "onClick": {
          "defaultValue": null,
          "description": "",
          "name": "onClick",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/parts/ColorReset.tsx",
            "name": "ResetButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/parts/ColorReset.tsx",
              "name": "ResetButtonProps"
            }
          ],
          "required": true,
          "type": {
            "name": "(color: string) => void"
          }
        }
      }
    },
    "SwatchBook": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/color-picker/lib/parts/SwatchBook.tsx",
      "description": "",
      "displayName": "SwatchBook",
      "methods": [],
      "props": {
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/parts/SwatchBook.tsx",
            "name": "SwatchBookProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/parts/SwatchBook.tsx",
              "name": "SwatchBookProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string[]"
          }
        },
        "value": {
          "defaultValue": null,
          "description": "",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/parts/SwatchBook.tsx",
            "name": "SwatchBookProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/parts/SwatchBook.tsx",
              "name": "SwatchBookProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "onSelect": {
          "defaultValue": null,
          "description": "",
          "name": "onSelect",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/color-picker/lib/parts/SwatchBook.tsx",
            "name": "SwatchBookProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/color-picker/lib/parts/SwatchBook.tsx",
              "name": "SwatchBookProps"
            }
          ],
          "required": true,
          "type": {
            "name": "(color: string) => void"
          }
        }
      }
    }
  },
  "@workday/canvas-kit-preview-react/form-field": {
    "FormField": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
      "description": "",
      "displayName": "FormField",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "Children of the Text Input. Should contain a `<FormField.Input>`, a `<FormField.Label>` and an optional `<FormField.Hint>`",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "orientation": {
          "defaultValue": null,
          "description": "The direction the child elements should stack",
          "name": "orientation",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "\"vertical\" | \"horizontal\"",
            "value": [
              {
                "value": "\"vertical\""
              },
              {
                "value": "\"horizontal\""
              }
            ]
          }
        },
        "spacing": {
          "defaultValue": {
            "value": "xxxs when vertical l when orientation is horizontal"
          },
          "description": "Spacing between children elements",
          "name": "spacing",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number | (string & {}) | keyof CanvasSpace",
            "value": [
              {
                "value": "number"
              },
              {
                "value": "\"s\""
              },
              {
                "value": "string & {}"
              },
              {
                "value": "\"zero\""
              },
              {
                "value": "\"m\""
              },
              {
                "value": "\"l\""
              },
              {
                "value": "\"xxxs\""
              },
              {
                "value": "\"xxs\""
              },
              {
                "value": "\"xs\""
              },
              {
                "value": "\"xl\""
              },
              {
                "value": "\"xxl\""
              },
              {
                "value": "\"xxxl\""
              }
            ]
          }
        },
        "hasError": {
          "defaultValue": {
            "value": "false"
          },
          "description": "Optional flag to denote if this field has an error to display. When true the `FormField.Input` will have\n`required` set to true, and usually some subcomponents will have a error color applied.",
          "name": "hasError",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "id": {
          "defaultValue": {
            "value": "`useUniqueId()`"
          },
          "description": "Optional `id` provided to `FormField`'s subcomponents as HTML attributes:\n- `FormField.Input` will set `aria-describedby` to `hint-${id}`\n- `FormField.Input` will set `id` to `input-${id}`\n- `FormField.Label` will set `htmlFor` to `input-${id}`\n- `FormField.Hint` will set `id` to `hint-${id}`\n\nIf a value is not provided, a unique id will be automatically created by `useUniqueId()`.",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "isRequired": {
          "defaultValue": {
            "value": "false"
          },
          "description": "Optional flag to denote if this field is required. When true the `FormField.Input` will have\n`required` set to true, and an asterisk will be appended to the `FormField.Label`.",
          "name": "isRequired",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "FormFieldHint": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/form-field/lib/FormFieldHint.tsx",
      "description": "",
      "displayName": "FormFieldHint",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": null,
          "description": "Type variant token names: `error`, `hint` or `inverse`.\n@example ```tsx\n<Text variant=\"error\" typeLevel=\"subtext.large\">Error text</Text>\n```",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
            "name": "TextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
              "name": "TextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "keyof CanvasTypeVariants",
            "value": [
              {
                "value": "\"inverse\""
              },
              {
                "value": "\"error\""
              },
              {
                "value": "\"hint\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "FormFieldInput": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/form-field/lib/FormFieldInput.tsx",
      "description": "",
      "displayName": "FormFieldInput",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "FormFieldLabel": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/form-field/lib/FormFieldLabel.tsx",
      "description": "",
      "displayName": "FormFieldLabel",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The text of the label.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormFieldLabel.tsx",
            "name": "FormFieldLabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormFieldLabel.tsx",
              "name": "FormFieldLabelProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "spacing": {
          "defaultValue": {
            "value": "xxxs"
          },
          "description": "When the input is required, this is spacing between label and asterisk.",
          "name": "spacing",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormFieldLabel.tsx",
            "name": "FormFieldLabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormFieldLabel.tsx",
              "name": "FormFieldLabelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number | (string & {}) | keyof CanvasSpace",
            "value": [
              {
                "value": "number"
              },
              {
                "value": "\"s\""
              },
              {
                "value": "string & {}"
              },
              {
                "value": "\"zero\""
              },
              {
                "value": "\"m\""
              },
              {
                "value": "\"l\""
              },
              {
                "value": "\"xxxs\""
              },
              {
                "value": "\"xxs\""
              },
              {
                "value": "\"xs\""
              },
              {
                "value": "\"xl\""
              },
              {
                "value": "\"xxl\""
              },
              {
                "value": "\"xxxl\""
              }
            ]
          }
        },
        "flexDirection": {
          "defaultValue": {
            "value": "\"row\""
          },
          "description": "sets the direction for the stack",
          "name": "flexDirection",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
            "name": "HStackProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
              "name": "HStackProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"row\" | \"row-reverse\"",
            "value": [
              {
                "value": "\"row\""
              },
              {
                "value": "\"row-reverse\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-preview-react/menu": {
    "DeprecatedMenu": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
      "description": "### Deprecated Menu\n\nAs of Canvas Kit v8, this component is being soft-deprecated.\nIt will be hard-deprecated (completely removed) in v9. Please see the\n[upgrade guide](https://workday.github.io/canvas-kit/?path=/story/welcome-upgrade-guides-v8-0--page)\nfor more information.",
      "displayName": "DeprecatedMenu",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "The DeprecatedMenuItem children of the DeprecatedMenu (must be at least one). Also accepts other components which share the same interface as `DeprecatedMenuItem`.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
            "name": "DeprecatedMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
              "name": "DeprecatedMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactElement<DeprecatedMenuItemProps, string | JSXElementConstructor<any>> | ReactElement<DeprecatedMenuItemProps, string | JSXElementConstructor<...>>[]",
            "value": [
              {
                "value": "ReactElement<DeprecatedMenuItemProps, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactElement<DeprecatedMenuItemProps, string | JSXElementConstructor<any>>[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "isOpen": {
          "defaultValue": {
            "value": "true"
          },
          "description": "If true, set the DeprecatedMenu to the open state. Useful for showing and hiding the DeprecatedMenu from a parent component such as a menu button.",
          "name": "isOpen",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
            "name": "DeprecatedMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
              "name": "DeprecatedMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "width": {
          "defaultValue": null,
          "description": "The width of the DeprecatedMenu. If no value is provided, the DeprecatedMenu will collapse around its content.",
          "name": "width",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
            "name": "DeprecatedMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
              "name": "DeprecatedMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "onSelect": {
          "defaultValue": null,
          "description": "The function called when a menu item is selected.",
          "name": "onSelect",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
            "name": "DeprecatedMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
              "name": "DeprecatedMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(() => void)",
            "value": [
              {
                "value": "() => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onClose": {
          "defaultValue": null,
          "description": "The function called when the DeprecatedMenu should close. This is called after a menu item is selected or if the escape shortcut key is used. This will not fire if the menu item sets `shouldClose` to false.",
          "name": "onClose",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
            "name": "DeprecatedMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
              "name": "DeprecatedMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(() => void)",
            "value": [
              {
                "value": "() => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "initialSelectedItem": {
          "defaultValue": null,
          "description": "The zero-based index of the menu item which should initially receive focus.",
          "name": "initialSelectedItem",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
            "name": "DeprecatedMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
              "name": "DeprecatedMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "id": {
          "defaultValue": null,
          "description": "The unique id of the DeprecatedMenu used for ARIA and HTML `id` attributes.",
          "name": "id",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
            "name": "DeprecatedMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
              "name": "DeprecatedMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "aria-labelledby": {
          "defaultValue": null,
          "description": "The HTML `id` of the element that labels the DeprecatedMenu. Often used with menu buttons.",
          "name": "aria-labelledby",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
            "name": "DeprecatedMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/Menu.tsx",
              "name": "DeprecatedMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "DeprecatedMenuItem": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
      "description": "### Deprecated Menu Item\n\nAs of Canvas Kit v8, Menu is being soft-deprecated.\nIt will be hard-deprecated (completely removed) in v9. Please see the\n[upgrade guide](https://workday.github.io/canvas-kit/?path=/story/welcome-upgrade-guides-v8-0--page)\nfor more information.",
      "displayName": "DeprecatedMenuItem",
      "methods": [],
      "props": {
        "onClick": {
          "defaultValue": null,
          "description": "The function called when the DeprecatedMenuItem is clicked. If the item is a child of the DeprecatedMenu component, this callback will be decorated with the onSelect and onClose DeprecatedMenu callbacks. This callback will not fire if the item is disabled (see below).",
          "name": "onClick",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
            "name": "DeprecatedMenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
              "name": "DeprecatedMenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((event: MouseEvent<Element, MouseEvent>) => void)",
            "value": [
              {
                "value": "(event: MouseEvent<Element, MouseEvent>) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "id": {
          "defaultValue": null,
          "description": "The unique id for the DeprecatedMenuItem used for ARIA attributes. If the item is a child of the `DeprecatedMenu` component, this property will be generated and overridden.",
          "name": "id",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
            "name": "DeprecatedMenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
              "name": "DeprecatedMenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the DeprecatedMenuItem. This icon is displayed before what you supplied for the children.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
            "name": "DeprecatedMenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
              "name": "DeprecatedMenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "secondaryIcon": {
          "defaultValue": null,
          "description": "The secondary icon of the DeprecatedMenuItem. This icon is displayed after what you supplied for the children.",
          "name": "secondaryIcon",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
            "name": "DeprecatedMenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
              "name": "DeprecatedMenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "hasDivider": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, render a top border on the DeprecatedMenuItem.",
          "name": "hasDivider",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
            "name": "DeprecatedMenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
              "name": "DeprecatedMenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isHeader": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, render a header to group data, this menu item will not be intractable.",
          "name": "isHeader",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
            "name": "DeprecatedMenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
              "name": "DeprecatedMenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isDisabled": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the DeprecatedMenuItem to the disabled state so it is not clickable.",
          "name": "isDisabled",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
            "name": "DeprecatedMenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
              "name": "DeprecatedMenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isFocused": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If true, set the DeprecatedMenuItem to be the currently selected item. If the item is a child of the DeprecatedMenu component, this property will be generated and overridden.",
          "name": "isFocused",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
            "name": "DeprecatedMenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
              "name": "DeprecatedMenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "role": {
          "defaultValue": {
            "value": "menuitem"
          },
          "description": "The role of the DeprecatedMenuItem. Use this to override the role of the item (e.g. you can use this element as an option in a Combobox).",
          "name": "role",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
            "name": "DeprecatedMenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
              "name": "DeprecatedMenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "shouldClose": {
          "defaultValue": {
            "value": true
          },
          "description": "If true, allow the onClose DeprecatedMenu callback to be fired after the DeprecatedMenuItem has been clicked.",
          "name": "shouldClose",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
            "name": "DeprecatedMenuItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/menu/lib/MenuItem.tsx",
              "name": "DeprecatedMenuItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-preview-react/pill": {
    "Pill": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/pill/lib/Pill.tsx",
      "description": "",
      "displayName": "Pill",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "'default'"
          },
          "description": "Defines what kind of pill to render stylistically and its interaction states",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/pill/lib/Pill.tsx",
            "name": "PillProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/pill/lib/Pill.tsx",
              "name": "PillProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"default\" | \"readOnly\" | \"removable\"",
            "value": [
              {
                "value": "\"default\""
              },
              {
                "value": "\"readOnly\""
              },
              {
                "value": "\"removable\""
              }
            ]
          }
        },
        "disabled": {
          "defaultValue": null,
          "description": "Use to disable a pill.",
          "name": "disabled",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "id": {
          "defaultValue": {
            "value": "`useUniqueId()`"
          },
          "description": "ID used to add accessibility labels to pill elements.",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "PillAvatar": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/pill/lib/PillAvatar.tsx",
      "description": "",
      "displayName": "PillAvatar",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "AvatarVariant.Light"
          },
          "description": "The variant of the Avatar default state. Accepts `Light` or `Dark`.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
            "name": "AvatarProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "AvatarProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "AvatarVariant",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "SystemIconCircleSize.m"
          },
          "description": "The size of the Avatar.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
            "name": "AvatarProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "AvatarProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "altText": {
          "defaultValue": {
            "value": "Avatar"
          },
          "description": "The alt text of the Avatar image. This prop is also used for the aria-label",
          "name": "altText",
          "parent": {
            "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
            "name": "AvatarProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "AvatarProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "url": {
          "defaultValue": null,
          "description": "The url of the Avatar image.",
          "name": "url",
          "parent": {
            "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
            "name": "AvatarProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "AvatarProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "The alternative container type for the button. Uses Emotion's special `as` prop.\nWill render an `div` tag instead of a `button` when defined.\nOptional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "parent": {
            "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
            "name": "AvatarProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/avatar/lib/Avatar.tsx",
              "name": "AvatarProps"
            },
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"div\""
              },
              {
                "value": "\"div\" & ComponentClass<any, any>"
              },
              {
                "value": "\"div\" & FunctionComponent<any>"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "PillCount": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/pill/lib/PillCount.tsx",
      "description": "",
      "displayName": "PillCount",
      "methods": [],
      "props": {
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "PillIcon": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/pill/lib/PillIcon.tsx",
      "description": "",
      "displayName": "PillIcon",
      "methods": [],
      "props": {
        "icon": {
          "defaultValue": {
            "value": "`plusIcon`"
          },
          "description": "The system icon rendered by the component",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/pill/lib/PillIcon.tsx",
            "name": "PillIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/pill/lib/PillIcon.tsx",
              "name": "PillIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "color": {
          "defaultValue": {
            "value": "iconColors.standard"
          },
          "description": "The color of the SystemIcon. This defines `accent` and `fill`. `color` may be overriden by `accent` and `fill`.",
          "name": "color",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "background": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon.",
          "name": "background",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fill": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon. This overrides `color`.",
          "name": "fill",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "className": {
          "defaultValue": null,
          "description": "",
          "name": "className",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "size": {
          "defaultValue": null,
          "description": "The size of the SystemIcon in `px`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "styles": {
          "defaultValue": null,
          "description": "",
          "name": "styles",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CSSObject",
            "value": [
              {
                "value": "CSSObject",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirror": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the SVG's x-axis to mirror the graphic",
          "name": "shouldMirror",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "backgroundHover": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon on hover.",
          "name": "backgroundHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "colorHover": {
          "defaultValue": {
            "value": "iconColors.hover"
          },
          "description": "The hover color of the SystemIcon. This defines `accentHover` and `fillHover`. `colorHover` may be overriden by `accentHover` and `fillHover`.",
          "name": "colorHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accent": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon. This overrides `color`.",
          "name": "accent",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accentHover": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "accentHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fillHover": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "fillHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "PillIconButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/pill/lib/PillIconButton.tsx",
      "description": "",
      "displayName": "PillIconButton",
      "methods": [],
      "props": {
        "icon": {
          "defaultValue": {
            "value": "`xSmallIcon`"
          },
          "description": "The system icon rendered by the button",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/pill/lib/PillIconButton.tsx",
            "name": "PillIconButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/pill/lib/PillIconButton.tsx",
              "name": "PillIconButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "aria-label": {
          "defaultValue": {
            "value": "'remove'"
          },
          "description": "The aria label for the removable icon",
          "name": "aria-label",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/pill/lib/PillIconButton.tsx",
            "name": "PillIconButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/pill/lib/PillIconButton.tsx",
              "name": "PillIconButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "color": {
          "defaultValue": {
            "value": "iconColors.standard"
          },
          "description": "The color of the SystemIcon. This defines `accent` and `fill`. `color` may be overriden by `accent` and `fill`.",
          "name": "color",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "background": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon.",
          "name": "background",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fill": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon. This overrides `color`.",
          "name": "fill",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "className": {
          "defaultValue": null,
          "description": "",
          "name": "className",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "size": {
          "defaultValue": null,
          "description": "The size of the SystemIcon in `px`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "styles": {
          "defaultValue": null,
          "description": "",
          "name": "styles",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CSSObject",
            "value": [
              {
                "value": "CSSObject",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirror": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the SVG's x-axis to mirror the graphic",
          "name": "shouldMirror",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "backgroundHover": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon on hover.",
          "name": "backgroundHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "colorHover": {
          "defaultValue": {
            "value": "iconColors.hover"
          },
          "description": "The hover color of the SystemIcon. This defines `accentHover` and `fillHover`. `colorHover` may be overriden by `accentHover` and `fillHover`.",
          "name": "colorHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accent": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon. This overrides `color`.",
          "name": "accent",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accentHover": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "accentHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fillHover": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "fillHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "PillLabel": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/pill/lib/PillLabel.tsx",
      "description": "",
      "displayName": "PillLabel",
      "methods": [],
      "props": {
        "tooltipProps": {
          "defaultValue": null,
          "description": "",
          "name": "tooltipProps",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/pill/lib/PillLabel.tsx",
            "name": "PillLabelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/pill/lib/PillLabel.tsx",
              "name": "PillLabelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Omit<OverflowTooltipProps, \"children\">",
            "value": [
              {
                "value": "Omit<OverflowTooltipProps, \"children\">",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; maxWidth: string | number; disabled: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-preview-react/segmented-control": {
    "SegmentedControl": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControl.tsx",
      "description": "",
      "displayName": "SegmentedControl",
      "methods": [],
      "props": {
        "id": {
          "defaultValue": {
            "value": "useUniqueId()"
          },
          "description": "Optional id for the whole `SegmentedControl` group. If not provided, a unique id will be created.",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "initialValue": {
          "defaultValue": null,
          "description": "An initially selected value. This value must match the `data-id` of the `SegmentedControl.Item` component.\nIf not provided, the first value will be selected.",
          "name": "initialValue",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "disabled": {
          "defaultValue": {
            "value": "false"
          },
          "description": "Sets disabled state for all segmented control buttons",
          "name": "disabled",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "Sets the size of the segmented control container and its buttons. Can be `small`, `medium` or `large`.",
          "name": "size",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"small\" | \"medium\" | \"large\"",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "orientation": {
          "defaultValue": {
            "value": "'horizontal'"
          },
          "description": "The SegmentedControl can rendered in a horizontal or vertical orientation.\nWe suggest to use the `vertical` orientation only for icon only variant.",
          "name": "orientation",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Orientation",
            "value": [
              {
                "value": "\"vertical\""
              },
              {
                "value": "\"horizontal\""
              }
            ]
          }
        },
        "initialSelectedIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialSelectedIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SelectedIds",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "\"all\""
              }
            ]
          }
        },
        "initialUnselectedIds": {
          "defaultValue": null,
          "description": "",
          "name": "initialUnselectedIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "selection": {
          "defaultValue": null,
          "description": "",
          "name": "selection",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SelectionManager",
            "value": [
              {
                "value": "SelectionManager",
                "description": "A SelectionManager is used",
                "fullComment": "A SelectionManager is used",
                "tags": {}
              }
            ]
          }
        },
        "initialCursorId": {
          "defaultValue": null,
          "description": "Initial cursor position. If not provided, the cursor will point to the first item in the list",
          "name": "initialCursorId",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "columnCount": {
          "defaultValue": {
            "value": "0"
          },
          "description": "If this is set it will cause a wrapping of a list that will turn it into a grid",
          "name": "columnCount",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "navigation": {
          "defaultValue": null,
          "description": "Controls the state changes when the user sends navigation events to the model. For example,\nwhen the user hits the \"right\" arrow, a behavior hook will determine directionality\n(left-to-right or right-to-left) and call the correct navigation method. In our example, a\nleft-to-right language would send a `getNext`. The navigation manager may return the next item\nin the list. Different managers can be created for slightly different use cases. The default\nnavigation manager will accept `orientation` and directionality to determine mapping.\n\nAn example override might be a tab list with an overflow menu that is meant to be transparent\nto screen reader users. This would require the overflow menu to accept both up/down keys as\nwell as left/right keys to give a more consistent experience to all users.",
          "name": "navigation",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "NavigationManager",
            "value": [
              {
                "value": "NavigationManager",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "getId": {
          "defaultValue": null,
          "description": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
          "name": "getId",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((item: any) => string)",
            "value": [
              {
                "value": "(item: any) => string",
                "description": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
                "fullComment": "Optional function to return an id of an item. If not provided, the default function will return\nthe `id` property from the object of each item. If you did not provide `items`, do not override\nthis function. If you don't provided `items` and instead provide static items via JSX, the list\nwill create an internal array of items where `id` is the only property and the default `getId`\nwill return the desired result.",
                "tags": {}
              }
            ]
          }
        },
        "getTextValue": {
          "defaultValue": null,
          "description": "",
          "name": "getTextValue",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((item: any) => string)",
            "value": [
              {
                "value": "(item: any) => string",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "nonInteractiveIds": {
          "defaultValue": null,
          "description": "Array of all ids which are currently disabled. This is used for navigation to skip over items\nwhich are not focusable.",
          "name": "nonInteractiveIds",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string[]",
            "value": [
              {
                "value": "string[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "defaultItemHeight": {
          "defaultValue": {
            "value": "50"
          },
          "description": "Best guess to the default item height for virtualization. Getting this number correct\navoids a rerender while the list is initializing.",
          "name": "defaultItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "shouldVirtualize": {
          "defaultValue": null,
          "description": "",
          "name": "shouldVirtualize",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "items": {
          "defaultValue": null,
          "description": "Optional array of items. If provided, use a render prop for list children instead of static\nchildren. If the shape of each item object does not have an `id` property or uses a different\nproperty to uniquely identify each item, a `getId` must also be supplied.",
          "name": "items",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/collection/lib/useBaseListModel.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "any[]",
            "value": [
              {
                "value": "any[]",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSelect": {
          "defaultValue": null,
          "description": "Select a specific item by its identifier.",
          "name": "onSelect",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onSelectAll": {
          "defaultValue": null,
          "description": "Select all items. This will set `selectedIds` to `'all'` and remove all `unselectedIds`.\nThis is especially useful for virtual lists where not all items are loaded in memory.",
          "name": "onSelectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnselectAll": {
          "defaultValue": null,
          "description": "Unselect all items.",
          "name": "onUnselectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onRegisterItem": {
          "defaultValue": null,
          "description": "Register an item to the list. Takes in an identifier, a React.Ref and an optional index. This\nshould be called on component mount",
          "name": "onRegisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; ... 8 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; ... 8 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoTo": {
          "defaultValue": null,
          "description": "Directly sets the cursor to the list item by its identifier.",
          "name": "onGoTo",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNext": {
          "defaultValue": null,
          "description": "Set the cursor to the \"next\" item in the list. This event delegates to the `getNext` method of\nthe navigation manager. For a list, the default navigation manager will wrap if cursor is\ncurrently on the last item. For a grid, the default navigation manager will stay on the last\nitem in a row.",
          "name": "onGoToNext",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPrevious": {
          "defaultValue": null,
          "description": "Set the cursor to the \"previous\" item in the list. If the beginning of the list is detected,\nit will wrap to the last item",
          "name": "onGoToPrevious",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPreviousRow": {
          "defaultValue": null,
          "description": "Previous item perpendicular to the orientation of a list, or the previous row in a grid. For\nexample, if a list is horizontal, the previous row would describe an up direction. This could\nbe ignored by the navigation manager, or return the same result as `previous()`. In a grid,\nthis would be the previous row (current position - column count).",
          "name": "onGoToPreviousRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNextRow": {
          "defaultValue": null,
          "description": "Next item perpendicular to the orientation of a list, or the next row in a grid. For example,\nif a list is horizontal, the next row would describe a down direction. This could be ignored by\nthe navigation manager, or return the same result as `next()`. In a grid, this would be the\nnext row (current position + column count).",
          "name": "onGoToNextRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToFirst": {
          "defaultValue": null,
          "description": "Set the cursor to the first item in the list",
          "name": "onGoToFirst",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToLast": {
          "defaultValue": null,
          "description": "Set the cursor to the last item in the list",
          "name": "onGoToLast",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToFirstOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToFirstOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToLastOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToLastOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToNextPage": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToNextPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onGoToPreviousPage": {
          "defaultValue": null,
          "description": "",
          "name": "onGoToPreviousPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: undefined, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUnregisterItem": {
          "defaultValue": null,
          "description": "Unregister an item by its identifier. This should be called when the component is unmounted.\nThis event is only called for static rendering.",
          "name": "onUnregisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { id: string; }, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onUpdateItemHeight": {
          "defaultValue": null,
          "description": "Updates the default item height. This should only be called when item height is measured.\nCalling this with a different default item height than previous will cause a virtual list to\nrecalculate the overall height of the list and invalidate any height caching. Doing this only\non the first item may save the user from experiencing odd scrolling behavior where the\nscrollbar updates while scrolling. If the user uses the mouse to drag the bar, it can become\n\"detached\" since the browser recalculates scroll bar position while the overflow container is\nupdated.",
          "name": "onUpdateItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { value: number; }, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void)",
            "value": [
              {
                "value": "(data: { value: number; }, prevState: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSelect": {
          "defaultValue": null,
          "description": "Select a specific item by its identifier.",
          "name": "shouldSelect",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldSelectAll": {
          "defaultValue": null,
          "description": "Select all items. This will set `selectedIds` to `'all'` and remove all `unselectedIds`.\nThis is especially useful for virtual lists where not all items are loaded in memory.",
          "name": "shouldSelectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnselectAll": {
          "defaultValue": null,
          "description": "Unselect all items.",
          "name": "shouldUnselectAll",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldRegisterItem": {
          "defaultValue": null,
          "description": "Register an item to the list. Takes in an identifier, a React.Ref and an optional index. This\nshould be called on component mount",
          "name": "shouldRegisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { item: any; textValue: string; }, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; ... 8 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { item: any; textValue: string; }, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; ... 8 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoTo": {
          "defaultValue": null,
          "description": "Directly sets the cursor to the list item by its identifier.",
          "name": "shouldGoTo",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNext": {
          "defaultValue": null,
          "description": "Set the cursor to the \"next\" item in the list. This event delegates to the `getNext` method of\nthe navigation manager. For a list, the default navigation manager will wrap if cursor is\ncurrently on the last item. For a grid, the default navigation manager will stay on the last\nitem in a row.",
          "name": "shouldGoToNext",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPrevious": {
          "defaultValue": null,
          "description": "Set the cursor to the \"previous\" item in the list. If the beginning of the list is detected,\nit will wrap to the last item",
          "name": "shouldGoToPrevious",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPreviousRow": {
          "defaultValue": null,
          "description": "Previous item perpendicular to the orientation of a list, or the previous row in a grid. For\nexample, if a list is horizontal, the previous row would describe an up direction. This could\nbe ignored by the navigation manager, or return the same result as `previous()`. In a grid,\nthis would be the previous row (current position - column count).",
          "name": "shouldGoToPreviousRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNextRow": {
          "defaultValue": null,
          "description": "Next item perpendicular to the orientation of a list, or the next row in a grid. For example,\nif a list is horizontal, the next row would describe a down direction. This could be ignored by\nthe navigation manager, or return the same result as `next()`. In a grid, this would be the\nnext row (current position + column count).",
          "name": "shouldGoToNextRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToFirst": {
          "defaultValue": null,
          "description": "Set the cursor to the first item in the list",
          "name": "shouldGoToFirst",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToLast": {
          "defaultValue": null,
          "description": "Set the cursor to the last item in the list",
          "name": "shouldGoToLast",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToFirstOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToFirstOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToLastOfRow": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToLastOfRow",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToNextPage": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToNextPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldGoToPreviousPage": {
          "defaultValue": null,
          "description": "",
          "name": "shouldGoToPreviousPage",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: undefined, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUnregisterItem": {
          "defaultValue": null,
          "description": "Unregister an item by its identifier. This should be called when the component is unmounted.\nThis event is only called for static rendering.",
          "name": "shouldUnregisterItem",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { id: string; }, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { id: string; }, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldUpdateItemHeight": {
          "defaultValue": null,
          "description": "Updates the default item height. This should only be called when item height is measured.\nCalling this with a different default item height than previous will cause a virtual list to\nrecalculate the overall height of the list and invalidate any height caching. Doing this only\non the first item may save the user from experiencing odd scrolling behavior where the\nscrollbar updates while scrolling. If the user uses the mouse to drag the bar, it can become\n\"detached\" since the browser recalculates scroll bar position while the overflow container is\nupdated.",
          "name": "shouldUpdateItemHeight",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((data: { value: number; }, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean)",
            "value": [
              {
                "value": "(data: { value: number; }, state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { ...; }; ... 7 more ...; items: Item<...>[]; }) => boolean",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; sc...",
            "value": [
              {
                "value": "{ state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; sc...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undef...",
            "value": [
              {
                "value": "<TProps>(model: { state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefi...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "SegmentedControlItem": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
      "description": "",
      "displayName": "SegmentedControlItem",
      "methods": [],
      "props": {
        "index": {
          "defaultValue": null,
          "description": "Optionally pass index to the item. This should be done if `SegmentedControl.Item` components were created\nvia a `[Array::map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)` function. This index will ensure keyboard navigation works even if items are\ninserted out of order.",
          "name": "index",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
            "name": "ItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
              "name": "ItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "children": {
          "defaultValue": null,
          "description": "The contents of the item. This is text used as the accessible name of the button for screen readers.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
            "name": "ItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
              "name": "ItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "data-id": {
          "defaultValue": null,
          "description": "The identifier of the item. This identifier will be used in change events and for `initialTab`.\nIf this property is not provided, it will default to a string representation\nof the the zero-based index of the item when it was initialized.",
          "name": "data-id",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
            "name": "ItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
              "name": "ItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "id": {
          "defaultValue": null,
          "description": "Optional id. If not set, it will inherit the ID passed to the `SegmentedControl` component and append the\nindex at the end. Only set this for advanced cases.",
          "name": "id",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
            "name": "ItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
              "name": "ItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "aria-pressed": {
          "defaultValue": null,
          "description": "Part of the ARIA specification for buttons. Lets screen readers know which button is active. This\nshould either be `true` or `false`. This is automatically set by the\ncomponent and should only be used in advanced cases.",
          "name": "aria-pressed",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
            "name": "ItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
              "name": "ItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the button.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
            "name": "ItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
              "name": "ItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "tooltipProps": {
          "defaultValue": null,
          "description": "Tooltip Props",
          "name": "tooltipProps",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
            "name": "ItemProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlItem.tsx",
              "name": "ItemProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Omit<TooltipProps, \"children\">",
            "value": [
              {
                "value": "Omit<TooltipProps, \"children\">",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are four button sizes: `extraSmall`, `small`, `medium`, and `large`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; sc...",
            "value": [
              {
                "value": "{ state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; sc...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undef...",
            "value": [
              {
                "value": "<TProps>(model: { state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefi...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "SegmentedControlList": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlList.tsx",
      "description": "",
      "displayName": "SegmentedControlList",
      "methods": [],
      "props": {
        "aria-label": {
          "defaultValue": null,
          "description": "",
          "name": "aria-label",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlList.tsx",
            "name": "SegmentedControlListProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/segmented-control/lib/SegmentedControlList.tsx",
              "name": "SegmentedControlListProps"
            }
          ],
          "required": true,
          "type": {
            "name": "string"
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions) => void; sc...",
            "value": [
              {
                "value": "{ state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefined) => void; sc...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undef...",
            "value": [
              {
                "value": "<TProps>(model: { state: { disabled: boolean; size: \"small\" | \"medium\" | \"large\"; selectedIds: string[] | \"all\"; unselectedIds: string[]; cursorId: string; columnCount: number; UNSTABLE_virtual: { virtualItems: VirtualItem[]; totalSize: number; scrollToOffset: (index: number, options?: ScrollToOffsetOptions | undefi...",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-preview-react/select": {
    "Select": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/select/lib/Select.tsx",
      "description": "",
      "displayName": "Select",
      "methods": [],
      "props": {
        "options": {
          "defaultValue": null,
          "description": "The options of the Select. `options` may be an array of objects or an array of strings.\n\nIf `options` is an array of objects, each object must adhere to the `Option` interface:\n\n* `data: object` (optional)\n* `disabled: boolean` (optional)\n* `id: string` (optional, a random `id` will be assigned to the object if one isn't provided)\n* `label: string` (optional, analogous to the text content of an `<option>`)\n* `value: string` (required, analogous to the `value` attribute of an `<option>`)\n\nIf `label` is omitted, the `value` will be used to render the option.\n\nThe `data` object is carried over to the `option` passed into the `renderOption` function where it may then be used to customize how each option is rendered.",
          "name": "options",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/Select.tsx",
            "name": "SelectProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/Select.tsx",
              "name": "SelectProps"
            }
          ],
          "required": true,
          "type": {
            "name": "(string | Option)[]"
          }
        },
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the Select (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "CoreSelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "CoreSelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "renderOption": {
          "defaultValue": {
            "value": "defaultRenderOption"
          },
          "description": "The function called to render the content of each option.\n\nThe `option` argument passed to the function is an object which contains the following:\n\n* `data: object` (data object carried over from the corresponding option originally passed into the component)\n* `disabled: boolean`\n* `focused: boolean` (set to `true` if the option has keyboard focus)\n* `id: string`\n* `label: string`\n* `selected: boolean` (set to `true` if the option is selected)\n* `value: string`\n\nIf you omit the `renderOption` prop, each option will be rendered using a `defaultRenderOption` function provided by the component.",
          "name": "renderOption",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "CoreSelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "CoreSelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RenderOptionFunction",
            "value": [
              {
                "value": "RenderOptionFunction",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "renderSelected": {
          "defaultValue": {
            "value": "defaultRenderSelected"
          },
          "description": "The function called to render the selected option.\n\nThe `option` argument passed to the function is an object which contains the following:\n\n* `data: object` (data object carried over from the corresponding option originally passed into the component)\n* `disabled: boolean`\n* `id: string`\n* `label: string`\n* `value: string`\n\nIf you omit the `renderSelected` prop, each option will be rendered using a `defaultRenderSelected` function provided by the component.",
          "name": "renderSelected",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "CoreSelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "CoreSelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RenderSelectedFunction",
            "value": [
              {
                "value": "RenderSelectedFunction",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "value": {
          "defaultValue": null,
          "description": "The value of the Select.",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "CoreSelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "CoreSelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "SelectBase": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
      "description": "",
      "displayName": "SelectBase",
      "methods": [],
      "props": {
        "forwardedButtonRef": {
          "defaultValue": null,
          "description": "The ref to be forwarded to the underlying button element. Use this to imperatively manipulate the button.",
          "name": "forwardedButtonRef",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "SelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "SelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Ref<HTMLButtonElement>",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "RefObject<HTMLButtonElement>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "(instance: HTMLButtonElement | null) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "localButtonRef": {
          "defaultValue": null,
          "description": "The local ref to the underlying button element. Can be used in situations where RefObject is required (such as the Popper Menu).",
          "name": "localButtonRef",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "SelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "SelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RefObject<HTMLButtonElement>",
            "value": [
              {
                "value": "RefObject<HTMLButtonElement>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "focusedOptionIndex": {
          "defaultValue": {
            "value": 0
          },
          "description": "The index of the focused option in the SelectBase.",
          "name": "focusedOptionIndex",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "SelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "SelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number",
            "value": [
              {
                "value": "number"
              }
            ]
          }
        },
        "inputRef": {
          "defaultValue": null,
          "description": "The ref to the underlying (hidden) text input element. Use this to imperatively manipulate the input.",
          "name": "inputRef",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "SelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "SelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Ref<HTMLInputElement>",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "(instance: HTMLInputElement | null) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "RefObject<HTMLInputElement>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "menuPlacement": {
          "defaultValue": {
            "value": "bottom"
          },
          "description": "The placement of the SelectBase menu relative to its corresponding SelectButton.",
          "name": "menuPlacement",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "SelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "SelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "MenuPlacement",
            "value": [
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              }
            ]
          }
        },
        "menuRef": {
          "defaultValue": null,
          "description": "The ref to the underlying menu element. Use this to imperatively manipulate the menu.",
          "name": "menuRef",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "SelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "SelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RefObject<HTMLUListElement>",
            "value": [
              {
                "value": "RefObject<HTMLUListElement>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "menuVisibility": {
          "defaultValue": {
            "value": "closed"
          },
          "description": "The visibility state of the SelectBase menu.",
          "name": "menuVisibility",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "SelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "SelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "MenuVisibility",
            "value": [
              {
                "value": "\"open\""
              },
              {
                "value": "\"closed\""
              },
              {
                "value": "\"close\""
              },
              {
                "value": "\"opening\""
              },
              {
                "value": "\"opened\""
              },
              {
                "value": "\"closing\""
              }
            ]
          }
        },
        "onKeyDown": {
          "defaultValue": null,
          "description": "The function called when a key is pressed down while the SelectBase button or menu has focus.",
          "name": "onKeyDown",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "SelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "SelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((event: KeyboardEvent<HTMLElement>) => void)",
            "value": [
              {
                "value": "(event: KeyboardEvent<HTMLElement>) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onClose": {
          "defaultValue": null,
          "description": "The function called when the menu is closed.",
          "name": "onClose",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "SelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "SelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(() => void)",
            "value": [
              {
                "value": "() => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onOptionSelection": {
          "defaultValue": null,
          "description": "The function called when an option in the SelectBase is selected via a click or a keyboard shortcut. The `index` passed to the callback function represents the index of the option which was selected.",
          "name": "onOptionSelection",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "SelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "SelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((index: number) => void)",
            "value": [
              {
                "value": "(index: number) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "options": {
          "defaultValue": null,
          "description": "The options of the SelectBase. `options` is an array of objects, each object adhering to the `NormalizedOption` interface:\n\n* `value: string` (required, analagous to the `value` attribute of an `<option>`)\n* `disabled: boolean` (required)\n* `id: string` (required)\n* `label: string` (required, analagous to the text content of an `<option>`)",
          "name": "options",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "SelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "SelectBaseProps"
            }
          ],
          "required": true,
          "type": {
            "name": "NormalizedOption[]"
          }
        },
        "shouldMenuAutoFlip": {
          "defaultValue": {
            "value": true
          },
          "description": "If true, automatically flip the SelectBase menu to keep it visible if necessary (e.g., if the the menu would otherwise display below the visible area of the viewport).",
          "name": "shouldMenuAutoFlip",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "SelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "SelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "shouldMenuAutoFocus": {
          "defaultValue": {
            "value": true
          },
          "description": "If true, focus the SelectBase menu when it's shown. Set to false if you don't want to focus the menu automatically (for visual testing purposes, for example).",
          "name": "shouldMenuAutoFocus",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "SelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "SelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the Select (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "CoreSelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "CoreSelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "renderOption": {
          "defaultValue": {
            "value": "option => {\n  return <div>{defaultRenderSelected(option)}</div>;\n}"
          },
          "description": "The function called to render the content of each option.\n\nThe `option` argument passed to the function is an object which contains the following:\n\n* `data: object` (data object carried over from the corresponding option originally passed into the component)\n* `disabled: boolean`\n* `focused: boolean` (set to `true` if the option has keyboard focus)\n* `id: string`\n* `label: string`\n* `selected: boolean` (set to `true` if the option is selected)\n* `value: string`\n\nIf you omit the `renderOption` prop, each option will be rendered using a `defaultRenderOption` function provided by the component.",
          "name": "renderOption",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "CoreSelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "CoreSelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RenderOptionFunction",
            "value": [
              {
                "value": "RenderOptionFunction",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "renderSelected": {
          "defaultValue": {
            "value": "option => {\n  return option.label;\n}"
          },
          "description": "The function called to render the selected option.\n\nThe `option` argument passed to the function is an object which contains the following:\n\n* `data: object` (data object carried over from the corresponding option originally passed into the component)\n* `disabled: boolean`\n* `id: string`\n* `label: string`\n* `value: string`\n\nIf you omit the `renderSelected` prop, each option will be rendered using a `defaultRenderSelected` function provided by the component.",
          "name": "renderSelected",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "CoreSelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "CoreSelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RenderSelectedFunction",
            "value": [
              {
                "value": "RenderSelectedFunction",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "value": {
          "defaultValue": null,
          "description": "The value of the Select.",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "CoreSelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "CoreSelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "SelectMenu": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
      "description": "",
      "displayName": "SelectMenu",
      "methods": [],
      "props": {
        "buttonRef": {
          "defaultValue": null,
          "description": "The ref to the anchor button element. Required to anchor the menu.",
          "name": "buttonRef",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
            "name": "SelectMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
              "name": "SelectMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RefObject<HTMLButtonElement>",
            "value": [
              {
                "value": "RefObject<HTMLButtonElement>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "menuRef": {
          "defaultValue": null,
          "description": "The ref to the underlying menu/listbox element. Use this to imperatively manipulate the menu.",
          "name": "menuRef",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
            "name": "SelectMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
              "name": "SelectMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "RefObject<HTMLUListElement>",
            "value": [
              {
                "value": "RefObject<HTMLUListElement>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onClose": {
          "defaultValue": null,
          "description": "The function called when the menu is closed.",
          "name": "onClose",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
            "name": "SelectMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
              "name": "SelectMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(() => void)",
            "value": [
              {
                "value": "() => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "placement": {
          "defaultValue": {
            "value": "bottom"
          },
          "description": "The placement of the SelectMenu relative to its corresponding button.",
          "name": "placement",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
            "name": "SelectMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
              "name": "SelectMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "MenuPlacement",
            "value": [
              {
                "value": "\"top\""
              },
              {
                "value": "\"bottom\""
              }
            ]
          }
        },
        "shouldAutoFlip": {
          "defaultValue": {
            "value": true
          },
          "description": "If true, automatically flip the SelectMenu to keep it visible if necessary (e.g., if the the SelectMenu would otherwise display below the visible area of the viewport).",
          "name": "shouldAutoFlip",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
            "name": "SelectMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
              "name": "SelectMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "shouldAutoFocus": {
          "defaultValue": {
            "value": true
          },
          "description": "If true, focus the SelectMenu when it's shown. Set to false if you don't want to focus the SelectMenu automatically (for visual testing purposes, for example).",
          "name": "shouldAutoFocus",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
            "name": "SelectMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
              "name": "SelectMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "visibility": {
          "defaultValue": {
            "value": "closed"
          },
          "description": "The visibility state of the SelectMenu.",
          "name": "visibility",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
            "name": "SelectMenuProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectMenu.tsx",
              "name": "SelectMenuProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "MenuVisibility",
            "value": [
              {
                "value": "\"open\""
              },
              {
                "value": "\"closed\""
              },
              {
                "value": "\"close\""
              },
              {
                "value": "\"opening\""
              },
              {
                "value": "\"opened\""
              },
              {
                "value": "\"closing\""
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the Select (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
            "name": "CoreSelectBaseProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectBase.tsx",
              "name": "CoreSelectBaseProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "SelectOption": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/select/lib/SelectOption.tsx",
      "description": "",
      "displayName": "SelectOption",
      "methods": [],
      "props": {
        "error": {
          "defaultValue": null,
          "description": "The type of error associated with the SelectOption (if applicable).",
          "name": "error",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectOption.tsx",
            "name": "SelectOptionProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectOption.tsx",
              "name": "SelectOptionProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ErrorType",
            "value": [
              {
                "value": "0",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "1",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "focused": {
          "defaultValue": {
            "value": false
          },
          "description": "If true, set the SelectOption to the focused state.",
          "name": "focused",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectOption.tsx",
            "name": "SelectOptionProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectOption.tsx",
              "name": "SelectOptionProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "id": {
          "defaultValue": null,
          "description": "The HTML `id` of the SelectOption.",
          "name": "id",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectOption.tsx",
            "name": "SelectOptionProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectOption.tsx",
              "name": "SelectOptionProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "interactive": {
          "defaultValue": {
            "value": true
          },
          "description": "If true, set the SelectOption to the interactive state. Non-interactive SelectOptions should not give any visual cues that they are interactive (e.g., remove hover styling).",
          "name": "interactive",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectOption.tsx",
            "name": "SelectOptionProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectOption.tsx",
              "name": "SelectOptionProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "optionRef": {
          "defaultValue": null,
          "description": "The ref to the list item that the styled component renders. Use this to imperatively manipulate the SelectOption (e.g., to scroll to it if it's out of view in the Select menu).",
          "name": "optionRef",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectOption.tsx",
            "name": "SelectOptionProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectOption.tsx",
              "name": "SelectOptionProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Ref<HTMLLIElement>",
            "value": [
              {
                "value": "null"
              },
              {
                "value": "(instance: HTMLLIElement | null) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "RefObject<HTMLLIElement>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "value": {
          "defaultValue": null,
          "description": "The value of the SelectOption.",
          "name": "value",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/select/lib/SelectOption.tsx",
            "name": "SelectOptionProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/select/lib/SelectOption.tsx",
              "name": "SelectOptionProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-preview-react/side-panel": {
    "SidePanel": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
      "description": "",
      "displayName": "SidePanel",
      "methods": [],
      "props": {
        "as": {
          "defaultValue": {
            "value": "section"
          },
          "description": "The element the side panel will render as (e.g. 'div').",
          "name": "as",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "collapsedWidth": {
          "defaultValue": {
            "value": 64
          },
          "description": "The width of the component (in `px` if it's a `number`) when it is collapsed.",
          "name": "collapsedWidth",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "expanded": {
          "defaultValue": {
            "value": true
          },
          "description": "If true, sets the expanded state of the side panel",
          "name": "expanded",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "expandedWidth": {
          "defaultValue": {
            "value": 320
          },
          "description": "The width of the component (in `px` if it's a `number`) when it is expanded.",
          "name": "expandedWidth",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "origin": {
          "defaultValue": {
            "value": "left"
          },
          "description": "Which side the side panel is meant to originate from.",
          "name": "origin",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"right\" | \"left\"",
            "value": [
              {
                "value": "\"right\""
              },
              {
                "value": "\"left\""
              }
            ]
          }
        },
        "onExpandedChange": {
          "defaultValue": null,
          "description": "The function called when the side panel's `expanded` state changes. States like `'collapsing'` and `'expanding'` are tracked in another callback: `onStateTransition`\n@param boolean",
          "name": "onExpandedChange",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((expanded?: boolean) => void) | undefined",
            "value": [
              {
                "value": "(expanded?: boolean | undefined) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "onStateTransition": {
          "defaultValue": null,
          "description": "The function called when the side panel is transitioning between states.\nUse this to track when the side panel is animating between `'collapsed'`, `'collapsing'`, `'expanded'`, and `'expanding'` states.\nThis can be particularly helpful if child components need to react specifically to these states.\n@param SidePanelTransitionStates",
          "name": "onStateTransition",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "((state?: SidePanelTransitionStates) => void) | undefined",
            "value": [
              {
                "value": "(state?: SidePanelTransitionStates | undefined) => void",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The style variant of the side panel. 'standard' is with a `soap100` background, no depth. 'alternate' is a `frenchVanilla100` background with a level 6 depth.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "SidePanelVariant",
            "value": [
              {
                "value": "\"alternate\""
              },
              {
                "value": "\"standard\""
              }
            ]
          }
        },
        "touched": {
          "defaultValue": null,
          "description": "This is set by the useSidePanel hook and prevents unintended keyframe animations\n@param boolean",
          "name": "touched",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
            "name": "SidePanelProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
              "name": "SidePanelProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        }
      }
    },
    "SidePanel.ToggleButton": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
      "description": "A toggle button styled specifically for the side panel container.",
      "displayName": "SidePanel.ToggleButton",
      "methods": [],
      "props": {
        "variant": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "The variant of the TertiaryButton.",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"inverse\"",
            "value": [
              {
                "value": "\"inverse\""
              }
            ]
          }
        },
        "size": {
          "defaultValue": {
            "value": "'medium'"
          },
          "description": "There are three button sizes: `extraSmall`, `small`, and `medium`.\nIf no size is provided, it will default to `medium`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonSizes",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"extraSmall\""
              },
              {
                "value": "\"medium\""
              },
              {
                "value": "\"large\""
              }
            ]
          }
        },
        "iconPosition": {
          "defaultValue": {
            "value": "'start'"
          },
          "description": "Button icon positions can either be `start` or `end`.\nIf no value is provided, it defaults to `start`.",
          "name": "iconPosition",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "IconPositions",
            "value": [
              {
                "value": "\"end\""
              },
              {
                "value": "\"start\""
              }
            ]
          }
        },
        "icon": {
          "defaultValue": null,
          "description": "The icon of the TertiaryButton.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CanvasSystemIcon",
            "value": [
              {
                "value": "CanvasSystemIcon",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirrorIcon": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the icon's x-axis to mirror the graphic",
          "name": "shouldMirrorIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "allCaps": {
          "defaultValue": {
            "value": "undefined"
          },
          "description": "If set to `true`, transform text to all letters uppercase",
          "name": "allCaps",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "isThemeable": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, make icon button available to use theme colors instead of default",
          "name": "isThemeable",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
            "name": "TertiaryButtonProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/TertiaryButton.tsx",
              "name": "TertiaryButtonProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "theme": {
          "defaultValue": null,
          "description": "",
          "name": "theme",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
            "name": "Themeable"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/theming/types.ts",
              "name": "Themeable"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "EmotionCanvasTheme",
            "value": [
              {
                "value": "EmotionCanvasTheme",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "colors": {
          "defaultValue": null,
          "description": "",
          "name": "colors",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ButtonColors",
            "value": [
              {
                "value": "ButtonColors",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "fillIcon": {
          "defaultValue": null,
          "description": "Whether the icon should received filled (colored background layer) or regular styles.\nCorresponds to `toggled` in ToolbarIconButton",
          "name": "fillIcon",
          "parent": {
            "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
            "name": "ButtonContainerProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/button/lib/BaseButton.tsx",
              "name": "ButtonContainerProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "grow": {
          "defaultValue": null,
          "description": "True if the component should grow to its container's width. False otherwise.",
          "name": "grow",
          "parent": {
            "fileName": "canvas-kit/modules/react/common/lib/types.ts",
            "name": "GrowthBehavior"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/types.ts",
              "name": "GrowthBehavior"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "tooltipTextExpand": {
          "defaultValue": {
            "value": "'Expand'"
          },
          "description": "The tooltip text to expand the side panel",
          "name": "tooltipTextExpand",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "tooltipTextCollapse": {
          "defaultValue": {
            "value": "'Collapse'"
          },
          "description": "The tooltip text to collapse the side panel",
          "name": "tooltipTextCollapse",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/side-panel/lib/SidePanel.tsx",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-preview-react/status-indicator": {
    "StatusIndicator": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/status-indicator/lib/StatusIndicator.tsx",
      "description": "",
      "displayName": "StatusIndicator",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "Children of the `StatusIndicator`. Can contain a `StatusIndicator.Label` and optionally a `StatusIndicator.Icon`.",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/status-indicator/lib/StatusIndicator.tsx",
            "name": "StatusIndicatorProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/status-indicator/lib/StatusIndicator.tsx",
              "name": "StatusIndicatorProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "flexDirection": {
          "defaultValue": {
            "value": "\"row\""
          },
          "description": "sets the direction for the stack",
          "name": "flexDirection",
          "parent": {
            "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
            "name": "HStackProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/layout/lib/Stack.tsx",
              "name": "HStackProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"row\" | \"row-reverse\"",
            "value": [
              {
                "value": "\"row\""
              },
              {
                "value": "\"row-reverse\""
              }
            ]
          }
        },
        "emphasis": {
          "defaultValue": {
            "value": "'low'"
          },
          "description": "Defines the emphasis of the `StatusIndicator`.\n`high` emphasis will create more contrast between the background and text colors.\n`low` emphasis will create less contrast between the background and text colors.",
          "name": "emphasis",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "StatusIndicatorEmphasis",
            "value": [
              {
                "value": "\"low\""
              },
              {
                "value": "\"high\""
              }
            ]
          }
        },
        "variant": {
          "defaultValue": {
            "value": "'gray'"
          },
          "description": "Defines the color of the `StatusIndicator`.",
          "name": "variant",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "StatusIndicatorVariant",
            "value": [
              {
                "value": "\"transparent\""
              },
              {
                "value": "\"blue\""
              },
              {
                "value": "\"gray\""
              },
              {
                "value": "\"green\""
              },
              {
                "value": "\"orange\""
              },
              {
                "value": "\"red\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { emphasis: StatusIndicatorEmphasis; variant: StatusIndicatorVariant; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { emphasis: StatusIndicatorEmphasis; variant: StatusIndicatorVariant; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { emphasis: StatusIndicatorEmphasis; variant: StatusIndicatorVariant; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { emphasis: StatusIndicatorEmphasis; variant: StatusIndicatorVariant; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "StatusIndicatorIcon": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/status-indicator/lib/StatusIndicatorIcon.tsx",
      "description": "",
      "displayName": "StatusIndicatorIcon",
      "methods": [],
      "props": {
        "icon": {
          "defaultValue": null,
          "description": "The icon to display from `@workday/canvas-system-icons-web`.",
          "name": "icon",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": true,
          "type": {
            "name": "CanvasSystemIcon"
          }
        },
        "size": {
          "defaultValue": null,
          "description": "The size of the SystemIcon in `px`.",
          "name": "size",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string | number",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              }
            ]
          }
        },
        "className": {
          "defaultValue": null,
          "description": "",
          "name": "className",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accent": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon. This overrides `color`.",
          "name": "accent",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "accentHover": {
          "defaultValue": null,
          "description": "The accent color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "accentHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "background": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon.",
          "name": "background",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "backgroundHover": {
          "defaultValue": {
            "value": "transparent"
          },
          "description": "The background color of the SystemIcon on hover.",
          "name": "backgroundHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "color": {
          "defaultValue": {
            "value": "iconColors.standard"
          },
          "description": "The color of the SystemIcon. This defines `accent` and `fill`. `color` may be overriden by `accent` and `fill`.",
          "name": "color",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "colorHover": {
          "defaultValue": {
            "value": "iconColors.hover"
          },
          "description": "The hover color of the SystemIcon. This defines `accentHover` and `fillHover`. `colorHover` may be overriden by `accentHover` and `fillHover`.",
          "name": "colorHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fill": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon. This overrides `color`.",
          "name": "fill",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "fillHover": {
          "defaultValue": null,
          "description": "The fill color of the SystemIcon on hover. This overrides `colorHover`.",
          "name": "fillHover",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
            "name": "SystemIconStyles"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/SystemIcon.tsx",
              "name": "SystemIconStyles"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "styles": {
          "defaultValue": null,
          "description": "",
          "name": "styles",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "CSSObject",
            "value": [
              {
                "value": "CSSObject",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "shouldMirror": {
          "defaultValue": {
            "value": "false"
          },
          "description": "If set to `true`, transform the SVG's x-axis to mirror the graphic",
          "name": "shouldMirror",
          "parent": {
            "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
            "name": "SvgProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/icon/lib/Svg.tsx",
              "name": "SvgProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { emphasis: StatusIndicatorEmphasis; variant: StatusIndicatorVariant; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { emphasis: StatusIndicatorEmphasis; variant: StatusIndicatorVariant; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { emphasis: StatusIndicatorEmphasis; variant: StatusIndicatorVariant; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { emphasis: StatusIndicatorEmphasis; variant: StatusIndicatorVariant; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "StatusIndicatorLabel": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/status-indicator/lib/StatusIndicatorLabel.tsx",
      "description": "",
      "displayName": "StatusIndicatorLabel",
      "methods": [],
      "props": {
        "typeLevel": {
          "defaultValue": null,
          "description": "Type token as string with level and size separated by dot.\nThese values map to our [Canvas type levels](https://canvas.workday.com/tokens/type#type-styles).\n@example ```tsx\n<Text typeLevel=\"body.small\">Small body text</Text>\n```",
          "name": "typeLevel",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
            "name": "TextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
              "name": "TextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"body.small\" | \"body.medium\" | \"body.large\" | \"title.small\" | \"title.medium\" | \"title.large\" | \"heading.small\" | \"heading.medium\" | \"heading.large\" | \"subtext.small\" | \"subtext.medium\" | \"subtext.large\"",
            "value": [
              {
                "value": "\"body.small\""
              },
              {
                "value": "\"body.medium\""
              },
              {
                "value": "\"body.large\""
              },
              {
                "value": "\"title.small\""
              },
              {
                "value": "\"title.medium\""
              },
              {
                "value": "\"title.large\""
              },
              {
                "value": "\"heading.small\""
              },
              {
                "value": "\"heading.medium\""
              },
              {
                "value": "\"heading.large\""
              },
              {
                "value": "\"subtext.small\""
              },
              {
                "value": "\"subtext.medium\""
              },
              {
                "value": "\"subtext.large\""
              }
            ]
          }
        },
        "variant": {
          "defaultValue": null,
          "description": "Type variant token names: `error`, `hint` or `inverse`.\n@example ```tsx\n<Text variant=\"error\" typeLevel=\"subtext.large\">Error text</Text>\n```",
          "name": "variant",
          "parent": {
            "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
            "name": "TextProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/text/lib/Text.tsx",
              "name": "TextProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "keyof CanvasTypeVariants",
            "value": [
              {
                "value": "\"inverse\""
              },
              {
                "value": "\"error\""
              },
              {
                "value": "\"hint\""
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-preview-react/text-area": {
    "TextArea": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/text-area/lib/TextArea.tsx",
      "description": "",
      "displayName": "TextArea",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "Children of the Text Input. Should contain a `<TextArea.Field>`, a `<TextArea.Label>` and an optional `<TextArea.Hint>`",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/text-area/lib/TextArea.tsx",
            "name": "TextAreaProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/text-area/lib/TextArea.tsx",
              "name": "TextAreaProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "orientation": {
          "defaultValue": null,
          "description": "The direction the child elements should stack",
          "name": "orientation",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "\"vertical\" | \"horizontal\"",
            "value": [
              {
                "value": "\"vertical\""
              },
              {
                "value": "\"horizontal\""
              }
            ]
          }
        },
        "spacing": {
          "defaultValue": {
            "value": "xxxs when vertical l when orientation is horizontal"
          },
          "description": "Spacing between children elements",
          "name": "spacing",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number | (string & {}) | keyof CanvasSpace",
            "value": [
              {
                "value": "number"
              },
              {
                "value": "\"s\""
              },
              {
                "value": "string & {}"
              },
              {
                "value": "\"zero\""
              },
              {
                "value": "\"m\""
              },
              {
                "value": "\"l\""
              },
              {
                "value": "\"xxxs\""
              },
              {
                "value": "\"xxs\""
              },
              {
                "value": "\"xs\""
              },
              {
                "value": "\"xl\""
              },
              {
                "value": "\"xxl\""
              },
              {
                "value": "\"xxxl\""
              }
            ]
          }
        },
        "hasError": {
          "defaultValue": {
            "value": "false"
          },
          "description": "Optional flag to denote if this field has an error to display. When true the `FormField.Input` will have\n`required` set to true, and usually some subcomponents will have a error color applied.",
          "name": "hasError",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "id": {
          "defaultValue": {
            "value": "`useUniqueId()`"
          },
          "description": "Optional `id` provided to `FormField`'s subcomponents as HTML attributes:\n- `FormField.Input` will set `aria-describedby` to `hint-${id}`\n- `FormField.Input` will set `id` to `input-${id}`\n- `FormField.Label` will set `htmlFor` to `input-${id}`\n- `FormField.Hint` will set `id` to `hint-${id}`\n\nIf a value is not provided, a unique id will be automatically created by `useUniqueId()`.",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "isRequired": {
          "defaultValue": {
            "value": "false"
          },
          "description": "Optional flag to denote if this field is required. When true the `FormField.Input` will have\n`required` set to true, and an asterisk will be appended to the `FormField.Label`.",
          "name": "isRequired",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "TextAreaField": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/text-area/lib/TextAreaField.tsx",
      "description": "",
      "displayName": "TextAreaField",
      "methods": [],
      "props": {
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  },
  "@workday/canvas-kit-preview-react/text-input": {
    "TextInput": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/text-input/lib/TextInput.tsx",
      "description": "",
      "displayName": "TextInput",
      "methods": [],
      "props": {
        "children": {
          "defaultValue": null,
          "description": "Children of the Text Input. Should contain a `<FormField.Input>`, a `<FormField.Label>` and an optional `<FormField.Hint>`",
          "name": "children",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "undefined"
              },
              {
                "value": "null"
              },
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactFragment",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "orientation": {
          "defaultValue": null,
          "description": "The direction the child elements should stack",
          "name": "orientation",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": true,
          "type": {
            "name": "enum",
            "raw": "\"vertical\" | \"horizontal\"",
            "value": [
              {
                "value": "\"vertical\""
              },
              {
                "value": "\"horizontal\""
              }
            ]
          }
        },
        "spacing": {
          "defaultValue": {
            "value": "xxxs when vertical l when orientation is horizontal"
          },
          "description": "Spacing between children elements",
          "name": "spacing",
          "parent": {
            "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
            "name": "FormFieldProps"
          },
          "declarations": [
            {
              "fileName": "canvas-kit/modules/preview-react/form-field/lib/FormField.tsx",
              "name": "FormFieldProps"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "number | (string & {}) | keyof CanvasSpace",
            "value": [
              {
                "value": "number"
              },
              {
                "value": "\"s\""
              },
              {
                "value": "string & {}"
              },
              {
                "value": "\"zero\""
              },
              {
                "value": "\"m\""
              },
              {
                "value": "\"l\""
              },
              {
                "value": "\"xxxs\""
              },
              {
                "value": "\"xxs\""
              },
              {
                "value": "\"xs\""
              },
              {
                "value": "\"xl\""
              },
              {
                "value": "\"xxl\""
              },
              {
                "value": "\"xxxl\""
              }
            ]
          }
        },
        "hasError": {
          "defaultValue": {
            "value": "false"
          },
          "description": "Optional flag to denote if this field has an error to display. When true the `FormField.Input` will have\n`required` set to true, and usually some subcomponents will have a error color applied.",
          "name": "hasError",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "id": {
          "defaultValue": {
            "value": "`useUniqueId()`"
          },
          "description": "Optional `id` provided to `FormField`'s subcomponents as HTML attributes:\n- `FormField.Input` will set `aria-describedby` to `hint-${id}`\n- `FormField.Input` will set `id` to `input-${id}`\n- `FormField.Label` will set `htmlFor` to `input-${id}`\n- `FormField.Hint` will set `id` to `hint-${id}`\n\nIf a value is not provided, a unique id will be automatically created by `useUniqueId()`.",
          "name": "id",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "string",
            "value": [
              {
                "value": "string"
              }
            ]
          }
        },
        "isRequired": {
          "defaultValue": {
            "value": "false"
          },
          "description": "Optional flag to denote if this field is required. When true the `FormField.Input` will have\n`required` set to true, and an asterisk will be appended to the `FormField.Label`.",
          "name": "isRequired",
          "declarations": [],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          }
        },
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    },
    "TextInputField": {
      "tags": {},
      "filePath": "/home/nicholas/projects/canvas-kit/modules/preview-react/text-input/lib/TextInputField.tsx",
      "description": "",
      "displayName": "TextInputField",
      "methods": [],
      "props": {
        "model": {
          "defaultValue": null,
          "description": "Optional model to pass to the component. This will override the default model created for the\ncomponent. This can be useful if you want to access to the state and events of the model, or if\nyou have nested components of the same type and you need to override the model provided by\nReact Context.",
          "name": "model",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
            "value": [
              {
                "value": "{ state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "elemPropsHook": {
          "defaultValue": null,
          "description": "Optional hook that receives the model and all props to be applied to the element. If you use\nthis, it is your responsibility to return props, merging as appropriate. For example, returning\nan empty object will disable all elemProps hooks associated with this component. This allows\nfiner control over a component without creating a new one.",
          "name": "elemPropsHook",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any)",
            "value": [
              {
                "value": "<TProps>(model: { state: { id: string; hasError: boolean; isRequired: boolean; }; events: {}; }, elemProps: TProps) => any",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        },
        "ref": {
          "defaultValue": null,
          "description": "Optional ref. If the component represents an element, this ref will be a reference to the\nreal DOM element of the component. If `as` is set to an element, it will be that element.\nIf `as` is a component, the reference will be to that component (or element if the component\nuses `React.forwardRef`).",
          "name": "ref",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "React.Ref<any>",
            "raw": "React.Ref<any>",
            "value": [
              {
                "value": "React.Ref<any>"
              }
            ]
          }
        },
        "as": {
          "defaultValue": null,
          "description": "Optional override of the default element used by the component. Any valid tag or Component.\nIf you provided a Component, this component should forward the ref using `React.forwardRef`\nand spread extra props to a root element.",
          "name": "as",
          "declarations": [
            {
              "fileName": "canvas-kit/modules/react/common/lib/utils/components.ts",
              "name": "TypeLiteral"
            }
          ],
          "required": false,
          "type": {
            "name": "enum",
            "raw": "\"article\" | \"aside\" | \"button\" | \"section\" | ... 161 more ... | React.ComponentType<any>",
            "value": [
              {
                "value": "\"symbol\""
              },
              {
                "value": "\"object\""
              },
              {
                "value": "\"a\""
              },
              {
                "value": "\"abbr\""
              },
              {
                "value": "\"address\""
              },
              {
                "value": "\"area\""
              },
              {
                "value": "\"article\""
              },
              {
                "value": "\"aside\""
              },
              {
                "value": "\"audio\""
              },
              {
                "value": "\"b\""
              },
              {
                "value": "\"base\""
              },
              {
                "value": "\"bdi\""
              },
              {
                "value": "\"bdo\""
              },
              {
                "value": "\"big\""
              },
              {
                "value": "\"blockquote\""
              },
              {
                "value": "\"body\""
              },
              {
                "value": "\"br\""
              },
              {
                "value": "\"button\""
              },
              {
                "value": "\"canvas\""
              },
              {
                "value": "\"caption\""
              },
              {
                "value": "\"cite\""
              },
              {
                "value": "\"code\""
              },
              {
                "value": "\"col\""
              },
              {
                "value": "\"colgroup\""
              },
              {
                "value": "\"data\""
              },
              {
                "value": "\"datalist\""
              },
              {
                "value": "\"dd\""
              },
              {
                "value": "\"del\""
              },
              {
                "value": "\"details\""
              },
              {
                "value": "\"dfn\""
              },
              {
                "value": "\"dialog\""
              },
              {
                "value": "\"div\""
              },
              {
                "value": "\"dl\""
              },
              {
                "value": "\"dt\""
              },
              {
                "value": "\"em\""
              },
              {
                "value": "\"embed\""
              },
              {
                "value": "\"fieldset\""
              },
              {
                "value": "\"figcaption\""
              },
              {
                "value": "\"figure\""
              },
              {
                "value": "\"footer\""
              },
              {
                "value": "\"form\""
              },
              {
                "value": "\"h1\""
              },
              {
                "value": "\"h2\""
              },
              {
                "value": "\"h3\""
              },
              {
                "value": "\"h4\""
              },
              {
                "value": "\"h5\""
              },
              {
                "value": "\"h6\""
              },
              {
                "value": "\"head\""
              },
              {
                "value": "\"header\""
              },
              {
                "value": "\"hgroup\""
              },
              {
                "value": "\"hr\""
              },
              {
                "value": "\"html\""
              },
              {
                "value": "\"i\""
              },
              {
                "value": "\"iframe\""
              },
              {
                "value": "\"img\""
              },
              {
                "value": "\"input\""
              },
              {
                "value": "\"ins\""
              },
              {
                "value": "\"kbd\""
              },
              {
                "value": "\"keygen\""
              },
              {
                "value": "\"label\""
              },
              {
                "value": "\"legend\""
              },
              {
                "value": "\"li\""
              },
              {
                "value": "\"link\""
              },
              {
                "value": "\"main\""
              },
              {
                "value": "\"map\""
              },
              {
                "value": "\"mark\""
              },
              {
                "value": "\"menu\""
              },
              {
                "value": "\"menuitem\""
              },
              {
                "value": "\"meta\""
              },
              {
                "value": "\"meter\""
              },
              {
                "value": "\"nav\""
              },
              {
                "value": "\"noindex\""
              },
              {
                "value": "\"noscript\""
              },
              {
                "value": "\"ol\""
              },
              {
                "value": "\"optgroup\""
              },
              {
                "value": "\"option\""
              },
              {
                "value": "\"output\""
              },
              {
                "value": "\"p\""
              },
              {
                "value": "\"param\""
              },
              {
                "value": "\"picture\""
              },
              {
                "value": "\"pre\""
              },
              {
                "value": "\"progress\""
              },
              {
                "value": "\"q\""
              },
              {
                "value": "\"rp\""
              },
              {
                "value": "\"rt\""
              },
              {
                "value": "\"ruby\""
              },
              {
                "value": "\"s\""
              },
              {
                "value": "\"samp\""
              },
              {
                "value": "\"slot\""
              },
              {
                "value": "\"script\""
              },
              {
                "value": "\"section\""
              },
              {
                "value": "\"select\""
              },
              {
                "value": "\"small\""
              },
              {
                "value": "\"source\""
              },
              {
                "value": "\"span\""
              },
              {
                "value": "\"strong\""
              },
              {
                "value": "\"style\""
              },
              {
                "value": "\"sub\""
              },
              {
                "value": "\"summary\""
              },
              {
                "value": "\"sup\""
              },
              {
                "value": "\"table\""
              },
              {
                "value": "\"template\""
              },
              {
                "value": "\"tbody\""
              },
              {
                "value": "\"td\""
              },
              {
                "value": "\"textarea\""
              },
              {
                "value": "\"tfoot\""
              },
              {
                "value": "\"th\""
              },
              {
                "value": "\"thead\""
              },
              {
                "value": "\"time\""
              },
              {
                "value": "\"title\""
              },
              {
                "value": "\"tr\""
              },
              {
                "value": "\"track\""
              },
              {
                "value": "\"u\""
              },
              {
                "value": "\"ul\""
              },
              {
                "value": "\"var\""
              },
              {
                "value": "\"video\""
              },
              {
                "value": "\"wbr\""
              },
              {
                "value": "\"webview\""
              },
              {
                "value": "\"svg\""
              },
              {
                "value": "\"animate\""
              },
              {
                "value": "\"animateMotion\""
              },
              {
                "value": "\"animateTransform\""
              },
              {
                "value": "\"circle\""
              },
              {
                "value": "\"clipPath\""
              },
              {
                "value": "\"defs\""
              },
              {
                "value": "\"desc\""
              },
              {
                "value": "\"ellipse\""
              },
              {
                "value": "\"feBlend\""
              },
              {
                "value": "\"feColorMatrix\""
              },
              {
                "value": "\"feComponentTransfer\""
              },
              {
                "value": "\"feComposite\""
              },
              {
                "value": "\"feConvolveMatrix\""
              },
              {
                "value": "\"feDiffuseLighting\""
              },
              {
                "value": "\"feDisplacementMap\""
              },
              {
                "value": "\"feDistantLight\""
              },
              {
                "value": "\"feDropShadow\""
              },
              {
                "value": "\"feFlood\""
              },
              {
                "value": "\"feFuncA\""
              },
              {
                "value": "\"feFuncB\""
              },
              {
                "value": "\"feFuncG\""
              },
              {
                "value": "\"feFuncR\""
              },
              {
                "value": "\"feGaussianBlur\""
              },
              {
                "value": "\"feImage\""
              },
              {
                "value": "\"feMerge\""
              },
              {
                "value": "\"feMergeNode\""
              },
              {
                "value": "\"feMorphology\""
              },
              {
                "value": "\"feOffset\""
              },
              {
                "value": "\"fePointLight\""
              },
              {
                "value": "\"feSpecularLighting\""
              },
              {
                "value": "\"feSpotLight\""
              },
              {
                "value": "\"feTile\""
              },
              {
                "value": "\"feTurbulence\""
              },
              {
                "value": "\"filter\""
              },
              {
                "value": "\"foreignObject\""
              },
              {
                "value": "\"g\""
              },
              {
                "value": "\"image\""
              },
              {
                "value": "\"line\""
              },
              {
                "value": "\"linearGradient\""
              },
              {
                "value": "\"marker\""
              },
              {
                "value": "\"mask\""
              },
              {
                "value": "\"metadata\""
              },
              {
                "value": "\"mpath\""
              },
              {
                "value": "\"path\""
              },
              {
                "value": "\"pattern\""
              },
              {
                "value": "\"polygon\""
              },
              {
                "value": "\"polyline\""
              },
              {
                "value": "\"radialGradient\""
              },
              {
                "value": "\"rect\""
              },
              {
                "value": "\"stop\""
              },
              {
                "value": "\"switch\""
              },
              {
                "value": "\"text\""
              },
              {
                "value": "\"textPath\""
              },
              {
                "value": "\"tspan\""
              },
              {
                "value": "\"use\""
              },
              {
                "value": "\"view\""
              },
              {
                "value": "ComponentClass<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "FunctionComponent<any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          }
        }
      }
    }
  }
}
