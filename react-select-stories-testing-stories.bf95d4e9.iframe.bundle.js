"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[1110],{"./modules/react/select/stories/testing.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.SelectThemedStates=exports.SelectStates=exports.SelectOpenMenuThemedStates=exports.SelectOpenMenuStates=void 0;(function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n})(__webpack_require__("./node_modules/react/index.js"));var _testing=__webpack_require__("./modules/react/testing/index.ts"),_storybook=__webpack_require__("./utils/storybook/index.ts"),_formField=__webpack_require__("./modules/react/form-field/index.ts"),_select=__webpack_require__("./modules/react/select/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}exports.default={title:"Testing/Inputs/Select",component:_select.Select,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import * as React from 'react';\\n\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {customColorTheme} from '../../../../utils/storybook';\\nimport {FormField} from '@workday/canvas-kit-react/form-field';\\n\\nimport {Select, useSelectModel} from '@workday/canvas-kit-react/select';\\nimport {PartialEmotionCanvasTheme} from '@workday/canvas-kit-react/common';\\n\\nexport default {\\n  title: 'Testing/Inputs/Select',\\n  component: Select,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nconst options = [\\n  {id: 'E-mail', data: {textValue: 'foo'}},\\n  {id: 'Phone'},\\n  {id: 'Fax (disabled)', disabled: true},\\n  {id: 'Mail'},\\n  {id: 'Mobile Phone'},\\n  {\\n    id: 'The Ontologically Anthropocentric Sensory Immersive Simulation',\\n    disabled: false,\\n  },\\n];\\n\\nconst disabledItems = options.filter(item => item.disabled === true).map(item => item.id);\\n\\nexport const SelectStates = (props: {theme?: PartialEmotionCanvasTheme}) => {\\n  const model = useSelectModel({\\n    items: options,\\n    nonInteractiveIds: disabledItems,\\n  });\\n  return (\\n    <StaticStates theme={props.theme}>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'Default', props: {}},\\n          {label: 'Caution', props: {error: 'caution'}},\\n          {label: 'Error', props: {error: 'error'}},\\n        ]}\\n        columnProps={permutateProps(\\n          {\\n            className: [\\n              {label: 'Default', value: ''},\\n              {label: 'Hover', value: 'hover'},\\n              {label: 'Focus', value: 'focus'},\\n              {label: 'Focus Hover', value: 'focus hover'},\\n              {label: 'Active', value: 'active'},\\n              {label: 'Active Hover', value: 'active hover'},\\n            ],\\n            disabled: [\\n              {label: '', value: false},\\n              {label: 'Disabled', value: true},\\n            ],\\n          },\\n          props => {\\n            return !props.disabled || !props.className || props.className === 'hover';\\n          }\\n        )}\\n      >\\n        {props => (\\n          <FormField>\\n            <FormField.Label>Contact</FormField.Label>\\n            <Select model={model}>\\n              <FormField.Input as={Select.Input} {...props} id=\\\"contact-select\\\" />\\n              <Select.Popper>\\n                <Select.Card maxHeight=\\\"200px\\\">\\n                  {model.state.items.length > 0 && (\\n                    <Select.List>\\n                      {item => {\\n                        return (\\n                          <Select.Item aria-disabled={item.disabled ? item.disabled : undefined}>\\n                            {item.id}\\n                          </Select.Item>\\n                        );\\n                      }}\\n                    </Select.List>\\n                  )}\\n                </Select.Card>\\n              </Select.Popper>\\n            </Select>\\n          </FormField>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\\nexport const SelectOpenMenuStates = (props: {theme?: PartialEmotionCanvasTheme}) => {\\n  const model = useSelectModel({\\n    items: options,\\n    nonInteractiveIds: disabledItems,\\n    initialVisibility: 'visible',\\n  });\\n  return (\\n    <div style={{height: 400}}>\\n      <StaticStates theme={props.theme}>\\n        <ComponentStatesTable\\n          rowProps={[{label: '', props: {}}]}\\n          columnProps={[\\n            {label: 'Default', props: {}},\\n            {label: 'Caution', props: {error: 'caution'}},\\n            {label: 'Error', props: {error: 'error'}},\\n          ]}\\n        >\\n          {props => (\\n            <FormField>\\n              <FormField.Label>Contact</FormField.Label>\\n              <Select model={model}>\\n                <FormField.Input as={Select.Input} {...props} id=\\\"contact-select\\\" />\\n                <Select.Popper>\\n                  <Select.Card maxHeight=\\\"200px\\\">\\n                    {!!model.state.items.length && (\\n                      <Select.List>\\n                        {item => {\\n                          return (\\n                            <Select.Item aria-disabled={item.disabled ? item.disabled : undefined}>\\n                              {item.id}\\n                            </Select.Item>\\n                          );\\n                        }}\\n                      </Select.List>\\n                    )}\\n                  </Select.Card>\\n                </Select.Popper>\\n              </Select>\\n            </FormField>\\n          )}\\n        </ComponentStatesTable>\\n      </StaticStates>\\n    </div>\\n  );\\n};\\n\\nconst themedParameters = {\\n  parameters: {\\n    canvasProviderDecorator: {\\n      theme: customColorTheme,\\n    },\\n  },\\n};\\n\\nexport const SelectThemedStates = {\\n  render: () => <SelectStates theme={{canvas: customColorTheme}} />,\\n};\\n\\nexport const SelectOpenMenuThemedStates = {\\n  parameters: themedParameters,\\n  render: () => <SelectOpenMenuStates theme={{canvas: customColorTheme}} />,\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"SelectStates\": {\n    \"startLoc\": {\n      \"col\": 28,\n      \"line\": 38\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 97\n    },\n    \"startBody\": {\n      \"col\": 28,\n      \"line\": 38\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 97\n    }\n  },\n  \"SelectOpenMenuStates\": {\n    \"startLoc\": {\n      \"col\": 36,\n      \"line\": 99\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 143\n    },\n    \"startBody\": {\n      \"col\": 36,\n      \"line\": 99\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 143\n    }\n  },\n  \"SelectThemedStates\": {\n    \"startLoc\": {\n      \"col\": 34,\n      \"line\": 153\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 155\n    },\n    \"startBody\": {\n      \"col\": 34,\n      \"line\": 153\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 155\n    }\n  },\n  \"SelectOpenMenuThemedStates\": {\n    \"startLoc\": {\n      \"col\": 42,\n      \"line\": 157\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 160\n    },\n    \"startBody\": {\n      \"col\": 42,\n      \"line\": 157\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 160\n    }\n  }\n};\n    \nimport * as React from 'react';\n\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {customColorTheme} from '../../../../utils/storybook';\nimport {FormField} from '@workday/canvas-kit-react/form-field';\n\nimport {Select, useSelectModel} from '@workday/canvas-kit-react/select';\nimport {PartialEmotionCanvasTheme} from '@workday/canvas-kit-react/common';\n\nexport default {\n  title: 'Testing/Inputs/Select',\n  component: Select,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import * as React from 'react';\\n\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {customColorTheme} from '../../../../utils/storybook';\\nimport {FormField} from '@workday/canvas-kit-react/form-field';\\n\\nimport {Select, useSelectModel} from '@workday/canvas-kit-react/select';\\nimport {PartialEmotionCanvasTheme} from '@workday/canvas-kit-react/common';\\n\\nexport default {\\n  title: 'Testing/Inputs/Select',\\n  component: Select,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nconst options = [\\n  {id: 'E-mail', data: {textValue: 'foo'}},\\n  {id: 'Phone'},\\n  {id: 'Fax (disabled)', disabled: true},\\n  {id: 'Mail'},\\n  {id: 'Mobile Phone'},\\n  {\\n    id: 'The Ontologically Anthropocentric Sensory Immersive Simulation',\\n    disabled: false,\\n  },\\n];\\n\\nconst disabledItems = options.filter(item => item.disabled === true).map(item => item.id);\\n\\nexport const SelectStates = (props: {theme?: PartialEmotionCanvasTheme}) => {\\n  const model = useSelectModel({\\n    items: options,\\n    nonInteractiveIds: disabledItems,\\n  });\\n  return (\\n    <StaticStates theme={props.theme}>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {label: 'Default', props: {}},\\n          {label: 'Caution', props: {error: 'caution'}},\\n          {label: 'Error', props: {error: 'error'}},\\n        ]}\\n        columnProps={permutateProps(\\n          {\\n            className: [\\n              {label: 'Default', value: ''},\\n              {label: 'Hover', value: 'hover'},\\n              {label: 'Focus', value: 'focus'},\\n              {label: 'Focus Hover', value: 'focus hover'},\\n              {label: 'Active', value: 'active'},\\n              {label: 'Active Hover', value: 'active hover'},\\n            ],\\n            disabled: [\\n              {label: '', value: false},\\n              {label: 'Disabled', value: true},\\n            ],\\n          },\\n          props => {\\n            return !props.disabled || !props.className || props.className === 'hover';\\n          }\\n        )}\\n      >\\n        {props => (\\n          <FormField>\\n            <FormField.Label>Contact</FormField.Label>\\n            <Select model={model}>\\n              <FormField.Input as={Select.Input} {...props} id=\\\"contact-select\\\" />\\n              <Select.Popper>\\n                <Select.Card maxHeight=\\\"200px\\\">\\n                  {model.state.items.length > 0 && (\\n                    <Select.List>\\n                      {item => {\\n                        return (\\n                          <Select.Item aria-disabled={item.disabled ? item.disabled : undefined}>\\n                            {item.id}\\n                          </Select.Item>\\n                        );\\n                      }}\\n                    </Select.List>\\n                  )}\\n                </Select.Card>\\n              </Select.Popper>\\n            </Select>\\n          </FormField>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\\nexport const SelectOpenMenuStates = (props: {theme?: PartialEmotionCanvasTheme}) => {\\n  const model = useSelectModel({\\n    items: options,\\n    nonInteractiveIds: disabledItems,\\n    initialVisibility: 'visible',\\n  });\\n  return (\\n    <div style={{height: 400}}>\\n      <StaticStates theme={props.theme}>\\n        <ComponentStatesTable\\n          rowProps={[{label: '', props: {}}]}\\n          columnProps={[\\n            {label: 'Default', props: {}},\\n            {label: 'Caution', props: {error: 'caution'}},\\n            {label: 'Error', props: {error: 'error'}},\\n          ]}\\n        >\\n          {props => (\\n            <FormField>\\n              <FormField.Label>Contact</FormField.Label>\\n              <Select model={model}>\\n                <FormField.Input as={Select.Input} {...props} id=\\\"contact-select\\\" />\\n                <Select.Popper>\\n                  <Select.Card maxHeight=\\\"200px\\\">\\n                    {!!model.state.items.length && (\\n                      <Select.List>\\n                        {item => {\\n                          return (\\n                            <Select.Item aria-disabled={item.disabled ? item.disabled : undefined}>\\n                              {item.id}\\n                            </Select.Item>\\n                          );\\n                        }}\\n                      </Select.List>\\n                    )}\\n                  </Select.Card>\\n                </Select.Popper>\\n              </Select>\\n            </FormField>\\n          )}\\n        </ComponentStatesTable>\\n      </StaticStates>\\n    </div>\\n  );\\n};\\n\\nconst themedParameters = {\\n  parameters: {\\n    canvasProviderDecorator: {\\n      theme: customColorTheme,\\n    },\\n  },\\n};\\n\\nexport const SelectThemedStates = {\\n  render: () => <SelectStates theme={{canvas: customColorTheme}} />,\\n};\\n\\nexport const SelectOpenMenuThemedStates = {\\n  parameters: themedParameters,\\n  render: () => <SelectOpenMenuStates theme={{canvas: customColorTheme}} />,\\n};\\n\",\n    \"locationsMap\": {\n      \"select-states\": {\n        \"startLoc\": {\n          \"col\": 28,\n          \"line\": 38\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 97\n        },\n        \"startBody\": {\n          \"col\": 28,\n          \"line\": 38\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 97\n        }\n      },\n      \"select-open-menu-states\": {\n        \"startLoc\": {\n          \"col\": 36,\n          \"line\": 99\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 143\n        },\n        \"startBody\": {\n          \"col\": 36,\n          \"line\": 99\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 143\n        }\n      },\n      \"select-themed-states\": {\n        \"startLoc\": {\n          \"col\": 34,\n          \"line\": 153\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 155\n        },\n        \"startBody\": {\n          \"col\": 34,\n          \"line\": 153\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 155\n        }\n      },\n      \"select-open-menu-themed-states\": {\n        \"startLoc\": {\n          \"col\": 42,\n          \"line\": 157\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 160\n        },\n        \"startBody\": {\n          \"col\": 42,\n          \"line\": 157\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 160\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nconst options = [\n  {id: 'E-mail', data: {textValue: 'foo'}},\n  {id: 'Phone'},\n  {id: 'Fax (disabled)', disabled: true},\n  {id: 'Mail'},\n  {id: 'Mobile Phone'},\n  {\n    id: 'The Ontologically Anthropocentric Sensory Immersive Simulation',\n    disabled: false,\n  },\n];\n\nconst disabledItems = options.filter(item => item.disabled === true).map(item => item.id);\n\nexport const SelectStates = (props: {theme?: PartialEmotionCanvasTheme}) => {\n  const model = useSelectModel({\n    items: options,\n    nonInteractiveIds: disabledItems,\n  });\n  return (\n    <StaticStates theme={props.theme}>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'Default', props: {}},\n          {label: 'Caution', props: {error: 'caution'}},\n          {label: 'Error', props: {error: 'error'}},\n        ]}\n        columnProps={permutateProps(\n          {\n            className: [\n              {label: 'Default', value: ''},\n              {label: 'Hover', value: 'hover'},\n              {label: 'Focus', value: 'focus'},\n              {label: 'Focus Hover', value: 'focus hover'},\n              {label: 'Active', value: 'active'},\n              {label: 'Active Hover', value: 'active hover'},\n            ],\n            disabled: [\n              {label: '', value: false},\n              {label: 'Disabled', value: true},\n            ],\n          },\n          props => {\n            return !props.disabled || !props.className || props.className === 'hover';\n          }\n        )}\n      >\n        {props => (\n          <FormField>\n            <FormField.Label>Contact</FormField.Label>\n            <Select model={model}>\n              <FormField.Input as={Select.Input} {...props} id=\"contact-select\" />\n              <Select.Popper>\n                <Select.Card maxHeight=\"200px\">\n                  {model.state.items.length > 0 && (\n                    <Select.List>\n                      {item => {\n                        return (\n                          <Select.Item aria-disabled={item.disabled ? item.disabled : undefined}>\n                            {item.id}\n                          </Select.Item>\n                        );\n                      }}\n                    </Select.List>\n                  )}\n                </Select.Card>\n              </Select.Popper>\n            </Select>\n          </FormField>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};;\n\nexport const SelectOpenMenuStates = (props: {theme?: PartialEmotionCanvasTheme}) => {\n  const model = useSelectModel({\n    items: options,\n    nonInteractiveIds: disabledItems,\n    initialVisibility: 'visible',\n  });\n  return (\n    <div style={{height: 400}}>\n      <StaticStates theme={props.theme}>\n        <ComponentStatesTable\n          rowProps={[{label: '', props: {}}]}\n          columnProps={[\n            {label: 'Default', props: {}},\n            {label: 'Caution', props: {error: 'caution'}},\n            {label: 'Error', props: {error: 'error'}},\n          ]}\n        >\n          {props => (\n            <FormField>\n              <FormField.Label>Contact</FormField.Label>\n              <Select model={model}>\n                <FormField.Input as={Select.Input} {...props} id=\"contact-select\" />\n                <Select.Popper>\n                  <Select.Card maxHeight=\"200px\">\n                    {!!model.state.items.length && (\n                      <Select.List>\n                        {item => {\n                          return (\n                            <Select.Item aria-disabled={item.disabled ? item.disabled : undefined}>\n                              {item.id}\n                            </Select.Item>\n                          );\n                        }}\n                      </Select.List>\n                    )}\n                  </Select.Card>\n                </Select.Popper>\n              </Select>\n            </FormField>\n          )}\n        </ComponentStatesTable>\n      </StaticStates>\n    </div>\n  );\n};;\n\nconst themedParameters = {\n  parameters: {\n    canvasProviderDecorator: {\n      theme: customColorTheme,\n    },\n  },\n};\n\nexport const SelectThemedStates = {\n  render: () => <SelectStates theme={{canvas: customColorTheme}} />,\n};;\n\nexport const SelectOpenMenuThemedStates = {\n  parameters: themedParameters,\n  render: () => <SelectOpenMenuStates theme={{canvas: customColorTheme}} />,\n};\n",locationsMap:{"select-states":{startLoc:{col:28,line:197},endLoc:{col:1,line:256},startBody:{col:28,line:197},endBody:{col:1,line:256}},"select-open-menu-states":{startLoc:{col:36,line:258},endLoc:{col:1,line:302},startBody:{col:36,line:258},endBody:{col:1,line:302}},"select-themed-states":{startLoc:{col:34,line:312},endLoc:{col:1,line:314},startBody:{col:34,line:312},endBody:{col:1,line:314}},"select-open-menu-themed-states":{startLoc:{col:42,line:316},endLoc:{col:1,line:319},startBody:{col:42,line:316},endBody:{col:1,line:319}}}},storySource:{source:"import * as React from 'react';\n\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {customColorTheme} from '../../../../utils/storybook';\nimport {FormField} from '@workday/canvas-kit-react/form-field';\n\nimport {Select, useSelectModel} from '@workday/canvas-kit-react/select';\nimport {PartialEmotionCanvasTheme} from '@workday/canvas-kit-react/common';\n\nexport default {\n  title: 'Testing/Inputs/Select',\n  component: Select,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nconst options = [\n  {id: 'E-mail', data: {textValue: 'foo'}},\n  {id: 'Phone'},\n  {id: 'Fax (disabled)', disabled: true},\n  {id: 'Mail'},\n  {id: 'Mobile Phone'},\n  {\n    id: 'The Ontologically Anthropocentric Sensory Immersive Simulation',\n    disabled: false,\n  },\n];\n\nconst disabledItems = options.filter(item => item.disabled === true).map(item => item.id);\n\nexport const SelectStates = (props: {theme?: PartialEmotionCanvasTheme}) => {\n  const model = useSelectModel({\n    items: options,\n    nonInteractiveIds: disabledItems,\n  });\n  return (\n    <StaticStates theme={props.theme}>\n      <ComponentStatesTable\n        rowProps={[\n          {label: 'Default', props: {}},\n          {label: 'Caution', props: {error: 'caution'}},\n          {label: 'Error', props: {error: 'error'}},\n        ]}\n        columnProps={permutateProps(\n          {\n            className: [\n              {label: 'Default', value: ''},\n              {label: 'Hover', value: 'hover'},\n              {label: 'Focus', value: 'focus'},\n              {label: 'Focus Hover', value: 'focus hover'},\n              {label: 'Active', value: 'active'},\n              {label: 'Active Hover', value: 'active hover'},\n            ],\n            disabled: [\n              {label: '', value: false},\n              {label: 'Disabled', value: true},\n            ],\n          },\n          props => {\n            return !props.disabled || !props.className || props.className === 'hover';\n          }\n        )}\n      >\n        {props => (\n          <FormField>\n            <FormField.Label>Contact</FormField.Label>\n            <Select model={model}>\n              <FormField.Input as={Select.Input} {...props} id=\"contact-select\" />\n              <Select.Popper>\n                <Select.Card maxHeight=\"200px\">\n                  {model.state.items.length > 0 && (\n                    <Select.List>\n                      {item => {\n                        return (\n                          <Select.Item aria-disabled={item.disabled ? item.disabled : undefined}>\n                            {item.id}\n                          </Select.Item>\n                        );\n                      }}\n                    </Select.List>\n                  )}\n                </Select.Card>\n              </Select.Popper>\n            </Select>\n          </FormField>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};\n\nexport const SelectOpenMenuStates = (props: {theme?: PartialEmotionCanvasTheme}) => {\n  const model = useSelectModel({\n    items: options,\n    nonInteractiveIds: disabledItems,\n    initialVisibility: 'visible',\n  });\n  return (\n    <div style={{height: 400}}>\n      <StaticStates theme={props.theme}>\n        <ComponentStatesTable\n          rowProps={[{label: '', props: {}}]}\n          columnProps={[\n            {label: 'Default', props: {}},\n            {label: 'Caution', props: {error: 'caution'}},\n            {label: 'Error', props: {error: 'error'}},\n          ]}\n        >\n          {props => (\n            <FormField>\n              <FormField.Label>Contact</FormField.Label>\n              <Select model={model}>\n                <FormField.Input as={Select.Input} {...props} id=\"contact-select\" />\n                <Select.Popper>\n                  <Select.Card maxHeight=\"200px\">\n                    {!!model.state.items.length && (\n                      <Select.List>\n                        {item => {\n                          return (\n                            <Select.Item aria-disabled={item.disabled ? item.disabled : undefined}>\n                              {item.id}\n                            </Select.Item>\n                          );\n                        }}\n                      </Select.List>\n                    )}\n                  </Select.Card>\n                </Select.Popper>\n              </Select>\n            </FormField>\n          )}\n        </ComponentStatesTable>\n      </StaticStates>\n    </div>\n  );\n};\n\nconst themedParameters = {\n  parameters: {\n    canvasProviderDecorator: {\n      theme: customColorTheme,\n    },\n  },\n};\n\nexport const SelectThemedStates = {\n  render: () => <SelectStates theme={{canvas: customColorTheme}} />,\n};\n\nexport const SelectOpenMenuThemedStates = {\n  parameters: themedParameters,\n  render: () => <SelectOpenMenuStates theme={{canvas: customColorTheme}} />,\n};\n",locationsMap:{"select-states":{startLoc:{col:28,line:38},endLoc:{col:1,line:97},startBody:{col:28,line:38},endBody:{col:1,line:97}},"select-open-menu-states":{startLoc:{col:36,line:99},endLoc:{col:1,line:143},startBody:{col:36,line:99},endBody:{col:1,line:143}},"select-themed-states":{startLoc:{col:34,line:153},endLoc:{col:1,line:155},startBody:{col:34,line:153},endBody:{col:1,line:155}},"select-open-menu-themed-states":{startLoc:{col:42,line:157},endLoc:{col:1,line:160},startBody:{col:42,line:157},endBody:{col:1,line:160}}}},chromatic:{disable:!1}}};const options=[{id:"E-mail",data:{textValue:"foo"}},{id:"Phone"},{id:"Fax (disabled)",disabled:!0},{id:"Mail"},{id:"Mobile Phone"},{id:"The Ontologically Anthropocentric Sensory Immersive Simulation",disabled:!1}],disabledItems=options.filter((item=>!0===item.disabled)).map((item=>item.id)),SelectStates=props=>{const model=(0,_select.useSelectModel)({items:options,nonInteractiveIds:disabledItems});return(0,_jsxRuntime.jsx)(_testing.StaticStates,{theme:props.theme,children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"Default",props:{}},{label:"Caution",props:{error:"caution"}},{label:"Error",props:{error:"error"}}],columnProps:(0,_testing.permutateProps)({className:[{label:"Default",value:""},{label:"Hover",value:"hover"},{label:"Focus",value:"focus"},{label:"Focus Hover",value:"focus hover"},{label:"Active",value:"active"},{label:"Active Hover",value:"active hover"}],disabled:[{label:"",value:!1},{label:"Disabled",value:!0}]},(props=>!props.disabled||!props.className||"hover"===props.className)),children:props=>(0,_jsxRuntime.jsxs)(_formField.FormField,{children:[(0,_jsxRuntime.jsx)(_formField.FormField.Label,{children:"Contact"}),(0,_jsxRuntime.jsxs)(_select.Select,{model,children:[(0,_jsxRuntime.jsx)(_formField.FormField.Input,{as:_select.Select.Input,...props,id:"contact-select"}),(0,_jsxRuntime.jsx)(_select.Select.Popper,{children:(0,_jsxRuntime.jsx)(_select.Select.Card,{maxHeight:"200px",children:model.state.items.length>0&&(0,_jsxRuntime.jsx)(_select.Select.List,{children:item=>(0,_jsxRuntime.jsx)(_select.Select.Item,{"aria-disabled":item.disabled?item.disabled:void 0,children:item.id})})})})]})]})})})};exports.SelectStates=SelectStates,SelectStates.displayName="SelectStates";const SelectOpenMenuStates=props=>{const model=(0,_select.useSelectModel)({items:options,nonInteractiveIds:disabledItems,initialVisibility:"visible"});return(0,_jsxRuntime.jsx)("div",{style:{height:400},children:(0,_jsxRuntime.jsx)(_testing.StaticStates,{theme:props.theme,children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"",props:{}}],columnProps:[{label:"Default",props:{}},{label:"Caution",props:{error:"caution"}},{label:"Error",props:{error:"error"}}],children:props=>(0,_jsxRuntime.jsxs)(_formField.FormField,{children:[(0,_jsxRuntime.jsx)(_formField.FormField.Label,{children:"Contact"}),(0,_jsxRuntime.jsxs)(_select.Select,{model,children:[(0,_jsxRuntime.jsx)(_formField.FormField.Input,{as:_select.Select.Input,...props,id:"contact-select"}),(0,_jsxRuntime.jsx)(_select.Select.Popper,{children:(0,_jsxRuntime.jsx)(_select.Select.Card,{maxHeight:"200px",children:!!model.state.items.length&&(0,_jsxRuntime.jsx)(_select.Select.List,{children:item=>(0,_jsxRuntime.jsx)(_select.Select.Item,{"aria-disabled":item.disabled?item.disabled:void 0,children:item.id})})})})]})]})})})})};exports.SelectOpenMenuStates=SelectOpenMenuStates,SelectOpenMenuStates.displayName="SelectOpenMenuStates";const themedParameters={parameters:{canvasProviderDecorator:{theme:_storybook.customColorTheme}}};exports.SelectThemedStates={render:()=>(0,_jsxRuntime.jsx)(SelectStates,{theme:{canvas:_storybook.customColorTheme}})},exports.SelectOpenMenuThemedStates={parameters:themedParameters,render:()=>(0,_jsxRuntime.jsx)(SelectOpenMenuStates,{theme:{canvas:_storybook.customColorTheme}})};module.exports.__namedExportsOrder=["SelectThemedStates","SelectStates","SelectOpenMenuThemedStates","SelectOpenMenuStates"]}}]);