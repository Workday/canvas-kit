"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[2636],{"./modules/preview-react/_examples/stories/mdx/FormLibraryExample.stories.ts":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.TextInputWithReactHookForm=void 0;var _TextInputWithReactHookForm=__webpack_require__("./modules/preview-react/_examples/stories/mdx/examples/TextInputWithReactHookForm.tsx");exports.default={title:"Examples/Forms",parameters:{storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = "import {Meta} from \'@storybook/react\';\\n\\nimport {TextInputWithReactHookForm as TextInputWithReactHookFormExample} from \'./examples/TextInputWithReactHookForm\';\\n\\nexport default {\\n  title: \'Examples/Forms\',\\n  parameters: {},\\n} as Meta;\\n\\nexport const TextInputWithReactHookForm = {\\n  render: TextInputWithReactHookFormExample,\\n};\\n";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  "TextInputWithReactHookForm": {\n    "startLoc": {\n      "col": 42,\n      "line": 10\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 12\n    },\n    "startBody": {\n      "col": 42,\n      "line": 10\n    },\n    "endBody": {\n      "col": 1,\n      "line": 12\n    }\n  }\n};\n    \nimport {Meta} from \'@storybook/react\';\n\nimport {TextInputWithReactHookForm as TextInputWithReactHookFormExample} from \'./examples/TextInputWithReactHookForm\';\n\nexport default {\n  title: \'Examples/Forms\',\n  parameters: {\n  "storySource": {\n    "source": "import {Meta} from \'@storybook/react\';\\n\\nimport {TextInputWithReactHookForm as TextInputWithReactHookFormExample} from \'./examples/TextInputWithReactHookForm\';\\n\\nexport default {\\n  title: \'Examples/Forms\',\\n  parameters: {},\\n} as Meta;\\n\\nexport const TextInputWithReactHookForm = {\\n  render: TextInputWithReactHookFormExample,\\n};\\n",\n    "locationsMap": {\n      "text-input-with-react-hook-form": {\n        "startLoc": {\n          "col": 42,\n          "line": 10\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 12\n        },\n        "startBody": {\n          "col": 42,\n          "line": 10\n        },\n        "endBody": {\n          "col": 1,\n          "line": 12\n        }\n      }\n    }\n  }\n,},\n} as Meta;\n\nexport const TextInputWithReactHookForm = {\n  render: TextInputWithReactHookFormExample,\n};\n',locationsMap:{"text-input-with-react-hook-form":{startLoc:{col:42,line:61},endLoc:{col:1,line:63},startBody:{col:42,line:61},endBody:{col:1,line:63}}}},storySource:{source:"import {Meta} from '@storybook/react';\n\nimport {TextInputWithReactHookForm as TextInputWithReactHookFormExample} from './examples/TextInputWithReactHookForm';\n\nexport default {\n  title: 'Examples/Forms',\n  parameters: {},\n} as Meta;\n\nexport const TextInputWithReactHookForm = {\n  render: TextInputWithReactHookFormExample,\n};\n",locationsMap:{"text-input-with-react-hook-form":{startLoc:{col:42,line:10},endLoc:{col:1,line:12},startBody:{col:42,line:10},endBody:{col:1,line:12}}}}}};exports.TextInputWithReactHookForm={render:_TextInputWithReactHookForm.TextInputWithReactHookForm};module.exports.__namedExportsOrder=["TextInputWithReactHookForm"]},"./modules/preview-react/_examples/stories/mdx/FormLibraryExample.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),_workday_canvas_kit_docs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./modules/docs/index.ts"),_examples_TextInputWithReactHookForm__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./modules/preview-react/_examples/stories/mdx/examples/TextInputWithReactHookForm.tsx"),_FormLibraryExample_stories__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./modules/preview-react/_examples/stories/mdx/FormLibraryExample.stories.ts");function _createMdxContent(props){const _components=Object.assign({h2:"h2"},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__.RP)(),props.components);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.W8,{of:_FormLibraryExample_stories__WEBPACK_IMPORTED_MODULE_5__}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"uncontrolled-text-inputs-using-react-hook-form",children:"Uncontrolled Text Inputs Using React Hook Form"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_docs__WEBPACK_IMPORTED_MODULE_3__.ExampleCodeBlock,{code:_examples_TextInputWithReactHookForm__WEBPACK_IMPORTED_MODULE_6__.TextInputWithReactHookForm})]})}const __WEBPACK_DEFAULT_EXPORT__=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__.RP)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,Object.assign({},props,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,props)})):_createMdxContent(props)}},"./modules/preview-react/_examples/stories/mdx/examples/TextInputWithReactHookForm.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.TextInputWithReactHookForm=void 0;var _react=function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}(__webpack_require__("./node_modules/react/index.js")),_reactHookForm=__webpack_require__("./node_modules/react-hook-form/dist/index.cjs.js"),_yup=__webpack_require__("./node_modules/yup/es/index.js"),_textInput=__webpack_require__("./modules/preview-react/text-input/index.ts"),_layout=__webpack_require__("./modules/react/layout/index.ts"),_button=__webpack_require__("./modules/react/button/index.ts"),_select=__webpack_require__("./modules/react/select/index.ts"),_formField=__webpack_require__("./modules/react/form-field/index.ts"),_canvasSystemIconsWeb=__webpack_require__("./node_modules/@workday/canvas-system-icons-web/dist/es6/index.js"),_common=__webpack_require__("./modules/react/common/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");const useYupValidationResolver=validationSchema=>_react.default.useCallback((async data=>{try{return{values:await validationSchema.validate(data,{abortEarly:!1}),errors:{}}}catch(errors){return{values:{},errors:errors.inner.reduce(((allErrors,currentError)=>({...allErrors,[currentError.path]:{type:currentError.type??"validation",message:currentError.message}})),{})}}}),[validationSchema]),passwordHint="Password should be of minimum 8 characters length",validationSchema=(0,_yup.object)({email:(0,_yup.string)().email("Enter a valid email").required("Email is required"),password:(0,_yup.string)().min(8,passwordHint).required("Password is required"),role:(0,_yup.string)().required("Role is required")}),options=[{id:"1",label:"Developer"},{id:"2",label:"Designer"},{id:"3",label:"Product Manager"}],TextInputWithReactHookForm=()=>{const{handleSubmit,register,formState:{errors}}=(0,_reactHookForm.useForm)({defaultValues:{email:"example@baz.com",password:"foobarbaz",role:""},resolver:useYupValidationResolver(validationSchema),mode:"onTouched"}),onSubmit=handleSubmit((values=>{setShowPassword(!1),setTimeout((()=>{alert(JSON.stringify(values,null,2))}),0)})),[showPassword,setShowPassword]=_react.default.useState(!1),passwordId=(0,_common.useUniqueId)(),passwordRef=_react.default.useRef(null),{ref:passwordCallbackRef,...passwordRegistration}=register("password");return(0,_jsxRuntime.jsx)("form",{onSubmit,action:".",noValidate:!0,children:(0,_jsxRuntime.jsxs)(_layout.Flex,{gap:"xs",flexDirection:"column",alignItems:"flex-start",children:[(0,_jsxRuntime.jsx)(_formField.FormField,{orientation:"vertical",isRequired:!0,error:errors.role?"error":void 0,children:(0,_jsxRuntime.jsxs)(_select.Select,{items:options,getTextValue:item=>item.label,children:[(0,_jsxRuntime.jsx)(_formField.FormField.Label,{children:"What is your role?"}),(0,_jsxRuntime.jsx)(_formField.FormField.Input,{as:_select.Select.Input,...register("role"),width:"280px"}),(0,_jsxRuntime.jsx)(_select.Select.Popper,{children:(0,_jsxRuntime.jsx)(_select.Select.Card,{children:(0,_jsxRuntime.jsx)(_select.Select.List,{maxHeight:200,children:item=>(0,_jsxRuntime.jsx)(_select.Select.Item,{children:item.label})})})}),(0,_jsxRuntime.jsx)(_formField.FormField.Hint,{children:errors.role?.message})]})}),(0,_jsxRuntime.jsxs)(_textInput.TextInput,{orientation:"vertical",isRequired:!0,error:errors.email?"error":void 0,children:[(0,_jsxRuntime.jsx)(_textInput.TextInput.Label,{children:"Email"}),(0,_jsxRuntime.jsx)(_textInput.TextInput.Field,{...register("email"),autoComplete:"username",placeholder:"yourName@example.com"}),(0,_jsxRuntime.jsx)(_textInput.TextInput.Hint,{children:errors.email?.message})]}),(0,_jsxRuntime.jsxs)(_textInput.TextInput,{orientation:"vertical",id:passwordId,isRequired:!0,error:errors.password?"error":void 0,children:[(0,_jsxRuntime.jsx)(_textInput.TextInput.Label,{children:"Password"}),(0,_jsxRuntime.jsxs)(_layout.Flex,{gap:"xxs",children:[(0,_jsxRuntime.jsx)(_textInput.TextInput.Field,{...passwordRegistration,type:showPassword?"text":"password",autoComplete:"current-password",spellCheck:!1,ref:ref=>{passwordCallbackRef(ref),passwordRef.current=ref}}),(0,_jsxRuntime.jsx)(_button.TertiaryButton,{type:"button",icon:showPassword?_canvasSystemIconsWeb.invisibleIcon:_canvasSystemIconsWeb.visibleIcon,"aria-label":showPassword?"Hide Password":"Show Password","aria-controls":`input-${passwordId}`,onClick:()=>{setShowPassword((state=>!state)),passwordRef.current?.focus()}})]}),(0,_jsxRuntime.jsx)(_textInput.TextInput.Hint,{children:errors.password?.message||passwordHint})]}),(0,_jsxRuntime.jsx)(_button.PrimaryButton,{type:"submit",children:"Submit"})]})})};exports.TextInputWithReactHookForm=TextInputWithReactHookForm,TextInputWithReactHookForm.displayName="TextInputWithReactHookForm",TextInputWithReactHookForm.__RAW__="import React from 'react';\n\nimport {useForm, FieldErrorsImpl} from 'react-hook-form';\nimport {object, SchemaOf, string} from 'yup';\n\nimport {TextInput} from '@workday/canvas-kit-preview-react/text-input';\nimport {Flex} from '@workday/canvas-kit-react/layout';\nimport {TertiaryButton, PrimaryButton} from '@workday/canvas-kit-react/button';\nimport {Select} from '@workday/canvas-kit-react/select';\nimport {FormField} from '@workday/canvas-kit-react/form-field';\nimport {visibleIcon, invisibleIcon} from '@workday/canvas-system-icons-web';\nimport {useUniqueId} from '@workday/canvas-kit-react/common';\n\ntype YupValidationResolver = <T extends {}>(\n  validationSchema: SchemaOf<T>\n) => (data: T) => Promise<{values: T; errors: {}} | {values: {}; errors: FieldErrorsImpl<T>}>;\n\nconst useYupValidationResolver: YupValidationResolver = validationSchema => {\n  return React.useCallback(\n    async data => {\n      try {\n        const values = await validationSchema.validate(data, {abortEarly: false});\n        return {values, errors: {}};\n      } catch (errors) {\n        return {\n          values: {},\n          //@ts-ignore\n          errors: errors.inner.reduce(\n            (allErrors, currentError) => ({\n              ...allErrors,\n              [currentError.path]: {\n                type: currentError.type ?? 'validation',\n                message: currentError.message,\n              },\n            }),\n            {}\n          ),\n        };\n      }\n    },\n    [validationSchema]\n  );\n};\n\ninterface LoginSchema {\n  email: string;\n  password: string;\n  role: string;\n}\n\nconst passwordMinimum = 8;\nconst passwordHint = `Password should be of minimum ${passwordMinimum} characters length`;\nconst emailRequired = 'Email is required';\nconst passwordRequired = 'Password is required';\nconst roleRequired = 'Role is required';\n\nconst validationSchema: SchemaOf<LoginSchema> = object({\n  email: string().email('Enter a valid email').required(emailRequired),\n  password: string().min(passwordMinimum, passwordHint).required(passwordRequired),\n  role: string().required(roleRequired),\n});\n\nconst options = [\n  {id: '1', label: 'Developer'},\n  {id: '2', label: 'Designer'},\n  {id: '3', label: 'Product Manager'},\n];\n\nexport const TextInputWithReactHookForm = () => {\n  const {\n    handleSubmit,\n    register,\n    formState: {errors},\n  } = useForm<LoginSchema>({\n    defaultValues: {\n      email: 'example@baz.com',\n      password: 'foobarbaz',\n      role: '',\n    },\n    resolver: useYupValidationResolver(validationSchema),\n    mode: 'onTouched',\n  });\n\n  const onSubmit = handleSubmit(values => {\n    setShowPassword(false);\n    // Send data to server\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n    }, 0);\n  });\n\n  const [showPassword, setShowPassword] = React.useState(false);\n  const passwordId = useUniqueId();\n  const passwordRef = React.useRef<HTMLInputElement | null>(null);\n  const {ref: passwordCallbackRef, ...passwordRegistration} = register('password');\n  const combinePasswordRef = (ref: HTMLInputElement | null) => {\n    passwordCallbackRef(ref);\n    passwordRef.current = ref;\n  };\n  return (\n    <form onSubmit={onSubmit} action=\".\" noValidate={true}>\n      <Flex gap=\"xs\" flexDirection=\"column\" alignItems=\"flex-start\">\n        <FormField\n          orientation=\"vertical\"\n          isRequired={true}\n          error={!!errors.role ? 'error' : undefined}\n        >\n          <Select items={options} getTextValue={item => item.label}>\n            <FormField.Label>What is your role?</FormField.Label>\n            <FormField.Input as={Select.Input} {...register('role')} width=\"280px\" />\n            <Select.Popper>\n              <Select.Card>\n                <Select.List maxHeight={200}>\n                  {item => {\n                    return <Select.Item>{item.label}</Select.Item>;\n                  }}\n                </Select.List>\n              </Select.Card>\n            </Select.Popper>\n            <FormField.Hint>{errors.role?.message}</FormField.Hint>\n          </Select>\n        </FormField>\n        <TextInput\n          orientation=\"vertical\"\n          isRequired={true}\n          error={!!errors.email ? 'error' : undefined}\n        >\n          <TextInput.Label>Email</TextInput.Label>\n          <TextInput.Field\n            {...register('email')}\n            autoComplete=\"username\"\n            placeholder=\"yourName@example.com\"\n          />\n          <TextInput.Hint>{errors.email?.message}</TextInput.Hint>\n        </TextInput>\n        <TextInput\n          orientation=\"vertical\"\n          id={passwordId}\n          isRequired={true}\n          error={!!errors.password ? 'error' : undefined}\n        >\n          <TextInput.Label>Password</TextInput.Label>\n          <Flex gap=\"xxs\">\n            <TextInput.Field\n              {...passwordRegistration}\n              type={showPassword ? 'text' : 'password'}\n              autoComplete=\"current-password\"\n              spellCheck={false}\n              ref={combinePasswordRef}\n            />\n            <TertiaryButton\n              type=\"button\"\n              icon={showPassword ? invisibleIcon : visibleIcon}\n              aria-label={showPassword ? 'Hide Password' : 'Show Password'}\n              aria-controls={`input-${passwordId}`}\n              onClick={() => {\n                setShowPassword(state => !state);\n                passwordRef.current?.focus();\n              }}\n            />\n          </Flex>\n          <TextInput.Hint>{errors.password?.message || passwordHint}</TextInput.Hint>\n        </TextInput>\n\n        <PrimaryButton type=\"submit\">Submit</PrimaryButton>\n      </Flex>\n    </form>\n  );\n};\n"}}]);