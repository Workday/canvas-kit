"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[4010],{"./modules/preview-react/pill/stories/testing.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.RemovablePillStates=exports.ReadOnlyPillStates=exports.PillStatesCount=exports.PillStatesAvatar=exports.PillStates=void 0;var _testing=__webpack_require__("./modules/react/testing/index.ts"),_pill=__webpack_require__("./modules/preview-react/pill/index.ts"),_utils=__webpack_require__("./modules/react/button/stories/visual-testing/utils.tsx"),_testAvatar=function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}(__webpack_require__("./modules/preview-react/pill/stories/examples/test-avatar.png")),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");exports.default={title:"Testing/Preview/Pill",component:_pill.Pill,parameters:{storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = "import {ComponentStatesTable, StaticStates} from \'@workday/canvas-kit-react/testing\';\\n\\nimport {Pill} from \'@workday/canvas-kit-preview-react/pill\';\\nimport {stateTableColumnProps} from \'@workday/canvas-kit-react/button/stories/visual-testing/utils\';\\n// @ts-ignore: Cannot find module error\\nimport testAvatar from \'./examples/test-avatar.png\';\\n\\nexport default {\\n  title: \'Testing/Preview/Pill\',\\n  component: Pill,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const ReadOnlyPillStates = () => {\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[{label: \'Default\', props: {}}]}\\n        columnProps={[\\n          {\\n            label: \'Default read only\',\\n            props: {},\\n          },\\n          {\\n            label: \'With max width\',\\n            props: {maxWidth: 200},\\n          },\\n        ]}\\n      >\\n        {({maxWidth}) => {\\n          return (\\n            <Pill variant=\\"readOnly\\" maxWidth={maxWidth}>\\n              {maxWidth ? \'This is a super long te that should overflow\' : \'PillLabel\'}\\n            </Pill>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\\nexport const PillStates = () => {\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {\\n            label: \'With Icon\',\\n            props: {},\\n          },\\n        ]}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {props => {\\n          return (\\n            <Pill onClick={() => console.warn(\'clicked\')} {...props}>\\n              <Pill.Icon aria-label=\\"add\\" />\\n              <Pill.Label>Regina Skeltor</Pill.Label>\\n            </Pill>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\\nexport const PillStatesAvatar = () => {\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {\\n            label: \'With Avatar\',\\n            props: {},\\n          },\\n        ]}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {props => {\\n          return (\\n            <Pill onClick={() => console.warn(\'clicked\')} {...props}>\\n              <Pill.Avatar name=\\"Avatar\\" url={testAvatar} />\\n              <Pill.Label>Regina Skeltor</Pill.Label>\\n            </Pill>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\\nexport const PillStatesCount = () => {\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {\\n            label: \'With Count\',\\n            props: {count: true},\\n          },\\n        ]}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {props => {\\n          return (\\n            <Pill onClick={() => console.warn(\'clicked\')} {...props}>\\n              <Pill.Label>Shoes</Pill.Label>\\n              <Pill.Count>30</Pill.Count>\\n            </Pill>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\\nexport const RemovablePillStates = () => {\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {\\n            label: \'Removable\',\\n            props: {},\\n          },\\n          {\\n            label: \'With Avatar\',\\n            props: {avatar: true},\\n          },\\n          {\\n            label: \'With Max Width\',\\n            props: {maxWidth: 250},\\n          },\\n        ]}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {({avatar, maxWidth, ...props}) => {\\n          return (\\n            <Pill variant=\\"removable\\" {...props}>\\n              {avatar && <Pill.Avatar name=\\"Avatar\\" url={testAvatar} />}\\n              {maxWidth ? (\\n                <Pill.Label>This is a super long text that should overflow</Pill.Label>\\n              ) : (\\n                <Pill.Label>PillLabel</Pill.Label>\\n              )}\\n              <Pill.IconButton aria-label=\\"Remove\\" {...props} />\\n            </Pill>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  "ReadOnlyPillStates": {\n    "startLoc": {\n      "col": 34,\n      "line": 18\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 44\n    },\n    "startBody": {\n      "col": 34,\n      "line": 18\n    },\n    "endBody": {\n      "col": 1,\n      "line": 44\n    }\n  },\n  "PillStates": {\n    "startLoc": {\n      "col": 26,\n      "line": 46\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 69\n    },\n    "startBody": {\n      "col": 26,\n      "line": 46\n    },\n    "endBody": {\n      "col": 1,\n      "line": 69\n    }\n  },\n  "PillStatesAvatar": {\n    "startLoc": {\n      "col": 32,\n      "line": 71\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 94\n    },\n    "startBody": {\n      "col": 32,\n      "line": 71\n    },\n    "endBody": {\n      "col": 1,\n      "line": 94\n    }\n  },\n  "PillStatesCount": {\n    "startLoc": {\n      "col": 31,\n      "line": 96\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 119\n    },\n    "startBody": {\n      "col": 31,\n      "line": 96\n    },\n    "endBody": {\n      "col": 1,\n      "line": 119\n    }\n  },\n  "RemovablePillStates": {\n    "startLoc": {\n      "col": 35,\n      "line": 121\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 157\n    },\n    "startBody": {\n      "col": 35,\n      "line": 121\n    },\n    "endBody": {\n      "col": 1,\n      "line": 157\n    }\n  }\n};\n    \nimport {ComponentStatesTable, StaticStates} from \'@workday/canvas-kit-react/testing\';\n\nimport {Pill} from \'@workday/canvas-kit-preview-react/pill\';\nimport {stateTableColumnProps} from \'@workday/canvas-kit-react/button/stories/visual-testing/utils\';\n// @ts-ignore: Cannot find module error\nimport testAvatar from \'./examples/test-avatar.png\';\n\nexport default {\n  title: \'Testing/Preview/Pill\',\n  component: Pill,\n  parameters: {\n  "storySource": {\n    "source": "import {ComponentStatesTable, StaticStates} from \'@workday/canvas-kit-react/testing\';\\n\\nimport {Pill} from \'@workday/canvas-kit-preview-react/pill\';\\nimport {stateTableColumnProps} from \'@workday/canvas-kit-react/button/stories/visual-testing/utils\';\\n// @ts-ignore: Cannot find module error\\nimport testAvatar from \'./examples/test-avatar.png\';\\n\\nexport default {\\n  title: \'Testing/Preview/Pill\',\\n  component: Pill,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const ReadOnlyPillStates = () => {\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[{label: \'Default\', props: {}}]}\\n        columnProps={[\\n          {\\n            label: \'Default read only\',\\n            props: {},\\n          },\\n          {\\n            label: \'With max width\',\\n            props: {maxWidth: 200},\\n          },\\n        ]}\\n      >\\n        {({maxWidth}) => {\\n          return (\\n            <Pill variant=\\"readOnly\\" maxWidth={maxWidth}>\\n              {maxWidth ? \'This is a super long te that should overflow\' : \'PillLabel\'}\\n            </Pill>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\\nexport const PillStates = () => {\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {\\n            label: \'With Icon\',\\n            props: {},\\n          },\\n        ]}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {props => {\\n          return (\\n            <Pill onClick={() => console.warn(\'clicked\')} {...props}>\\n              <Pill.Icon aria-label=\\"add\\" />\\n              <Pill.Label>Regina Skeltor</Pill.Label>\\n            </Pill>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\\nexport const PillStatesAvatar = () => {\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {\\n            label: \'With Avatar\',\\n            props: {},\\n          },\\n        ]}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {props => {\\n          return (\\n            <Pill onClick={() => console.warn(\'clicked\')} {...props}>\\n              <Pill.Avatar name=\\"Avatar\\" url={testAvatar} />\\n              <Pill.Label>Regina Skeltor</Pill.Label>\\n            </Pill>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\\nexport const PillStatesCount = () => {\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {\\n            label: \'With Count\',\\n            props: {count: true},\\n          },\\n        ]}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {props => {\\n          return (\\n            <Pill onClick={() => console.warn(\'clicked\')} {...props}>\\n              <Pill.Label>Shoes</Pill.Label>\\n              <Pill.Count>30</Pill.Count>\\n            </Pill>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n\\nexport const RemovablePillStates = () => {\\n  return (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={[\\n          {\\n            label: \'Removable\',\\n            props: {},\\n          },\\n          {\\n            label: \'With Avatar\',\\n            props: {avatar: true},\\n          },\\n          {\\n            label: \'With Max Width\',\\n            props: {maxWidth: 250},\\n          },\\n        ]}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {({avatar, maxWidth, ...props}) => {\\n          return (\\n            <Pill variant=\\"removable\\" {...props}>\\n              {avatar && <Pill.Avatar name=\\"Avatar\\" url={testAvatar} />}\\n              {maxWidth ? (\\n                <Pill.Label>This is a super long text that should overflow</Pill.Label>\\n              ) : (\\n                <Pill.Label>PillLabel</Pill.Label>\\n              )}\\n              <Pill.IconButton aria-label=\\"Remove\\" {...props} />\\n            </Pill>\\n          );\\n        }}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  );\\n};\\n",\n    "locationsMap": {\n      "read-only-pill-states": {\n        "startLoc": {\n          "col": 34,\n          "line": 18\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 44\n        },\n        "startBody": {\n          "col": 34,\n          "line": 18\n        },\n        "endBody": {\n          "col": 1,\n          "line": 44\n        }\n      },\n      "pill-states": {\n        "startLoc": {\n          "col": 26,\n          "line": 46\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 69\n        },\n        "startBody": {\n          "col": 26,\n          "line": 46\n        },\n        "endBody": {\n          "col": 1,\n          "line": 69\n        }\n      },\n      "pill-states-avatar": {\n        "startLoc": {\n          "col": 32,\n          "line": 71\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 94\n        },\n        "startBody": {\n          "col": 32,\n          "line": 71\n        },\n        "endBody": {\n          "col": 1,\n          "line": 94\n        }\n      },\n      "pill-states-count": {\n        "startLoc": {\n          "col": 31,\n          "line": 96\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 119\n        },\n        "startBody": {\n          "col": 31,\n          "line": 96\n        },\n        "endBody": {\n          "col": 1,\n          "line": 119\n        }\n      },\n      "removable-pill-states": {\n        "startLoc": {\n          "col": 35,\n          "line": 121\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 157\n        },\n        "startBody": {\n          "col": 35,\n          "line": 121\n        },\n        "endBody": {\n          "col": 1,\n          "line": 157\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const ReadOnlyPillStates = () => {\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[{label: \'Default\', props: {}}]}\n        columnProps={[\n          {\n            label: \'Default read only\',\n            props: {},\n          },\n          {\n            label: \'With max width\',\n            props: {maxWidth: 200},\n          },\n        ]}\n      >\n        {({maxWidth}) => {\n          return (\n            <Pill variant="readOnly" maxWidth={maxWidth}>\n              {maxWidth ? \'This is a super long te that should overflow\' : \'PillLabel\'}\n            </Pill>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};;\n\nexport const PillStates = () => {\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {\n            label: \'With Icon\',\n            props: {},\n          },\n        ]}\n        columnProps={stateTableColumnProps}\n      >\n        {props => {\n          return (\n            <Pill onClick={() => console.warn(\'clicked\')} {...props}>\n              <Pill.Icon aria-label="add" />\n              <Pill.Label>Regina Skeltor</Pill.Label>\n            </Pill>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};;\n\nexport const PillStatesAvatar = () => {\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {\n            label: \'With Avatar\',\n            props: {},\n          },\n        ]}\n        columnProps={stateTableColumnProps}\n      >\n        {props => {\n          return (\n            <Pill onClick={() => console.warn(\'clicked\')} {...props}>\n              <Pill.Avatar name="Avatar" url={testAvatar} />\n              <Pill.Label>Regina Skeltor</Pill.Label>\n            </Pill>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};;\n\nexport const PillStatesCount = () => {\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {\n            label: \'With Count\',\n            props: {count: true},\n          },\n        ]}\n        columnProps={stateTableColumnProps}\n      >\n        {props => {\n          return (\n            <Pill onClick={() => console.warn(\'clicked\')} {...props}>\n              <Pill.Label>Shoes</Pill.Label>\n              <Pill.Count>30</Pill.Count>\n            </Pill>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};;\n\nexport const RemovablePillStates = () => {\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {\n            label: \'Removable\',\n            props: {},\n          },\n          {\n            label: \'With Avatar\',\n            props: {avatar: true},\n          },\n          {\n            label: \'With Max Width\',\n            props: {maxWidth: 250},\n          },\n        ]}\n        columnProps={stateTableColumnProps}\n      >\n        {({avatar, maxWidth, ...props}) => {\n          return (\n            <Pill variant="removable" {...props}>\n              {avatar && <Pill.Avatar name="Avatar" url={testAvatar} />}\n              {maxWidth ? (\n                <Pill.Label>This is a super long text that should overflow</Pill.Label>\n              ) : (\n                <Pill.Label>PillLabel</Pill.Label>\n              )}\n              <Pill.IconButton aria-label="Remove" {...props} />\n            </Pill>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};\n',locationsMap:{"read-only-pill-states":{startLoc:{col:34,line:213},endLoc:{col:1,line:239},startBody:{col:34,line:213},endBody:{col:1,line:239}},"pill-states":{startLoc:{col:26,line:241},endLoc:{col:1,line:264},startBody:{col:26,line:241},endBody:{col:1,line:264}},"pill-states-avatar":{startLoc:{col:32,line:266},endLoc:{col:1,line:289},startBody:{col:32,line:266},endBody:{col:1,line:289}},"pill-states-count":{startLoc:{col:31,line:291},endLoc:{col:1,line:314},startBody:{col:31,line:291},endBody:{col:1,line:314}},"removable-pill-states":{startLoc:{col:35,line:316},endLoc:{col:1,line:352},startBody:{col:35,line:316},endBody:{col:1,line:352}}}},storySource:{source:"import {ComponentStatesTable, StaticStates} from '@workday/canvas-kit-react/testing';\n\nimport {Pill} from '@workday/canvas-kit-preview-react/pill';\nimport {stateTableColumnProps} from '@workday/canvas-kit-react/button/stories/visual-testing/utils';\n// @ts-ignore: Cannot find module error\nimport testAvatar from './examples/test-avatar.png';\n\nexport default {\n  title: 'Testing/Preview/Pill',\n  component: Pill,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const ReadOnlyPillStates = () => {\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[{label: 'Default', props: {}}]}\n        columnProps={[\n          {\n            label: 'Default read only',\n            props: {},\n          },\n          {\n            label: 'With max width',\n            props: {maxWidth: 200},\n          },\n        ]}\n      >\n        {({maxWidth}) => {\n          return (\n            <Pill variant=\"readOnly\" maxWidth={maxWidth}>\n              {maxWidth ? 'This is a super long te that should overflow' : 'PillLabel'}\n            </Pill>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};\n\nexport const PillStates = () => {\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {\n            label: 'With Icon',\n            props: {},\n          },\n        ]}\n        columnProps={stateTableColumnProps}\n      >\n        {props => {\n          return (\n            <Pill onClick={() => console.warn('clicked')} {...props}>\n              <Pill.Icon aria-label=\"add\" />\n              <Pill.Label>Regina Skeltor</Pill.Label>\n            </Pill>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};\n\nexport const PillStatesAvatar = () => {\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {\n            label: 'With Avatar',\n            props: {},\n          },\n        ]}\n        columnProps={stateTableColumnProps}\n      >\n        {props => {\n          return (\n            <Pill onClick={() => console.warn('clicked')} {...props}>\n              <Pill.Avatar name=\"Avatar\" url={testAvatar} />\n              <Pill.Label>Regina Skeltor</Pill.Label>\n            </Pill>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};\n\nexport const PillStatesCount = () => {\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {\n            label: 'With Count',\n            props: {count: true},\n          },\n        ]}\n        columnProps={stateTableColumnProps}\n      >\n        {props => {\n          return (\n            <Pill onClick={() => console.warn('clicked')} {...props}>\n              <Pill.Label>Shoes</Pill.Label>\n              <Pill.Count>30</Pill.Count>\n            </Pill>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};\n\nexport const RemovablePillStates = () => {\n  return (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={[\n          {\n            label: 'Removable',\n            props: {},\n          },\n          {\n            label: 'With Avatar',\n            props: {avatar: true},\n          },\n          {\n            label: 'With Max Width',\n            props: {maxWidth: 250},\n          },\n        ]}\n        columnProps={stateTableColumnProps}\n      >\n        {({avatar, maxWidth, ...props}) => {\n          return (\n            <Pill variant=\"removable\" {...props}>\n              {avatar && <Pill.Avatar name=\"Avatar\" url={testAvatar} />}\n              {maxWidth ? (\n                <Pill.Label>This is a super long text that should overflow</Pill.Label>\n              ) : (\n                <Pill.Label>PillLabel</Pill.Label>\n              )}\n              <Pill.IconButton aria-label=\"Remove\" {...props} />\n            </Pill>\n          );\n        }}\n      </ComponentStatesTable>\n    </StaticStates>\n  );\n};\n",locationsMap:{"read-only-pill-states":{startLoc:{col:34,line:18},endLoc:{col:1,line:44},startBody:{col:34,line:18},endBody:{col:1,line:44}},"pill-states":{startLoc:{col:26,line:46},endLoc:{col:1,line:69},startBody:{col:26,line:46},endBody:{col:1,line:69}},"pill-states-avatar":{startLoc:{col:32,line:71},endLoc:{col:1,line:94},startBody:{col:32,line:71},endBody:{col:1,line:94}},"pill-states-count":{startLoc:{col:31,line:96},endLoc:{col:1,line:119},startBody:{col:31,line:96},endBody:{col:1,line:119}},"removable-pill-states":{startLoc:{col:35,line:121},endLoc:{col:1,line:157},startBody:{col:35,line:121},endBody:{col:1,line:157}}}},chromatic:{disable:!1}}};const ReadOnlyPillStates=()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"Default",props:{}}],columnProps:[{label:"Default read only",props:{}},{label:"With max width",props:{maxWidth:200}}],children:({maxWidth})=>(0,_jsxRuntime.jsx)(_pill.Pill,{variant:"readOnly",maxWidth,children:maxWidth?"This is a super long te that should overflow":"PillLabel"})})});exports.ReadOnlyPillStates=ReadOnlyPillStates,ReadOnlyPillStates.displayName="ReadOnlyPillStates";const PillStates=()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"With Icon",props:{}}],columnProps:_utils.stateTableColumnProps,children:props=>(0,_jsxRuntime.jsxs)(_pill.Pill,{onClick:()=>console.warn("clicked"),...props,children:[(0,_jsxRuntime.jsx)(_pill.Pill.Icon,{"aria-label":"add"}),(0,_jsxRuntime.jsx)(_pill.Pill.Label,{children:"Regina Skeltor"})]})})});exports.PillStates=PillStates,PillStates.displayName="PillStates";const PillStatesAvatar=()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"With Avatar",props:{}}],columnProps:_utils.stateTableColumnProps,children:props=>(0,_jsxRuntime.jsxs)(_pill.Pill,{onClick:()=>console.warn("clicked"),...props,children:[(0,_jsxRuntime.jsx)(_pill.Pill.Avatar,{name:"Avatar",url:_testAvatar.default}),(0,_jsxRuntime.jsx)(_pill.Pill.Label,{children:"Regina Skeltor"})]})})});exports.PillStatesAvatar=PillStatesAvatar,PillStatesAvatar.displayName="PillStatesAvatar";const PillStatesCount=()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"With Count",props:{count:!0}}],columnProps:_utils.stateTableColumnProps,children:props=>(0,_jsxRuntime.jsxs)(_pill.Pill,{onClick:()=>console.warn("clicked"),...props,children:[(0,_jsxRuntime.jsx)(_pill.Pill.Label,{children:"Shoes"}),(0,_jsxRuntime.jsx)(_pill.Pill.Count,{children:"30"})]})})});exports.PillStatesCount=PillStatesCount,PillStatesCount.displayName="PillStatesCount";const RemovablePillStates=()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:[{label:"Removable",props:{}},{label:"With Avatar",props:{avatar:!0}},{label:"With Max Width",props:{maxWidth:250}}],columnProps:_utils.stateTableColumnProps,children:({avatar,maxWidth,...props})=>(0,_jsxRuntime.jsxs)(_pill.Pill,{variant:"removable",...props,children:[avatar&&(0,_jsxRuntime.jsx)(_pill.Pill.Avatar,{name:"Avatar",url:_testAvatar.default}),maxWidth?(0,_jsxRuntime.jsx)(_pill.Pill.Label,{children:"This is a super long text that should overflow"}):(0,_jsxRuntime.jsx)(_pill.Pill.Label,{children:"PillLabel"}),(0,_jsxRuntime.jsx)(_pill.Pill.IconButton,{"aria-label":"Remove",...props})]})})});exports.RemovablePillStates=RemovablePillStates,RemovablePillStates.displayName="RemovablePillStates",module.exports.__namedExportsOrder=["RemovablePillStates","ReadOnlyPillStates","PillStatesCount","PillStatesAvatar","PillStates"]},"./modules/react/button/stories/visual-testing/utils.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.stateTableColumnProps=exports.Container=void 0;var _canvasKitStyling=__webpack_require__("./modules/styling/index.ts"),systemIcons=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/@workday/canvas-system-icons-web/dist/es6/index.js")),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}const buttonLayout=(0,_canvasKitStyling.createStyles)({display:"flex",alignItems:"center",justifyContent:"center"}),blueBackground=(0,_canvasKitStyling.createStyles)({display:"flex",alignItems:"center",justifyContent:"center",backgroundColor:"#0875e1",padding:"12px",borderRadius:"4px"}),Container=props=>(0,_jsxRuntime.jsx)("div",{className:props.blue?blueBackground:buttonLayout,children:props.children});exports.Container=Container,Container.displayName="Container";exports.stateTableColumnProps=[{label:"Default ",props:{className:"",disabled:!1}},{label:"Default Disabled",props:{className:"",disabled:!0}},{label:"Hover ",props:{className:"hover",disabled:!1}},{label:"Hover Disabled",props:{className:"hover",disabled:!0}},{label:"Focus ",props:{className:"focus",disabled:!1}},{label:"Focus Hover ",props:{className:"focus hover",disabled:!1}},{label:"Active ",props:{className:"active",disabled:!1}},{label:"Active Hover ",props:{className:"active hover",disabled:!1}}];const systemIconArray=[];for(const icon in systemIcons)systemIcons[icon].filename&&systemIconArray.push(systemIcons[icon])},"./node_modules/react-innertext/index.js":module=>{var reduceJsxToString=function(previous,current){return previous+innerText(current)},innerText=function(jsx){return null===jsx||"boolean"==typeof jsx||void 0===jsx?"":"number"==typeof jsx?jsx.toString():"string"==typeof jsx?jsx:Array.isArray(jsx)?jsx.reduce(reduceJsxToString,""):function(jsx){return Object.prototype.hasOwnProperty.call(jsx,"props")}(jsx)&&Object.prototype.hasOwnProperty.call(jsx.props,"children")?innerText(jsx.props.children):""};innerText.default=innerText,module.exports=innerText},"./modules/preview-react/pill/stories/examples/test-avatar.png":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__.p+"static/media/test-avatar.0ce916cc.png"}}]);