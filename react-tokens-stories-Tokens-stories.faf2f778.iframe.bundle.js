"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[8230],{"./modules/react/tokens/stories/Tokens.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.Type=exports.Space=exports.Docs=exports.Depth=exports.Colors=exports.BorderRadius=void 0;var _Tokens=function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}(__webpack_require__("./modules/react/tokens/stories/Tokens.mdx")),_Tokens2=__webpack_require__("./modules/react/tokens/stories/examples/Tokens.tsx"),_Overview=__webpack_require__("./modules/react/tokens/stories/examples/Overview.tsx");exports.default={title:"Tokens/Tokens (deprecated)",tags:["autodocs"],parameters:{storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = "import {Meta} from \'@storybook/react\';\\n\\nimport mdxDoc from \'./Tokens.mdx\';\\n\\nimport {\\n  BorderRadius as BorderRadiusExample,\\n  Space as SpaceExample,\\n  Depth as DepthExample,\\n  Colors as ColorsExample,\\n  Type as TypeExample,\\n} from \'./examples/Tokens\';\\nimport {Overview} from \'./examples/Overview\';\\n\\nexport default {\\n  title: \'Tokens/Tokens (deprecated)\',\\n  tags: [\'autodocs\'],\\n  parameters: {\\n    docs: {\\n      page: mdxDoc,\\n    },\\n  },\\n} as Meta;\\n\\nexport const Docs = {\\n  render: Overview,\\n};\\n\\nexport const BorderRadius = {\\n  render: BorderRadiusExample,\\n};\\n\\nexport const Space = {\\n  render: SpaceExample,\\n};\\nexport const Depth = {\\n  render: DepthExample,\\n};\\nexport const Colors = {\\n  render: ColorsExample,\\n};\\nexport const Type = {\\n  render: TypeExample,\\n};\\n";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  "Docs": {\n    "startLoc": {\n      "col": 20,\n      "line": 24\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 26\n    },\n    "startBody": {\n      "col": 20,\n      "line": 24\n    },\n    "endBody": {\n      "col": 1,\n      "line": 26\n    }\n  },\n  "BorderRadius": {\n    "startLoc": {\n      "col": 28,\n      "line": 28\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 30\n    },\n    "startBody": {\n      "col": 28,\n      "line": 28\n    },\n    "endBody": {\n      "col": 1,\n      "line": 30\n    }\n  },\n  "Space": {\n    "startLoc": {\n      "col": 21,\n      "line": 32\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 34\n    },\n    "startBody": {\n      "col": 21,\n      "line": 32\n    },\n    "endBody": {\n      "col": 1,\n      "line": 34\n    }\n  },\n  "Depth": {\n    "startLoc": {\n      "col": 21,\n      "line": 35\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 37\n    },\n    "startBody": {\n      "col": 21,\n      "line": 35\n    },\n    "endBody": {\n      "col": 1,\n      "line": 37\n    }\n  },\n  "Colors": {\n    "startLoc": {\n      "col": 22,\n      "line": 38\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 40\n    },\n    "startBody": {\n      "col": 22,\n      "line": 38\n    },\n    "endBody": {\n      "col": 1,\n      "line": 40\n    }\n  },\n  "Type": {\n    "startLoc": {\n      "col": 20,\n      "line": 41\n    },\n    "endLoc": {\n      "col": 1,\n      "line": 43\n    },\n    "startBody": {\n      "col": 20,\n      "line": 41\n    },\n    "endBody": {\n      "col": 1,\n      "line": 43\n    }\n  }\n};\n    \nimport {Meta} from \'@storybook/react\';\n\nimport mdxDoc from \'./Tokens.mdx\';\n\nimport {\n  BorderRadius as BorderRadiusExample,\n  Space as SpaceExample,\n  Depth as DepthExample,\n  Colors as ColorsExample,\n  Type as TypeExample,\n} from \'./examples/Tokens\';\nimport {Overview} from \'./examples/Overview\';\n\nexport default {\n  title: \'Tokens/Tokens (deprecated)\',\n  tags: [\'autodocs\'],\n  parameters: {\n  "storySource": {\n    "source": "import {Meta} from \'@storybook/react\';\\n\\nimport mdxDoc from \'./Tokens.mdx\';\\n\\nimport {\\n  BorderRadius as BorderRadiusExample,\\n  Space as SpaceExample,\\n  Depth as DepthExample,\\n  Colors as ColorsExample,\\n  Type as TypeExample,\\n} from \'./examples/Tokens\';\\nimport {Overview} from \'./examples/Overview\';\\n\\nexport default {\\n  title: \'Tokens/Tokens (deprecated)\',\\n  tags: [\'autodocs\'],\\n  parameters: {\\n    docs: {\\n      page: mdxDoc,\\n    },\\n  },\\n} as Meta;\\n\\nexport const Docs = {\\n  render: Overview,\\n};\\n\\nexport const BorderRadius = {\\n  render: BorderRadiusExample,\\n};\\n\\nexport const Space = {\\n  render: SpaceExample,\\n};\\nexport const Depth = {\\n  render: DepthExample,\\n};\\nexport const Colors = {\\n  render: ColorsExample,\\n};\\nexport const Type = {\\n  render: TypeExample,\\n};\\n",\n    "locationsMap": {\n      "docs": {\n        "startLoc": {\n          "col": 20,\n          "line": 24\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 26\n        },\n        "startBody": {\n          "col": 20,\n          "line": 24\n        },\n        "endBody": {\n          "col": 1,\n          "line": 26\n        }\n      },\n      "border-radius": {\n        "startLoc": {\n          "col": 28,\n          "line": 28\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 30\n        },\n        "startBody": {\n          "col": 28,\n          "line": 28\n        },\n        "endBody": {\n          "col": 1,\n          "line": 30\n        }\n      },\n      "space": {\n        "startLoc": {\n          "col": 21,\n          "line": 32\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 34\n        },\n        "startBody": {\n          "col": 21,\n          "line": 32\n        },\n        "endBody": {\n          "col": 1,\n          "line": 34\n        }\n      },\n      "depth": {\n        "startLoc": {\n          "col": 21,\n          "line": 35\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 37\n        },\n        "startBody": {\n          "col": 21,\n          "line": 35\n        },\n        "endBody": {\n          "col": 1,\n          "line": 37\n        }\n      },\n      "colors": {\n        "startLoc": {\n          "col": 22,\n          "line": 38\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 40\n        },\n        "startBody": {\n          "col": 22,\n          "line": 38\n        },\n        "endBody": {\n          "col": 1,\n          "line": 40\n        }\n      },\n      "type": {\n        "startLoc": {\n          "col": 20,\n          "line": 41\n        },\n        "endLoc": {\n          "col": 1,\n          "line": 43\n        },\n        "startBody": {\n          "col": 20,\n          "line": 41\n        },\n        "endBody": {\n          "col": 1,\n          "line": 43\n        }\n      }\n    }\n  }\n,\n    docs: {\n      page: mdxDoc,\n    },\n  },\n} as Meta;\n\nexport const Docs = {\n  render: Overview,\n};;\n\nexport const BorderRadius = {\n  render: BorderRadiusExample,\n};;\n\nexport const Space = {\n  render: SpaceExample,\n};;\nexport const Depth = {\n  render: DepthExample,\n};;\nexport const Colors = {\n  render: ColorsExample,\n};;\nexport const Type = {\n  render: TypeExample,\n};\n',locationsMap:{docs:{startLoc:{col:20,line:255},endLoc:{col:1,line:257},startBody:{col:20,line:255},endBody:{col:1,line:257}},"border-radius":{startLoc:{col:28,line:259},endLoc:{col:1,line:261},startBody:{col:28,line:259},endBody:{col:1,line:261}},space:{startLoc:{col:21,line:263},endLoc:{col:1,line:265},startBody:{col:21,line:263},endBody:{col:1,line:265}},depth:{startLoc:{col:21,line:266},endLoc:{col:1,line:268},startBody:{col:21,line:266},endBody:{col:1,line:268}},colors:{startLoc:{col:22,line:269},endLoc:{col:1,line:271},startBody:{col:22,line:269},endBody:{col:1,line:271}},type:{startLoc:{col:20,line:272},endLoc:{col:1,line:274},startBody:{col:20,line:272},endBody:{col:1,line:274}}}},storySource:{source:"import {Meta} from '@storybook/react';\n\nimport mdxDoc from './Tokens.mdx';\n\nimport {\n  BorderRadius as BorderRadiusExample,\n  Space as SpaceExample,\n  Depth as DepthExample,\n  Colors as ColorsExample,\n  Type as TypeExample,\n} from './examples/Tokens';\nimport {Overview} from './examples/Overview';\n\nexport default {\n  title: 'Tokens/Tokens (deprecated)',\n  tags: ['autodocs'],\n  parameters: {\n    docs: {\n      page: mdxDoc,\n    },\n  },\n} as Meta;\n\nexport const Docs = {\n  render: Overview,\n};\n\nexport const BorderRadius = {\n  render: BorderRadiusExample,\n};\n\nexport const Space = {\n  render: SpaceExample,\n};\nexport const Depth = {\n  render: DepthExample,\n};\nexport const Colors = {\n  render: ColorsExample,\n};\nexport const Type = {\n  render: TypeExample,\n};\n",locationsMap:{docs:{startLoc:{col:20,line:24},endLoc:{col:1,line:26},startBody:{col:20,line:24},endBody:{col:1,line:26}},"border-radius":{startLoc:{col:28,line:28},endLoc:{col:1,line:30},startBody:{col:28,line:28},endBody:{col:1,line:30}},space:{startLoc:{col:21,line:32},endLoc:{col:1,line:34},startBody:{col:21,line:32},endBody:{col:1,line:34}},depth:{startLoc:{col:21,line:35},endLoc:{col:1,line:37},startBody:{col:21,line:35},endBody:{col:1,line:37}},colors:{startLoc:{col:22,line:38},endLoc:{col:1,line:40},startBody:{col:22,line:38},endBody:{col:1,line:40}},type:{startLoc:{col:20,line:41},endLoc:{col:1,line:43},startBody:{col:20,line:41},endBody:{col:1,line:43}}}},docs:{page:_Tokens.default}}};exports.Docs={render:_Overview.Overview},exports.BorderRadius={render:_Tokens2.BorderRadius},exports.Space={render:_Tokens2.Space},exports.Depth={render:_Tokens2.Depth},exports.Colors={render:_Tokens2.Colors},exports.Type={render:_Tokens2.Type};module.exports.__namedExportsOrder=["Type","Space","Docs","Depth","Colors","BorderRadius"]},"./modules/react/tokens/stories/Tokens.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),_workday_canvas_kit_docs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./modules/docs/index.ts"),_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./modules/preview-react/information-highlight/index.ts"),_Tokens_stories__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./modules/react/tokens/stories/Tokens.stories.tsx"),_examples_Tokens__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./modules/react/tokens/stories/examples/Tokens.tsx"),_examples_Overview__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./modules/react/tokens/stories/examples/Overview.tsx");function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",h2:"h2",h3:"h3"},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__.RP)(),props.components);return _workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight||_missingMdxReference("InformationHighlight",!1),_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Body||_missingMdxReference("InformationHighlight.Body",!0),_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Icon||_missingMdxReference("InformationHighlight.Icon",!0),_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Link||_missingMdxReference("InformationHighlight.Link",!0),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.W8,{of:_Tokens_stories__WEBPACK_IMPORTED_MODULE_6__}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.h1,{id:"tokens",children:["Tokens ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_docs__WEBPACK_IMPORTED_MODULE_3__.StorybookStatusIndicator,{type:"deprecated"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight,{variant:"caution",className:"sb-unstyled",cs:{p:{margin:0}},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Icon,{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Body,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"The tokens documented below are deprecated and will be removed in a future release. You must\nmigrate to the new Canvas Tokens Web package to ensure continued support and access to the\nlatest tokens."})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Link,{href:"/?path=/docs/guides-tokens-migration-overview--docs",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"See migration guide"})})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Tokens are the smallest pieces of our Design System with the primary function of storing UI\ninformation. They enable building components and patterns with consistency across our platforms."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_docs__WEBPACK_IMPORTED_MODULE_3__.ExampleCodeBlock,{code:_examples_Overview__WEBPACK_IMPORTED_MODULE_7__.Overview}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("br",{}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"border-radius",children:"Border Radius"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"usage",children:"Usage"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_docs__WEBPACK_IMPORTED_MODULE_3__.ExampleCodeBlock,{code:_examples_Tokens__WEBPACK_IMPORTED_MODULE_8__.BorderRadius}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"colors",children:"Colors"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Our color system enables consistency and recognition across many contexts. There are 27 sets of hues\nwith six shades in each color set."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"usage-1",children:"Usage"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_docs__WEBPACK_IMPORTED_MODULE_3__.ExampleCodeBlock,{code:_examples_Tokens__WEBPACK_IMPORTED_MODULE_8__.Colors}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"depth",children:"Depth"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Light and shadows are utilized to indicate a sense of depth. This establishes hierarchy and provides\npredictability within the Canvas user interface."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"usage-2",children:"Usage"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_docs__WEBPACK_IMPORTED_MODULE_3__.ExampleCodeBlock,{code:_examples_Tokens__WEBPACK_IMPORTED_MODULE_8__.Depth}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"space",children:"Space"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"This guide will help you make decisions when spacing elements in your designs using our space Tokens"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"usage-3",children:"Usage"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_docs__WEBPACK_IMPORTED_MODULE_3__.ExampleCodeBlock,{code:_examples_Tokens__WEBPACK_IMPORTED_MODULE_8__.Space}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"type",children:"Type"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Typography is at the core of our interface. With it, we create clear hierarchies that guide users\nthrough our products."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"usage-4",children:"Usage"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_docs__WEBPACK_IMPORTED_MODULE_3__.ExampleCodeBlock,{code:_examples_Tokens__WEBPACK_IMPORTED_MODULE_8__.Type})]})}const __WEBPACK_DEFAULT_EXPORT__=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__.RP)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,Object.assign({},props,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,props)})):_createMdxContent(props)};function _missingMdxReference(id,component){throw new Error("Expected "+(component?"component":"object")+" `"+id+"` to be defined: you likely forgot to import, pass, or provide it.")}},"./modules/react/tokens/stories/examples/Overview.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.Overview=void 0;(function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n})(__webpack_require__("./node_modules/react/index.js"));var _styled=function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}(__webpack_require__("./node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js")),_tokens=__webpack_require__("./modules/react/tokens/index.ts"),_layout=__webpack_require__("./modules/react/layout/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}const StyledCard=(0,_styled.default)("div")({..._tokens.depth[3],padding:_tokens.space.m,borderRadius:_tokens.borderRadius.m,backgroundColor:_tokens.colors.cinnamon300,..._tokens.type.levels.body.medium}),Overview=()=>(0,_jsxRuntime.jsx)(_layout.Flex,{children:(0,_jsxRuntime.jsx)(StyledCard,{children:"Using Tokens To Style"})});exports.Overview=Overview,Overview.displayName="Overview",Overview.__RAW__="import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {colors, type, depth, space, borderRadius} from '@workday/canvas-kit-react/tokens';\nimport {Flex} from '@workday/canvas-kit-react/layout';\n\nconst StyledCard = styled('div')({\n  ...depth[3],\n  padding: space.m,\n  borderRadius: borderRadius.m,\n  backgroundColor: colors.cinnamon300,\n  ...type.levels.body.medium,\n});\n\nexport const Overview = () => (\n  <Flex>\n    <StyledCard>Using Tokens To Style</StyledCard>\n  </Flex>\n);\n"},"./modules/react/tokens/stories/examples/Tokens.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.Type=exports.Space=exports.Depth=exports.Colors=exports.BorderRadius=void 0;var React=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_styled=function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}(__webpack_require__("./node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js")),_common=__webpack_require__("./modules/react/common/index.ts"),_tokens=__webpack_require__("./modules/react/tokens/index.ts"),_text=__webpack_require__("./modules/react/text/index.ts"),_layout=__webpack_require__("./modules/react/layout/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}const DepthCard=({depth,children})=>(0,_jsxRuntime.jsx)(_layout.Flex,{depth,width:200,height:200,borderRadius:"s",alignItems:"center",justifyContent:"center",backgroundColor:"frenchVanilla100",children});DepthCard.displayName="DepthCard";const Depth=()=>(0,_jsxRuntime.jsxs)(_layout.Flex,{gap:"m",flexDirection:"column",children:[(0,_jsxRuntime.jsxs)(_layout.Flex,{gap:"m",flexWrap:"wrap",children:[(0,_jsxRuntime.jsx)(DepthCard,{depth:"none",children:"Depth None"}),(0,_jsxRuntime.jsx)(DepthCard,{depth:1,children:"Depth 1"}),(0,_jsxRuntime.jsx)(DepthCard,{depth:2,children:"Depth 2"}),(0,_jsxRuntime.jsx)(DepthCard,{depth:3,children:"Depth 3"}),(0,_jsxRuntime.jsx)(DepthCard,{depth:4,children:"Depth 4"}),(0,_jsxRuntime.jsx)(DepthCard,{depth:5,children:"Depth 5"}),(0,_jsxRuntime.jsx)(DepthCard,{depth:6,children:"Depth 6"})]}),(0,_jsxRuntime.jsx)(_text.Text,{children:"Depth on a colored background"}),(0,_jsxRuntime.jsxs)(_layout.Flex,{backgroundColor:"soap400",gap:"m",padding:"m",flexWrap:"wrap",children:[(0,_jsxRuntime.jsx)(DepthCard,{depth:"none",children:"Depth None"}),(0,_jsxRuntime.jsx)(DepthCard,{depth:1,children:"Depth 1"}),(0,_jsxRuntime.jsx)(DepthCard,{depth:2,children:"Depth 2"}),(0,_jsxRuntime.jsx)(DepthCard,{depth:3,children:"Depth 3"}),(0,_jsxRuntime.jsx)(DepthCard,{depth:4,children:"Depth 4"}),(0,_jsxRuntime.jsx)(DepthCard,{depth:5,children:"Depth 5"}),(0,_jsxRuntime.jsx)(DepthCard,{depth:6,children:"Depth 6"})]})]});exports.Depth=Depth,Depth.displayName="Depth";const StyledLargeTitle=(0,_styled.default)("h3")({..._tokens.type.levels.title.large}),StyledMediumTitle=(0,_styled.default)("h3")({..._tokens.type.levels.title.medium}),StyledSmallTitle=(0,_styled.default)("h3")({..._tokens.type.levels.title.small}),StyledLargeHeading=(0,_styled.default)("h3")({..._tokens.type.levels.heading.large}),StyledMediumHeading=(0,_styled.default)("h3")({..._tokens.type.levels.heading.medium}),StyledSmallHeading=(0,_styled.default)("h3")({..._tokens.type.levels.heading.small}),StyledLargeBody=(0,_styled.default)("h3")({..._tokens.type.levels.body.large}),StyledMediumBody=(0,_styled.default)("h3")({..._tokens.type.levels.body.medium}),StyledSmallBody=(0,_styled.default)("h3")({..._tokens.type.levels.body.small}),StyledLargeSubtext=(0,_styled.default)("h3")({..._tokens.type.levels.subtext.large}),StyledMediumSubtext=(0,_styled.default)("h3")({..._tokens.type.levels.subtext.medium}),StyledSmallSubtext=(0,_styled.default)("h3")({..._tokens.type.levels.subtext.small}),StyledVariantsContainer=(0,_styled.default)(_layout.Box)({..._tokens.type.levels.body.medium,"& > *":{display:"block",margin:"4px 0"}}),StyledErrorText=(0,_styled.default)("span")({..._tokens.type.variants.error}),StyledHintText=(0,_styled.default)("span")({..._tokens.type.variants.hint}),StyledInverseText=(0,_styled.default)("span")({..._tokens.type.variants.inverse,display:"inline-block !important",background:"#667380",padding:"2px 8px",borderRadius:"4px"}),Type=()=>(0,_jsxRuntime.jsxs)(React.Fragment,{children:[(0,_jsxRuntime.jsx)("h2",{children:"Levels (Hierarchy)"}),(0,_jsxRuntime.jsx)(StyledLargeTitle,{children:"Title Large Heading"}),(0,_jsxRuntime.jsx)(StyledMediumTitle,{children:"Title Medium Heading"}),(0,_jsxRuntime.jsx)(StyledSmallTitle,{children:"Title Small Heading"}),(0,_jsxRuntime.jsx)(StyledLargeHeading,{children:"Heading Large Heading"}),(0,_jsxRuntime.jsx)(StyledMediumHeading,{children:"Heading Medium Heading"}),(0,_jsxRuntime.jsx)(StyledSmallHeading,{children:"Heading Small Heading"}),(0,_jsxRuntime.jsx)(StyledLargeBody,{children:"Body Large Heading"}),(0,_jsxRuntime.jsx)(StyledMediumBody,{children:"Body Medium Heading"}),(0,_jsxRuntime.jsx)(StyledSmallBody,{children:"Body Small Heading"}),(0,_jsxRuntime.jsx)(StyledLargeSubtext,{children:"Subtext Large Heading"}),(0,_jsxRuntime.jsx)(StyledMediumSubtext,{children:"Subtext Medium Heading"}),(0,_jsxRuntime.jsx)(StyledSmallSubtext,{children:"Subtext Small Heading"}),(0,_jsxRuntime.jsx)("hr",{}),(0,_jsxRuntime.jsx)("h3",{children:"Variants"}),(0,_jsxRuntime.jsxs)(StyledVariantsContainer,{children:[(0,_jsxRuntime.jsx)(StyledErrorText,{children:"Error Text"}),(0,_jsxRuntime.jsx)(StyledHintText,{children:"Hint Text"}),(0,_jsxRuntime.jsx)(StyledInverseText,{children:"Inverse Text"})]})]});exports.Type=Type,Type.displayName="Type";const Shape=(0,_styled.default)("div")({..._tokens.type.levels.body.small,fontWeight:_tokens.type.properties.fontWeights.bold,margin:_tokens.space.m,background:_tokens.colors.blueberry400,color:_tokens.colors.frenchVanilla100,display:"flex",alignItems:"center",justifyContent:"center",flexDirection:"column","& span":{..._tokens.type.levels.subtext.medium,fontFamily:_tokens.type.properties.fontFamilies.monospace,display:"block",color:_tokens.colors.blueberry100}},(({radius})=>({borderRadius:radius})),(({size})=>({width:size||_tokens.space.xxl,height:size||_tokens.space.xxl}))),SizeLabel=(0,_styled.default)("div")({..._tokens.type.levels.body.small,fontWeight:_tokens.type.properties.fontWeights.bold,margin:_tokens.space.s,width:80,"& span":{..._tokens.type.levels.subtext.medium,fontFamily:_tokens.type.properties.fontFamilies.monospace,..._tokens.type.variants.hint,display:"block"}}),BorderRadius=()=>(0,_jsxRuntime.jsx)(React.Fragment,{children:Object.keys(_tokens.borderRadius).map((size=>(0,_jsxRuntime.jsxs)(_layout.Flex,{children:[(0,_jsxRuntime.jsxs)(SizeLabel,{children:[size,(0,_jsxRuntime.jsxs)("span",{children:["(",_tokens.borderRadius[size],")"]})]}),(0,_jsxRuntime.jsx)(Shape,{radius:_tokens.borderRadius[size]})]},size)))});exports.BorderRadius=BorderRadius,BorderRadius.displayName="BorderRadius";const Space=()=>(0,_jsxRuntime.jsx)(React.Fragment,{children:Object.keys(_tokens.space).map((size=>(0,_jsxRuntime.jsxs)(_layout.Flex,{children:[(0,_jsxRuntime.jsxs)(SizeLabel,{children:[size,(0,_jsxRuntime.jsxs)("span",{children:["(",_tokens.space[size],")"]})]}),(0,_jsxRuntime.jsx)(Shape,{size:_tokens.space[size],radius:_tokens.borderRadius.m})]},size)))});exports.Space=Space,Space.displayName="Space";const Palettes=(0,_styled.default)("div")({display:"flex",margin:-20,flexWrap:"wrap"}),Palette=(0,_styled.default)("ul")({..._tokens.depth[3],listStyle:"none",margin:20,padding:0,overflow:"hidden",width:250,alignSelf:"flex-start",borderRadius:_tokens.borderRadius.l,display:"flex",flexDirection:"column"}),Swatch=(0,_styled.default)("li")({..._tokens.type.levels.subtext.large,fontWeight:_tokens.type.properties.fontWeights.bold,padding:`0 ${_tokens.space.m}`,height:_tokens.space.xl,display:"flex",justifyContent:"space-between",alignItems:"center"},(({primary,bg})=>primary&&{..._tokens.type.levels.body.large,fontWeight:_tokens.type.properties.fontWeights.bold,height:_tokens.space.xxxl,paddingTop:_tokens.space.s,paddingBottom:_tokens.space.s,display:"flex",flexDirection:"column",justifyContent:"space-around",alignItems:"flex-start",textTransform:"capitalize"}),(({bg})=>({background:bg,color:(0,_common.pickForegroundColor)(bg)}))),colorNames=Object.keys(_tokens.colors).map((color=>color.replace(/\d+$/,""))).reduce(((collection,color)=>(collection.indexOf(color)<0&&collection.push(color),collection)),[]),StyledColors=(0,_styled.default)("span")({fontFamily:_tokens.type.properties.fontFamilies.monospace}),Colors=()=>(0,_jsxRuntime.jsx)(Palettes,{children:colorNames.map((colorName=>(0,_jsxRuntime.jsxs)(Palette,{children:[(0,_jsxRuntime.jsxs)(Swatch,{bg:_tokens.colors[`${colorName}500`],primary:!0,children:[(0,_jsxRuntime.jsx)("div",{children:colorName}),(0,_jsxRuntime.jsx)("div",{children:"500"})]}),[1,2,3,4,5,6].map((level=>{const color=`${colorName}${level}00`;return(0,_jsxRuntime.jsxs)(Swatch,{bg:_tokens.colors[color],children:[(0,_jsxRuntime.jsxs)("span",{children:[level,"00"]}),(0,_jsxRuntime.jsx)(StyledColors,{children:_tokens.colors[color]})]},color)}))]},colorName)))});exports.Colors=Colors,Colors.displayName="Colors",Depth.__RAW__="import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {pickForegroundColor} from '@workday/canvas-kit-react/common';\n\nimport {colors, type, depth, space, borderRadius} from '@workday/canvas-kit-react/tokens';\nimport {Text} from '@workday/canvas-kit-react/text';\nimport {Box, Flex} from '@workday/canvas-kit-react/layout';\n\nconst DepthCard = ({depth, children}) => {\n  return (\n    <Flex\n      depth={depth}\n      width={200}\n      height={200}\n      borderRadius=\"s\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      backgroundColor=\"frenchVanilla100\"\n    >\n      {children}\n    </Flex>\n  );\n};\n\nexport const Depth = () => (\n  <Flex gap=\"m\" flexDirection=\"column\">\n    <Flex gap=\"m\" flexWrap=\"wrap\">\n      <DepthCard depth=\"none\">Depth None</DepthCard>\n      <DepthCard depth={1}>Depth 1</DepthCard>\n      <DepthCard depth={2}>Depth 2</DepthCard>\n      <DepthCard depth={3}>Depth 3</DepthCard>\n      <DepthCard depth={4}>Depth 4</DepthCard>\n      <DepthCard depth={5}>Depth 5</DepthCard>\n      <DepthCard depth={6}>Depth 6</DepthCard>\n    </Flex>\n    <Text>Depth on a colored background</Text>\n    <Flex backgroundColor=\"soap400\" gap=\"m\" padding=\"m\" flexWrap=\"wrap\">\n      <DepthCard depth=\"none\">Depth None</DepthCard>\n      <DepthCard depth={1}>Depth 1</DepthCard>\n      <DepthCard depth={2}>Depth 2</DepthCard>\n      <DepthCard depth={3}>Depth 3</DepthCard>\n      <DepthCard depth={4}>Depth 4</DepthCard>\n      <DepthCard depth={5}>Depth 5</DepthCard>\n      <DepthCard depth={6}>Depth 6</DepthCard>\n    </Flex>\n  </Flex>\n);\n\nconst StyledLargeTitle = styled('h3')({\n  ...type.levels.title.large,\n});\n\nconst StyledMediumTitle = styled('h3')({\n  ...type.levels.title.medium,\n});\n\nconst StyledSmallTitle = styled('h3')({\n  ...type.levels.title.small,\n});\n\nconst StyledLargeHeading = styled('h3')({\n  ...type.levels.heading.large,\n});\n\nconst StyledMediumHeading = styled('h3')({\n  ...type.levels.heading.medium,\n});\n\nconst StyledSmallHeading = styled('h3')({\n  ...type.levels.heading.small,\n});\n\nconst StyledLargeBody = styled('h3')({\n  ...type.levels.body.large,\n});\n\nconst StyledMediumBody = styled('h3')({\n  ...type.levels.body.medium,\n});\nconst StyledSmallBody = styled('h3')({\n  ...type.levels.body.small,\n});\n\nconst StyledLargeSubtext = styled('h3')({\n  ...type.levels.subtext.large,\n});\nconst StyledMediumSubtext = styled('h3')({\n  ...type.levels.subtext.medium,\n});\nconst StyledSmallSubtext = styled('h3')({\n  ...type.levels.subtext.small,\n});\n\nconst StyledVariantsContainer = styled(Box)({\n  ...type.levels.body.medium,\n  '& > *': {display: 'block', margin: '4px 0'},\n});\n\nconst StyledErrorText = styled('span')({\n  ...type.variants.error,\n});\n\nconst StyledHintText = styled('span')({\n  ...type.variants.hint,\n});\nconst StyledInverseText = styled('span')({\n  ...type.variants.inverse,\n  display: 'inline-block !important',\n  background: '#667380',\n  padding: '2px 8px',\n  borderRadius: '4px',\n});\n\nexport const Type = () => (\n  <React.Fragment>\n    <h2>Levels (Hierarchy)</h2>\n\n    <StyledLargeTitle>Title Large Heading</StyledLargeTitle>\n    <StyledMediumTitle>Title Medium Heading</StyledMediumTitle>\n    <StyledSmallTitle>Title Small Heading</StyledSmallTitle>\n\n    <StyledLargeHeading>Heading Large Heading</StyledLargeHeading>\n    <StyledMediumHeading>Heading Medium Heading</StyledMediumHeading>\n    <StyledSmallHeading>Heading Small Heading</StyledSmallHeading>\n\n    <StyledLargeBody>Body Large Heading</StyledLargeBody>\n    <StyledMediumBody>Body Medium Heading</StyledMediumBody>\n    <StyledSmallBody>Body Small Heading</StyledSmallBody>\n\n    <StyledLargeSubtext>Subtext Large Heading</StyledLargeSubtext>\n    <StyledMediumSubtext>Subtext Medium Heading</StyledMediumSubtext>\n    <StyledSmallSubtext>Subtext Small Heading</StyledSmallSubtext>\n\n    <hr />\n\n    <h3>Variants</h3>\n    <StyledVariantsContainer>\n      <StyledErrorText>Error Text</StyledErrorText>\n      <StyledHintText>Hint Text</StyledHintText>\n      <StyledInverseText>Inverse Text</StyledInverseText>\n    </StyledVariantsContainer>\n  </React.Fragment>\n);\n\nconst Shape = styled('div')<{radius?: string | number; size?: string | number}>(\n  {\n    ...type.levels.body.small,\n    fontWeight: type.properties.fontWeights.bold,\n    margin: space.m,\n    background: colors.blueberry400,\n    color: colors.frenchVanilla100,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    '& span': {\n      ...type.levels.subtext.medium,\n      fontFamily: type.properties.fontFamilies.monospace,\n      display: 'block',\n      color: colors.blueberry100,\n    },\n  },\n  ({radius}) => ({\n    borderRadius: radius,\n  }),\n  ({size}) => ({\n    width: size || space.xxl,\n    height: size || space.xxl,\n  })\n);\n\nconst SizeLabel = styled('div')({\n  ...type.levels.body.small,\n  fontWeight: type.properties.fontWeights.bold,\n  margin: space.s,\n  width: 80,\n  '& span': {\n    ...type.levels.subtext.medium,\n    fontFamily: type.properties.fontFamilies.monospace,\n    ...type.variants.hint,\n    display: 'block',\n  },\n});\n\nexport const BorderRadius = () => (\n  <React.Fragment>\n    {Object.keys(borderRadius).map(size => (\n      <Flex key={size}>\n        <SizeLabel>\n          {size}\n          <span>({borderRadius[size]})</span>\n        </SizeLabel>\n        <Shape radius={borderRadius[size]} />\n      </Flex>\n    ))}\n  </React.Fragment>\n);\n\nexport const Space = () => (\n  <React.Fragment>\n    {Object.keys(space).map(size => (\n      <Flex key={size}>\n        <SizeLabel>\n          {size}\n          <span>({(space as any)[size]})</span>\n        </SizeLabel>\n        <Shape size={(space as any)[size]} radius={borderRadius.m} />\n      </Flex>\n    ))}\n  </React.Fragment>\n);\n\nconst Palettes = styled('div')({\n  display: 'flex',\n  margin: -20,\n  flexWrap: 'wrap',\n});\n\nconst Palette = styled('ul')({\n  ...depth[3],\n  listStyle: 'none',\n  margin: 20,\n  padding: 0,\n  overflow: 'hidden',\n  width: 250,\n  alignSelf: 'flex-start',\n  borderRadius: borderRadius.l,\n  display: 'flex',\n  flexDirection: 'column',\n});\n\nconst Swatch = styled('li')<{bg: string; primary?: boolean}>(\n  {\n    ...type.levels.subtext.large,\n    fontWeight: type.properties.fontWeights.bold,\n    padding: `0 ${space.m}`,\n    height: space.xl,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  ({primary, bg}) =>\n    primary && {\n      ...type.levels.body.large,\n      fontWeight: type.properties.fontWeights.bold,\n      height: space.xxxl,\n      paddingTop: space.s,\n      paddingBottom: space.s,\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-around',\n      alignItems: 'flex-start',\n      textTransform: 'capitalize',\n    },\n  ({bg}) => ({\n    background: bg,\n    color: pickForegroundColor(bg),\n  })\n);\n\nconst colorNames = Object.keys(colors)\n  .map(color => color.replace(/\\d+$/, '')) // Remove shade numbers\n  .reduce((collection: string[], color: string) => {\n    // Remove duplicates\n    if (collection.indexOf(color) < 0) {\n      collection.push(color);\n    }\n    return collection;\n  }, []);\n\nconst StyledColors = styled('span')({\n  fontFamily: type.properties.fontFamilies.monospace,\n});\n\nexport const Colors = () => (\n  <Palettes>\n    {colorNames.map(colorName => (\n      <Palette key={colorName}>\n        <Swatch bg={(colors as any)[`${colorName}500`]} primary={true}>\n          <div>{colorName}</div>\n          <div>500</div>\n        </Swatch>\n        {[1, 2, 3, 4, 5, 6].map(level => {\n          const color = `${colorName}${level}00`;\n          return (\n            <Swatch bg={(colors as any)[color]} key={color}>\n              <span>{level}00</span>\n              <StyledColors>{(colors as any)[color]}</StyledColors>\n            </Swatch>\n          );\n        })}\n      </Palette>\n    ))}\n  </Palettes>\n);\n",Type.__RAW__="import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {pickForegroundColor} from '@workday/canvas-kit-react/common';\n\nimport {colors, type, depth, space, borderRadius} from '@workday/canvas-kit-react/tokens';\nimport {Text} from '@workday/canvas-kit-react/text';\nimport {Box, Flex} from '@workday/canvas-kit-react/layout';\n\nconst DepthCard = ({depth, children}) => {\n  return (\n    <Flex\n      depth={depth}\n      width={200}\n      height={200}\n      borderRadius=\"s\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      backgroundColor=\"frenchVanilla100\"\n    >\n      {children}\n    </Flex>\n  );\n};\n\nexport const Depth = () => (\n  <Flex gap=\"m\" flexDirection=\"column\">\n    <Flex gap=\"m\" flexWrap=\"wrap\">\n      <DepthCard depth=\"none\">Depth None</DepthCard>\n      <DepthCard depth={1}>Depth 1</DepthCard>\n      <DepthCard depth={2}>Depth 2</DepthCard>\n      <DepthCard depth={3}>Depth 3</DepthCard>\n      <DepthCard depth={4}>Depth 4</DepthCard>\n      <DepthCard depth={5}>Depth 5</DepthCard>\n      <DepthCard depth={6}>Depth 6</DepthCard>\n    </Flex>\n    <Text>Depth on a colored background</Text>\n    <Flex backgroundColor=\"soap400\" gap=\"m\" padding=\"m\" flexWrap=\"wrap\">\n      <DepthCard depth=\"none\">Depth None</DepthCard>\n      <DepthCard depth={1}>Depth 1</DepthCard>\n      <DepthCard depth={2}>Depth 2</DepthCard>\n      <DepthCard depth={3}>Depth 3</DepthCard>\n      <DepthCard depth={4}>Depth 4</DepthCard>\n      <DepthCard depth={5}>Depth 5</DepthCard>\n      <DepthCard depth={6}>Depth 6</DepthCard>\n    </Flex>\n  </Flex>\n);\n\nconst StyledLargeTitle = styled('h3')({\n  ...type.levels.title.large,\n});\n\nconst StyledMediumTitle = styled('h3')({\n  ...type.levels.title.medium,\n});\n\nconst StyledSmallTitle = styled('h3')({\n  ...type.levels.title.small,\n});\n\nconst StyledLargeHeading = styled('h3')({\n  ...type.levels.heading.large,\n});\n\nconst StyledMediumHeading = styled('h3')({\n  ...type.levels.heading.medium,\n});\n\nconst StyledSmallHeading = styled('h3')({\n  ...type.levels.heading.small,\n});\n\nconst StyledLargeBody = styled('h3')({\n  ...type.levels.body.large,\n});\n\nconst StyledMediumBody = styled('h3')({\n  ...type.levels.body.medium,\n});\nconst StyledSmallBody = styled('h3')({\n  ...type.levels.body.small,\n});\n\nconst StyledLargeSubtext = styled('h3')({\n  ...type.levels.subtext.large,\n});\nconst StyledMediumSubtext = styled('h3')({\n  ...type.levels.subtext.medium,\n});\nconst StyledSmallSubtext = styled('h3')({\n  ...type.levels.subtext.small,\n});\n\nconst StyledVariantsContainer = styled(Box)({\n  ...type.levels.body.medium,\n  '& > *': {display: 'block', margin: '4px 0'},\n});\n\nconst StyledErrorText = styled('span')({\n  ...type.variants.error,\n});\n\nconst StyledHintText = styled('span')({\n  ...type.variants.hint,\n});\nconst StyledInverseText = styled('span')({\n  ...type.variants.inverse,\n  display: 'inline-block !important',\n  background: '#667380',\n  padding: '2px 8px',\n  borderRadius: '4px',\n});\n\nexport const Type = () => (\n  <React.Fragment>\n    <h2>Levels (Hierarchy)</h2>\n\n    <StyledLargeTitle>Title Large Heading</StyledLargeTitle>\n    <StyledMediumTitle>Title Medium Heading</StyledMediumTitle>\n    <StyledSmallTitle>Title Small Heading</StyledSmallTitle>\n\n    <StyledLargeHeading>Heading Large Heading</StyledLargeHeading>\n    <StyledMediumHeading>Heading Medium Heading</StyledMediumHeading>\n    <StyledSmallHeading>Heading Small Heading</StyledSmallHeading>\n\n    <StyledLargeBody>Body Large Heading</StyledLargeBody>\n    <StyledMediumBody>Body Medium Heading</StyledMediumBody>\n    <StyledSmallBody>Body Small Heading</StyledSmallBody>\n\n    <StyledLargeSubtext>Subtext Large Heading</StyledLargeSubtext>\n    <StyledMediumSubtext>Subtext Medium Heading</StyledMediumSubtext>\n    <StyledSmallSubtext>Subtext Small Heading</StyledSmallSubtext>\n\n    <hr />\n\n    <h3>Variants</h3>\n    <StyledVariantsContainer>\n      <StyledErrorText>Error Text</StyledErrorText>\n      <StyledHintText>Hint Text</StyledHintText>\n      <StyledInverseText>Inverse Text</StyledInverseText>\n    </StyledVariantsContainer>\n  </React.Fragment>\n);\n\nconst Shape = styled('div')<{radius?: string | number; size?: string | number}>(\n  {\n    ...type.levels.body.small,\n    fontWeight: type.properties.fontWeights.bold,\n    margin: space.m,\n    background: colors.blueberry400,\n    color: colors.frenchVanilla100,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    '& span': {\n      ...type.levels.subtext.medium,\n      fontFamily: type.properties.fontFamilies.monospace,\n      display: 'block',\n      color: colors.blueberry100,\n    },\n  },\n  ({radius}) => ({\n    borderRadius: radius,\n  }),\n  ({size}) => ({\n    width: size || space.xxl,\n    height: size || space.xxl,\n  })\n);\n\nconst SizeLabel = styled('div')({\n  ...type.levels.body.small,\n  fontWeight: type.properties.fontWeights.bold,\n  margin: space.s,\n  width: 80,\n  '& span': {\n    ...type.levels.subtext.medium,\n    fontFamily: type.properties.fontFamilies.monospace,\n    ...type.variants.hint,\n    display: 'block',\n  },\n});\n\nexport const BorderRadius = () => (\n  <React.Fragment>\n    {Object.keys(borderRadius).map(size => (\n      <Flex key={size}>\n        <SizeLabel>\n          {size}\n          <span>({borderRadius[size]})</span>\n        </SizeLabel>\n        <Shape radius={borderRadius[size]} />\n      </Flex>\n    ))}\n  </React.Fragment>\n);\n\nexport const Space = () => (\n  <React.Fragment>\n    {Object.keys(space).map(size => (\n      <Flex key={size}>\n        <SizeLabel>\n          {size}\n          <span>({(space as any)[size]})</span>\n        </SizeLabel>\n        <Shape size={(space as any)[size]} radius={borderRadius.m} />\n      </Flex>\n    ))}\n  </React.Fragment>\n);\n\nconst Palettes = styled('div')({\n  display: 'flex',\n  margin: -20,\n  flexWrap: 'wrap',\n});\n\nconst Palette = styled('ul')({\n  ...depth[3],\n  listStyle: 'none',\n  margin: 20,\n  padding: 0,\n  overflow: 'hidden',\n  width: 250,\n  alignSelf: 'flex-start',\n  borderRadius: borderRadius.l,\n  display: 'flex',\n  flexDirection: 'column',\n});\n\nconst Swatch = styled('li')<{bg: string; primary?: boolean}>(\n  {\n    ...type.levels.subtext.large,\n    fontWeight: type.properties.fontWeights.bold,\n    padding: `0 ${space.m}`,\n    height: space.xl,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  ({primary, bg}) =>\n    primary && {\n      ...type.levels.body.large,\n      fontWeight: type.properties.fontWeights.bold,\n      height: space.xxxl,\n      paddingTop: space.s,\n      paddingBottom: space.s,\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-around',\n      alignItems: 'flex-start',\n      textTransform: 'capitalize',\n    },\n  ({bg}) => ({\n    background: bg,\n    color: pickForegroundColor(bg),\n  })\n);\n\nconst colorNames = Object.keys(colors)\n  .map(color => color.replace(/\\d+$/, '')) // Remove shade numbers\n  .reduce((collection: string[], color: string) => {\n    // Remove duplicates\n    if (collection.indexOf(color) < 0) {\n      collection.push(color);\n    }\n    return collection;\n  }, []);\n\nconst StyledColors = styled('span')({\n  fontFamily: type.properties.fontFamilies.monospace,\n});\n\nexport const Colors = () => (\n  <Palettes>\n    {colorNames.map(colorName => (\n      <Palette key={colorName}>\n        <Swatch bg={(colors as any)[`${colorName}500`]} primary={true}>\n          <div>{colorName}</div>\n          <div>500</div>\n        </Swatch>\n        {[1, 2, 3, 4, 5, 6].map(level => {\n          const color = `${colorName}${level}00`;\n          return (\n            <Swatch bg={(colors as any)[color]} key={color}>\n              <span>{level}00</span>\n              <StyledColors>{(colors as any)[color]}</StyledColors>\n            </Swatch>\n          );\n        })}\n      </Palette>\n    ))}\n  </Palettes>\n);\n",BorderRadius.__RAW__="import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {pickForegroundColor} from '@workday/canvas-kit-react/common';\n\nimport {colors, type, depth, space, borderRadius} from '@workday/canvas-kit-react/tokens';\nimport {Text} from '@workday/canvas-kit-react/text';\nimport {Box, Flex} from '@workday/canvas-kit-react/layout';\n\nconst DepthCard = ({depth, children}) => {\n  return (\n    <Flex\n      depth={depth}\n      width={200}\n      height={200}\n      borderRadius=\"s\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      backgroundColor=\"frenchVanilla100\"\n    >\n      {children}\n    </Flex>\n  );\n};\n\nexport const Depth = () => (\n  <Flex gap=\"m\" flexDirection=\"column\">\n    <Flex gap=\"m\" flexWrap=\"wrap\">\n      <DepthCard depth=\"none\">Depth None</DepthCard>\n      <DepthCard depth={1}>Depth 1</DepthCard>\n      <DepthCard depth={2}>Depth 2</DepthCard>\n      <DepthCard depth={3}>Depth 3</DepthCard>\n      <DepthCard depth={4}>Depth 4</DepthCard>\n      <DepthCard depth={5}>Depth 5</DepthCard>\n      <DepthCard depth={6}>Depth 6</DepthCard>\n    </Flex>\n    <Text>Depth on a colored background</Text>\n    <Flex backgroundColor=\"soap400\" gap=\"m\" padding=\"m\" flexWrap=\"wrap\">\n      <DepthCard depth=\"none\">Depth None</DepthCard>\n      <DepthCard depth={1}>Depth 1</DepthCard>\n      <DepthCard depth={2}>Depth 2</DepthCard>\n      <DepthCard depth={3}>Depth 3</DepthCard>\n      <DepthCard depth={4}>Depth 4</DepthCard>\n      <DepthCard depth={5}>Depth 5</DepthCard>\n      <DepthCard depth={6}>Depth 6</DepthCard>\n    </Flex>\n  </Flex>\n);\n\nconst StyledLargeTitle = styled('h3')({\n  ...type.levels.title.large,\n});\n\nconst StyledMediumTitle = styled('h3')({\n  ...type.levels.title.medium,\n});\n\nconst StyledSmallTitle = styled('h3')({\n  ...type.levels.title.small,\n});\n\nconst StyledLargeHeading = styled('h3')({\n  ...type.levels.heading.large,\n});\n\nconst StyledMediumHeading = styled('h3')({\n  ...type.levels.heading.medium,\n});\n\nconst StyledSmallHeading = styled('h3')({\n  ...type.levels.heading.small,\n});\n\nconst StyledLargeBody = styled('h3')({\n  ...type.levels.body.large,\n});\n\nconst StyledMediumBody = styled('h3')({\n  ...type.levels.body.medium,\n});\nconst StyledSmallBody = styled('h3')({\n  ...type.levels.body.small,\n});\n\nconst StyledLargeSubtext = styled('h3')({\n  ...type.levels.subtext.large,\n});\nconst StyledMediumSubtext = styled('h3')({\n  ...type.levels.subtext.medium,\n});\nconst StyledSmallSubtext = styled('h3')({\n  ...type.levels.subtext.small,\n});\n\nconst StyledVariantsContainer = styled(Box)({\n  ...type.levels.body.medium,\n  '& > *': {display: 'block', margin: '4px 0'},\n});\n\nconst StyledErrorText = styled('span')({\n  ...type.variants.error,\n});\n\nconst StyledHintText = styled('span')({\n  ...type.variants.hint,\n});\nconst StyledInverseText = styled('span')({\n  ...type.variants.inverse,\n  display: 'inline-block !important',\n  background: '#667380',\n  padding: '2px 8px',\n  borderRadius: '4px',\n});\n\nexport const Type = () => (\n  <React.Fragment>\n    <h2>Levels (Hierarchy)</h2>\n\n    <StyledLargeTitle>Title Large Heading</StyledLargeTitle>\n    <StyledMediumTitle>Title Medium Heading</StyledMediumTitle>\n    <StyledSmallTitle>Title Small Heading</StyledSmallTitle>\n\n    <StyledLargeHeading>Heading Large Heading</StyledLargeHeading>\n    <StyledMediumHeading>Heading Medium Heading</StyledMediumHeading>\n    <StyledSmallHeading>Heading Small Heading</StyledSmallHeading>\n\n    <StyledLargeBody>Body Large Heading</StyledLargeBody>\n    <StyledMediumBody>Body Medium Heading</StyledMediumBody>\n    <StyledSmallBody>Body Small Heading</StyledSmallBody>\n\n    <StyledLargeSubtext>Subtext Large Heading</StyledLargeSubtext>\n    <StyledMediumSubtext>Subtext Medium Heading</StyledMediumSubtext>\n    <StyledSmallSubtext>Subtext Small Heading</StyledSmallSubtext>\n\n    <hr />\n\n    <h3>Variants</h3>\n    <StyledVariantsContainer>\n      <StyledErrorText>Error Text</StyledErrorText>\n      <StyledHintText>Hint Text</StyledHintText>\n      <StyledInverseText>Inverse Text</StyledInverseText>\n    </StyledVariantsContainer>\n  </React.Fragment>\n);\n\nconst Shape = styled('div')<{radius?: string | number; size?: string | number}>(\n  {\n    ...type.levels.body.small,\n    fontWeight: type.properties.fontWeights.bold,\n    margin: space.m,\n    background: colors.blueberry400,\n    color: colors.frenchVanilla100,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    '& span': {\n      ...type.levels.subtext.medium,\n      fontFamily: type.properties.fontFamilies.monospace,\n      display: 'block',\n      color: colors.blueberry100,\n    },\n  },\n  ({radius}) => ({\n    borderRadius: radius,\n  }),\n  ({size}) => ({\n    width: size || space.xxl,\n    height: size || space.xxl,\n  })\n);\n\nconst SizeLabel = styled('div')({\n  ...type.levels.body.small,\n  fontWeight: type.properties.fontWeights.bold,\n  margin: space.s,\n  width: 80,\n  '& span': {\n    ...type.levels.subtext.medium,\n    fontFamily: type.properties.fontFamilies.monospace,\n    ...type.variants.hint,\n    display: 'block',\n  },\n});\n\nexport const BorderRadius = () => (\n  <React.Fragment>\n    {Object.keys(borderRadius).map(size => (\n      <Flex key={size}>\n        <SizeLabel>\n          {size}\n          <span>({borderRadius[size]})</span>\n        </SizeLabel>\n        <Shape radius={borderRadius[size]} />\n      </Flex>\n    ))}\n  </React.Fragment>\n);\n\nexport const Space = () => (\n  <React.Fragment>\n    {Object.keys(space).map(size => (\n      <Flex key={size}>\n        <SizeLabel>\n          {size}\n          <span>({(space as any)[size]})</span>\n        </SizeLabel>\n        <Shape size={(space as any)[size]} radius={borderRadius.m} />\n      </Flex>\n    ))}\n  </React.Fragment>\n);\n\nconst Palettes = styled('div')({\n  display: 'flex',\n  margin: -20,\n  flexWrap: 'wrap',\n});\n\nconst Palette = styled('ul')({\n  ...depth[3],\n  listStyle: 'none',\n  margin: 20,\n  padding: 0,\n  overflow: 'hidden',\n  width: 250,\n  alignSelf: 'flex-start',\n  borderRadius: borderRadius.l,\n  display: 'flex',\n  flexDirection: 'column',\n});\n\nconst Swatch = styled('li')<{bg: string; primary?: boolean}>(\n  {\n    ...type.levels.subtext.large,\n    fontWeight: type.properties.fontWeights.bold,\n    padding: `0 ${space.m}`,\n    height: space.xl,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  ({primary, bg}) =>\n    primary && {\n      ...type.levels.body.large,\n      fontWeight: type.properties.fontWeights.bold,\n      height: space.xxxl,\n      paddingTop: space.s,\n      paddingBottom: space.s,\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-around',\n      alignItems: 'flex-start',\n      textTransform: 'capitalize',\n    },\n  ({bg}) => ({\n    background: bg,\n    color: pickForegroundColor(bg),\n  })\n);\n\nconst colorNames = Object.keys(colors)\n  .map(color => color.replace(/\\d+$/, '')) // Remove shade numbers\n  .reduce((collection: string[], color: string) => {\n    // Remove duplicates\n    if (collection.indexOf(color) < 0) {\n      collection.push(color);\n    }\n    return collection;\n  }, []);\n\nconst StyledColors = styled('span')({\n  fontFamily: type.properties.fontFamilies.monospace,\n});\n\nexport const Colors = () => (\n  <Palettes>\n    {colorNames.map(colorName => (\n      <Palette key={colorName}>\n        <Swatch bg={(colors as any)[`${colorName}500`]} primary={true}>\n          <div>{colorName}</div>\n          <div>500</div>\n        </Swatch>\n        {[1, 2, 3, 4, 5, 6].map(level => {\n          const color = `${colorName}${level}00`;\n          return (\n            <Swatch bg={(colors as any)[color]} key={color}>\n              <span>{level}00</span>\n              <StyledColors>{(colors as any)[color]}</StyledColors>\n            </Swatch>\n          );\n        })}\n      </Palette>\n    ))}\n  </Palettes>\n);\n",Space.__RAW__="import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {pickForegroundColor} from '@workday/canvas-kit-react/common';\n\nimport {colors, type, depth, space, borderRadius} from '@workday/canvas-kit-react/tokens';\nimport {Text} from '@workday/canvas-kit-react/text';\nimport {Box, Flex} from '@workday/canvas-kit-react/layout';\n\nconst DepthCard = ({depth, children}) => {\n  return (\n    <Flex\n      depth={depth}\n      width={200}\n      height={200}\n      borderRadius=\"s\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      backgroundColor=\"frenchVanilla100\"\n    >\n      {children}\n    </Flex>\n  );\n};\n\nexport const Depth = () => (\n  <Flex gap=\"m\" flexDirection=\"column\">\n    <Flex gap=\"m\" flexWrap=\"wrap\">\n      <DepthCard depth=\"none\">Depth None</DepthCard>\n      <DepthCard depth={1}>Depth 1</DepthCard>\n      <DepthCard depth={2}>Depth 2</DepthCard>\n      <DepthCard depth={3}>Depth 3</DepthCard>\n      <DepthCard depth={4}>Depth 4</DepthCard>\n      <DepthCard depth={5}>Depth 5</DepthCard>\n      <DepthCard depth={6}>Depth 6</DepthCard>\n    </Flex>\n    <Text>Depth on a colored background</Text>\n    <Flex backgroundColor=\"soap400\" gap=\"m\" padding=\"m\" flexWrap=\"wrap\">\n      <DepthCard depth=\"none\">Depth None</DepthCard>\n      <DepthCard depth={1}>Depth 1</DepthCard>\n      <DepthCard depth={2}>Depth 2</DepthCard>\n      <DepthCard depth={3}>Depth 3</DepthCard>\n      <DepthCard depth={4}>Depth 4</DepthCard>\n      <DepthCard depth={5}>Depth 5</DepthCard>\n      <DepthCard depth={6}>Depth 6</DepthCard>\n    </Flex>\n  </Flex>\n);\n\nconst StyledLargeTitle = styled('h3')({\n  ...type.levels.title.large,\n});\n\nconst StyledMediumTitle = styled('h3')({\n  ...type.levels.title.medium,\n});\n\nconst StyledSmallTitle = styled('h3')({\n  ...type.levels.title.small,\n});\n\nconst StyledLargeHeading = styled('h3')({\n  ...type.levels.heading.large,\n});\n\nconst StyledMediumHeading = styled('h3')({\n  ...type.levels.heading.medium,\n});\n\nconst StyledSmallHeading = styled('h3')({\n  ...type.levels.heading.small,\n});\n\nconst StyledLargeBody = styled('h3')({\n  ...type.levels.body.large,\n});\n\nconst StyledMediumBody = styled('h3')({\n  ...type.levels.body.medium,\n});\nconst StyledSmallBody = styled('h3')({\n  ...type.levels.body.small,\n});\n\nconst StyledLargeSubtext = styled('h3')({\n  ...type.levels.subtext.large,\n});\nconst StyledMediumSubtext = styled('h3')({\n  ...type.levels.subtext.medium,\n});\nconst StyledSmallSubtext = styled('h3')({\n  ...type.levels.subtext.small,\n});\n\nconst StyledVariantsContainer = styled(Box)({\n  ...type.levels.body.medium,\n  '& > *': {display: 'block', margin: '4px 0'},\n});\n\nconst StyledErrorText = styled('span')({\n  ...type.variants.error,\n});\n\nconst StyledHintText = styled('span')({\n  ...type.variants.hint,\n});\nconst StyledInverseText = styled('span')({\n  ...type.variants.inverse,\n  display: 'inline-block !important',\n  background: '#667380',\n  padding: '2px 8px',\n  borderRadius: '4px',\n});\n\nexport const Type = () => (\n  <React.Fragment>\n    <h2>Levels (Hierarchy)</h2>\n\n    <StyledLargeTitle>Title Large Heading</StyledLargeTitle>\n    <StyledMediumTitle>Title Medium Heading</StyledMediumTitle>\n    <StyledSmallTitle>Title Small Heading</StyledSmallTitle>\n\n    <StyledLargeHeading>Heading Large Heading</StyledLargeHeading>\n    <StyledMediumHeading>Heading Medium Heading</StyledMediumHeading>\n    <StyledSmallHeading>Heading Small Heading</StyledSmallHeading>\n\n    <StyledLargeBody>Body Large Heading</StyledLargeBody>\n    <StyledMediumBody>Body Medium Heading</StyledMediumBody>\n    <StyledSmallBody>Body Small Heading</StyledSmallBody>\n\n    <StyledLargeSubtext>Subtext Large Heading</StyledLargeSubtext>\n    <StyledMediumSubtext>Subtext Medium Heading</StyledMediumSubtext>\n    <StyledSmallSubtext>Subtext Small Heading</StyledSmallSubtext>\n\n    <hr />\n\n    <h3>Variants</h3>\n    <StyledVariantsContainer>\n      <StyledErrorText>Error Text</StyledErrorText>\n      <StyledHintText>Hint Text</StyledHintText>\n      <StyledInverseText>Inverse Text</StyledInverseText>\n    </StyledVariantsContainer>\n  </React.Fragment>\n);\n\nconst Shape = styled('div')<{radius?: string | number; size?: string | number}>(\n  {\n    ...type.levels.body.small,\n    fontWeight: type.properties.fontWeights.bold,\n    margin: space.m,\n    background: colors.blueberry400,\n    color: colors.frenchVanilla100,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    '& span': {\n      ...type.levels.subtext.medium,\n      fontFamily: type.properties.fontFamilies.monospace,\n      display: 'block',\n      color: colors.blueberry100,\n    },\n  },\n  ({radius}) => ({\n    borderRadius: radius,\n  }),\n  ({size}) => ({\n    width: size || space.xxl,\n    height: size || space.xxl,\n  })\n);\n\nconst SizeLabel = styled('div')({\n  ...type.levels.body.small,\n  fontWeight: type.properties.fontWeights.bold,\n  margin: space.s,\n  width: 80,\n  '& span': {\n    ...type.levels.subtext.medium,\n    fontFamily: type.properties.fontFamilies.monospace,\n    ...type.variants.hint,\n    display: 'block',\n  },\n});\n\nexport const BorderRadius = () => (\n  <React.Fragment>\n    {Object.keys(borderRadius).map(size => (\n      <Flex key={size}>\n        <SizeLabel>\n          {size}\n          <span>({borderRadius[size]})</span>\n        </SizeLabel>\n        <Shape radius={borderRadius[size]} />\n      </Flex>\n    ))}\n  </React.Fragment>\n);\n\nexport const Space = () => (\n  <React.Fragment>\n    {Object.keys(space).map(size => (\n      <Flex key={size}>\n        <SizeLabel>\n          {size}\n          <span>({(space as any)[size]})</span>\n        </SizeLabel>\n        <Shape size={(space as any)[size]} radius={borderRadius.m} />\n      </Flex>\n    ))}\n  </React.Fragment>\n);\n\nconst Palettes = styled('div')({\n  display: 'flex',\n  margin: -20,\n  flexWrap: 'wrap',\n});\n\nconst Palette = styled('ul')({\n  ...depth[3],\n  listStyle: 'none',\n  margin: 20,\n  padding: 0,\n  overflow: 'hidden',\n  width: 250,\n  alignSelf: 'flex-start',\n  borderRadius: borderRadius.l,\n  display: 'flex',\n  flexDirection: 'column',\n});\n\nconst Swatch = styled('li')<{bg: string; primary?: boolean}>(\n  {\n    ...type.levels.subtext.large,\n    fontWeight: type.properties.fontWeights.bold,\n    padding: `0 ${space.m}`,\n    height: space.xl,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  ({primary, bg}) =>\n    primary && {\n      ...type.levels.body.large,\n      fontWeight: type.properties.fontWeights.bold,\n      height: space.xxxl,\n      paddingTop: space.s,\n      paddingBottom: space.s,\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-around',\n      alignItems: 'flex-start',\n      textTransform: 'capitalize',\n    },\n  ({bg}) => ({\n    background: bg,\n    color: pickForegroundColor(bg),\n  })\n);\n\nconst colorNames = Object.keys(colors)\n  .map(color => color.replace(/\\d+$/, '')) // Remove shade numbers\n  .reduce((collection: string[], color: string) => {\n    // Remove duplicates\n    if (collection.indexOf(color) < 0) {\n      collection.push(color);\n    }\n    return collection;\n  }, []);\n\nconst StyledColors = styled('span')({\n  fontFamily: type.properties.fontFamilies.monospace,\n});\n\nexport const Colors = () => (\n  <Palettes>\n    {colorNames.map(colorName => (\n      <Palette key={colorName}>\n        <Swatch bg={(colors as any)[`${colorName}500`]} primary={true}>\n          <div>{colorName}</div>\n          <div>500</div>\n        </Swatch>\n        {[1, 2, 3, 4, 5, 6].map(level => {\n          const color = `${colorName}${level}00`;\n          return (\n            <Swatch bg={(colors as any)[color]} key={color}>\n              <span>{level}00</span>\n              <StyledColors>{(colors as any)[color]}</StyledColors>\n            </Swatch>\n          );\n        })}\n      </Palette>\n    ))}\n  </Palettes>\n);\n",Colors.__RAW__="import * as React from 'react';\nimport styled from '@emotion/styled';\nimport {pickForegroundColor} from '@workday/canvas-kit-react/common';\n\nimport {colors, type, depth, space, borderRadius} from '@workday/canvas-kit-react/tokens';\nimport {Text} from '@workday/canvas-kit-react/text';\nimport {Box, Flex} from '@workday/canvas-kit-react/layout';\n\nconst DepthCard = ({depth, children}) => {\n  return (\n    <Flex\n      depth={depth}\n      width={200}\n      height={200}\n      borderRadius=\"s\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      backgroundColor=\"frenchVanilla100\"\n    >\n      {children}\n    </Flex>\n  );\n};\n\nexport const Depth = () => (\n  <Flex gap=\"m\" flexDirection=\"column\">\n    <Flex gap=\"m\" flexWrap=\"wrap\">\n      <DepthCard depth=\"none\">Depth None</DepthCard>\n      <DepthCard depth={1}>Depth 1</DepthCard>\n      <DepthCard depth={2}>Depth 2</DepthCard>\n      <DepthCard depth={3}>Depth 3</DepthCard>\n      <DepthCard depth={4}>Depth 4</DepthCard>\n      <DepthCard depth={5}>Depth 5</DepthCard>\n      <DepthCard depth={6}>Depth 6</DepthCard>\n    </Flex>\n    <Text>Depth on a colored background</Text>\n    <Flex backgroundColor=\"soap400\" gap=\"m\" padding=\"m\" flexWrap=\"wrap\">\n      <DepthCard depth=\"none\">Depth None</DepthCard>\n      <DepthCard depth={1}>Depth 1</DepthCard>\n      <DepthCard depth={2}>Depth 2</DepthCard>\n      <DepthCard depth={3}>Depth 3</DepthCard>\n      <DepthCard depth={4}>Depth 4</DepthCard>\n      <DepthCard depth={5}>Depth 5</DepthCard>\n      <DepthCard depth={6}>Depth 6</DepthCard>\n    </Flex>\n  </Flex>\n);\n\nconst StyledLargeTitle = styled('h3')({\n  ...type.levels.title.large,\n});\n\nconst StyledMediumTitle = styled('h3')({\n  ...type.levels.title.medium,\n});\n\nconst StyledSmallTitle = styled('h3')({\n  ...type.levels.title.small,\n});\n\nconst StyledLargeHeading = styled('h3')({\n  ...type.levels.heading.large,\n});\n\nconst StyledMediumHeading = styled('h3')({\n  ...type.levels.heading.medium,\n});\n\nconst StyledSmallHeading = styled('h3')({\n  ...type.levels.heading.small,\n});\n\nconst StyledLargeBody = styled('h3')({\n  ...type.levels.body.large,\n});\n\nconst StyledMediumBody = styled('h3')({\n  ...type.levels.body.medium,\n});\nconst StyledSmallBody = styled('h3')({\n  ...type.levels.body.small,\n});\n\nconst StyledLargeSubtext = styled('h3')({\n  ...type.levels.subtext.large,\n});\nconst StyledMediumSubtext = styled('h3')({\n  ...type.levels.subtext.medium,\n});\nconst StyledSmallSubtext = styled('h3')({\n  ...type.levels.subtext.small,\n});\n\nconst StyledVariantsContainer = styled(Box)({\n  ...type.levels.body.medium,\n  '& > *': {display: 'block', margin: '4px 0'},\n});\n\nconst StyledErrorText = styled('span')({\n  ...type.variants.error,\n});\n\nconst StyledHintText = styled('span')({\n  ...type.variants.hint,\n});\nconst StyledInverseText = styled('span')({\n  ...type.variants.inverse,\n  display: 'inline-block !important',\n  background: '#667380',\n  padding: '2px 8px',\n  borderRadius: '4px',\n});\n\nexport const Type = () => (\n  <React.Fragment>\n    <h2>Levels (Hierarchy)</h2>\n\n    <StyledLargeTitle>Title Large Heading</StyledLargeTitle>\n    <StyledMediumTitle>Title Medium Heading</StyledMediumTitle>\n    <StyledSmallTitle>Title Small Heading</StyledSmallTitle>\n\n    <StyledLargeHeading>Heading Large Heading</StyledLargeHeading>\n    <StyledMediumHeading>Heading Medium Heading</StyledMediumHeading>\n    <StyledSmallHeading>Heading Small Heading</StyledSmallHeading>\n\n    <StyledLargeBody>Body Large Heading</StyledLargeBody>\n    <StyledMediumBody>Body Medium Heading</StyledMediumBody>\n    <StyledSmallBody>Body Small Heading</StyledSmallBody>\n\n    <StyledLargeSubtext>Subtext Large Heading</StyledLargeSubtext>\n    <StyledMediumSubtext>Subtext Medium Heading</StyledMediumSubtext>\n    <StyledSmallSubtext>Subtext Small Heading</StyledSmallSubtext>\n\n    <hr />\n\n    <h3>Variants</h3>\n    <StyledVariantsContainer>\n      <StyledErrorText>Error Text</StyledErrorText>\n      <StyledHintText>Hint Text</StyledHintText>\n      <StyledInverseText>Inverse Text</StyledInverseText>\n    </StyledVariantsContainer>\n  </React.Fragment>\n);\n\nconst Shape = styled('div')<{radius?: string | number; size?: string | number}>(\n  {\n    ...type.levels.body.small,\n    fontWeight: type.properties.fontWeights.bold,\n    margin: space.m,\n    background: colors.blueberry400,\n    color: colors.frenchVanilla100,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    '& span': {\n      ...type.levels.subtext.medium,\n      fontFamily: type.properties.fontFamilies.monospace,\n      display: 'block',\n      color: colors.blueberry100,\n    },\n  },\n  ({radius}) => ({\n    borderRadius: radius,\n  }),\n  ({size}) => ({\n    width: size || space.xxl,\n    height: size || space.xxl,\n  })\n);\n\nconst SizeLabel = styled('div')({\n  ...type.levels.body.small,\n  fontWeight: type.properties.fontWeights.bold,\n  margin: space.s,\n  width: 80,\n  '& span': {\n    ...type.levels.subtext.medium,\n    fontFamily: type.properties.fontFamilies.monospace,\n    ...type.variants.hint,\n    display: 'block',\n  },\n});\n\nexport const BorderRadius = () => (\n  <React.Fragment>\n    {Object.keys(borderRadius).map(size => (\n      <Flex key={size}>\n        <SizeLabel>\n          {size}\n          <span>({borderRadius[size]})</span>\n        </SizeLabel>\n        <Shape radius={borderRadius[size]} />\n      </Flex>\n    ))}\n  </React.Fragment>\n);\n\nexport const Space = () => (\n  <React.Fragment>\n    {Object.keys(space).map(size => (\n      <Flex key={size}>\n        <SizeLabel>\n          {size}\n          <span>({(space as any)[size]})</span>\n        </SizeLabel>\n        <Shape size={(space as any)[size]} radius={borderRadius.m} />\n      </Flex>\n    ))}\n  </React.Fragment>\n);\n\nconst Palettes = styled('div')({\n  display: 'flex',\n  margin: -20,\n  flexWrap: 'wrap',\n});\n\nconst Palette = styled('ul')({\n  ...depth[3],\n  listStyle: 'none',\n  margin: 20,\n  padding: 0,\n  overflow: 'hidden',\n  width: 250,\n  alignSelf: 'flex-start',\n  borderRadius: borderRadius.l,\n  display: 'flex',\n  flexDirection: 'column',\n});\n\nconst Swatch = styled('li')<{bg: string; primary?: boolean}>(\n  {\n    ...type.levels.subtext.large,\n    fontWeight: type.properties.fontWeights.bold,\n    padding: `0 ${space.m}`,\n    height: space.xl,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  ({primary, bg}) =>\n    primary && {\n      ...type.levels.body.large,\n      fontWeight: type.properties.fontWeights.bold,\n      height: space.xxxl,\n      paddingTop: space.s,\n      paddingBottom: space.s,\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-around',\n      alignItems: 'flex-start',\n      textTransform: 'capitalize',\n    },\n  ({bg}) => ({\n    background: bg,\n    color: pickForegroundColor(bg),\n  })\n);\n\nconst colorNames = Object.keys(colors)\n  .map(color => color.replace(/\\d+$/, '')) // Remove shade numbers\n  .reduce((collection: string[], color: string) => {\n    // Remove duplicates\n    if (collection.indexOf(color) < 0) {\n      collection.push(color);\n    }\n    return collection;\n  }, []);\n\nconst StyledColors = styled('span')({\n  fontFamily: type.properties.fontFamilies.monospace,\n});\n\nexport const Colors = () => (\n  <Palettes>\n    {colorNames.map(colorName => (\n      <Palette key={colorName}>\n        <Swatch bg={(colors as any)[`${colorName}500`]} primary={true}>\n          <div>{colorName}</div>\n          <div>500</div>\n        </Swatch>\n        {[1, 2, 3, 4, 5, 6].map(level => {\n          const color = `${colorName}${level}00`;\n          return (\n            <Swatch bg={(colors as any)[color]} key={color}>\n              <span>{level}00</span>\n              <StyledColors>{(colors as any)[color]}</StyledColors>\n            </Swatch>\n          );\n        })}\n      </Palette>\n    ))}\n  </Palettes>\n);\n"}}]);