"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[2124],{"./modules/react/button/stories/visual-testing/Hyperlink.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.HyperlinkStates=void 0;(function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}})(__webpack_require__("./node_modules/react/index.js"));var _tokens=__webpack_require__("./modules/react/tokens/index.ts"),_layout=__webpack_require__("./modules/react/layout/index.ts"),_testing=__webpack_require__("./modules/react/testing/index.ts"),_button=__webpack_require__("./modules/react/button/index.ts"),_utils=__webpack_require__("./modules/react/button/stories/visual-testing/utils.tsx"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");exports.default={title:"Testing/Buttons/Button/Hyperlink",component:_button.Hyperlink,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import React from 'react';\\nimport {type} from '@workday/canvas-kit-react/tokens';\\n\\nimport {Box} from '@workday/canvas-kit-react/layout';\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {Hyperlink} from '@workday/canvas-kit-react/button';\\nimport {Container} from './utils';\\n\\nexport default {\\n  title: 'Testing/Buttons/Button/Hyperlink',\\n  component: Hyperlink,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const HyperlinkStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          variant: [\\n            {label: 'Default', value: undefined},\\n            {label: 'Inverse', value: 'inverse'},\\n          ],\\n        })}\\n        columnProps={permutateProps({\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n            {label: 'Visited', value: 'visited'},\\n          ],\\n        })}\\n      >\\n        {(props: any) => (\\n          <Container blue={props.variant === 'inverse'}>\\n            <Box {...type.levels.subtext.large}>\\n              <Box as=\\\"span\\\" color={props.variant === 'inverse' ? 'frenchVanilla100' : undefined}>\\n                Here's a <Hyperlink {...props}>Link</Hyperlink> to something\\n              </Box>\\n            </Box>\\n          </Container>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"HyperlinkStates\": {\n    \"startLoc\": {\n      \"col\": 31,\n      \"line\": 23\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 57\n    },\n    \"startBody\": {\n      \"col\": 31,\n      \"line\": 23\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 57\n    }\n  }\n};\n    \nimport React from 'react';\nimport {type} from '@workday/canvas-kit-react/tokens';\n\nimport {Box} from '@workday/canvas-kit-react/layout';\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {Hyperlink} from '@workday/canvas-kit-react/button';\nimport {Container} from './utils';\n\nexport default {\n  title: 'Testing/Buttons/Button/Hyperlink',\n  component: Hyperlink,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import React from 'react';\\nimport {type} from '@workday/canvas-kit-react/tokens';\\n\\nimport {Box} from '@workday/canvas-kit-react/layout';\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {Hyperlink} from '@workday/canvas-kit-react/button';\\nimport {Container} from './utils';\\n\\nexport default {\\n  title: 'Testing/Buttons/Button/Hyperlink',\\n  component: Hyperlink,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const HyperlinkStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          variant: [\\n            {label: 'Default', value: undefined},\\n            {label: 'Inverse', value: 'inverse'},\\n          ],\\n        })}\\n        columnProps={permutateProps({\\n          className: [\\n            {label: 'Default', value: ''},\\n            {label: 'Hover', value: 'hover'},\\n            {label: 'Focus', value: 'focus'},\\n            {label: 'Focus Hover', value: 'focus hover'},\\n            {label: 'Active', value: 'active'},\\n            {label: 'Active Hover', value: 'active hover'},\\n            {label: 'Visited', value: 'visited'},\\n          ],\\n        })}\\n      >\\n        {(props: any) => (\\n          <Container blue={props.variant === 'inverse'}>\\n            <Box {...type.levels.subtext.large}>\\n              <Box as=\\\"span\\\" color={props.variant === 'inverse' ? 'frenchVanilla100' : undefined}>\\n                Here's a <Hyperlink {...props}>Link</Hyperlink> to something\\n              </Box>\\n            </Box>\\n          </Container>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\",\n    \"locationsMap\": {\n      \"hyperlink-states\": {\n        \"startLoc\": {\n          \"col\": 31,\n          \"line\": 23\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 57\n        },\n        \"startBody\": {\n          \"col\": 31,\n          \"line\": 23\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 57\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const HyperlinkStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          variant: [\n            {label: 'Default', value: undefined},\n            {label: 'Inverse', value: 'inverse'},\n          ],\n        })}\n        columnProps={permutateProps({\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n            {label: 'Visited', value: 'visited'},\n          ],\n        })}\n      >\n        {(props: any) => (\n          <Container blue={props.variant === 'inverse'}>\n            <Box {...type.levels.subtext.large}>\n              <Box as=\"span\" color={props.variant === 'inverse' ? 'frenchVanilla100' : undefined}>\n                Here's a <Hyperlink {...props}>Link</Hyperlink> to something\n              </Box>\n            </Box>\n          </Container>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n",locationsMap:{"hyperlink-states":{startLoc:{col:31,line:74},endLoc:{col:1,line:108},startBody:{col:31,line:74},endBody:{col:1,line:108}}}},storySource:{source:"import React from 'react';\nimport {type} from '@workday/canvas-kit-react/tokens';\n\nimport {Box} from '@workday/canvas-kit-react/layout';\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {Hyperlink} from '@workday/canvas-kit-react/button';\nimport {Container} from './utils';\n\nexport default {\n  title: 'Testing/Buttons/Button/Hyperlink',\n  component: Hyperlink,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const HyperlinkStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          variant: [\n            {label: 'Default', value: undefined},\n            {label: 'Inverse', value: 'inverse'},\n          ],\n        })}\n        columnProps={permutateProps({\n          className: [\n            {label: 'Default', value: ''},\n            {label: 'Hover', value: 'hover'},\n            {label: 'Focus', value: 'focus'},\n            {label: 'Focus Hover', value: 'focus hover'},\n            {label: 'Active', value: 'active'},\n            {label: 'Active Hover', value: 'active hover'},\n            {label: 'Visited', value: 'visited'},\n          ],\n        })}\n      >\n        {(props: any) => (\n          <Container blue={props.variant === 'inverse'}>\n            <Box {...type.levels.subtext.large}>\n              <Box as=\"span\" color={props.variant === 'inverse' ? 'frenchVanilla100' : undefined}>\n                Here's a <Hyperlink {...props}>Link</Hyperlink> to something\n              </Box>\n            </Box>\n          </Container>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n",locationsMap:{"hyperlink-states":{startLoc:{col:31,line:23},endLoc:{col:1,line:57},startBody:{col:31,line:23},endBody:{col:1,line:57}}}},chromatic:{disable:!1}}};exports.HyperlinkStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({variant:[{label:"Default",value:void 0},{label:"Inverse",value:"inverse"}]}),columnProps:(0,_testing.permutateProps)({className:[{label:"Default",value:""},{label:"Hover",value:"hover"},{label:"Focus",value:"focus"},{label:"Focus Hover",value:"focus hover"},{label:"Active",value:"active"},{label:"Active Hover",value:"active hover"},{label:"Visited",value:"visited"}]}),children:props=>(0,_jsxRuntime.jsx)(_utils.Container,{blue:"inverse"===props.variant,children:(0,_jsxRuntime.jsx)(_layout.Box,{..._tokens.type.levels.subtext.large,children:(0,_jsxRuntime.jsxs)(_layout.Box,{as:"span",color:"inverse"===props.variant?"frenchVanilla100":void 0,children:["Here's a ",(0,_jsxRuntime.jsx)(_button.Hyperlink,{...props,children:"Link"})," to something"]})})})})})};module.exports.__namedExportsOrder=["HyperlinkStates"]},"./modules/react/button/stories/visual-testing/utils.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.stateTableColumnProps=exports.Container=void 0;var _canvasKitStyling=__webpack_require__("./modules/styling/index.ts"),systemIcons=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/@workday/canvas-system-icons-web/dist/es6/index.js")),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}const buttonLayout=(0,_canvasKitStyling.createStyles)({display:"flex",alignItems:"center",justifyContent:"center"}),blueBackground=(0,_canvasKitStyling.createStyles)({display:"flex",alignItems:"center",justifyContent:"center",backgroundColor:"#0875e1",padding:"12px",borderRadius:"4px"}),Container=props=>(0,_jsxRuntime.jsx)("div",{className:props.blue?blueBackground:buttonLayout,children:props.children});exports.Container=Container,Container.displayName="Container";exports.stateTableColumnProps=[{label:"Default ",props:{className:"",disabled:!1}},{label:"Default Disabled",props:{className:"",disabled:!0}},{label:"Hover ",props:{className:"hover",disabled:!1}},{label:"Hover Disabled",props:{className:"hover",disabled:!0}},{label:"Focus ",props:{className:"focus",disabled:!1}},{label:"Focus Hover ",props:{className:"focus hover",disabled:!1}},{label:"Active ",props:{className:"active",disabled:!1}},{label:"Active Hover ",props:{className:"active hover",disabled:!1}}];const systemIconArray=[];for(const icon in systemIcons)systemIcons[icon].filename&&systemIconArray.push(systemIcons[icon])}}]);