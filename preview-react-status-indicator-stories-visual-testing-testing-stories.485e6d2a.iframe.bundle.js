"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[6171],{"./modules/preview-react/status-indicator/stories/visual-testing/testing.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.StatusIndicatorStates=void 0;var React=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_testing=__webpack_require__("./modules/react/testing/index.ts"),_index=__webpack_require__("./modules/preview-react/status-indicator/index.ts"),_canvasSystemIconsWeb=__webpack_require__("./node_modules/@workday/canvas-system-icons-web/dist/es6/index.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}exports.default={title:"Testing/Preview/Status Indicator",component:_index.StatusIndicator,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import * as React from 'react';\\n\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\n\\nimport {StatusIndicator} from '../../index';\\nimport {uploadCloudIcon} from '@workday/canvas-system-icons-web';\\n\\nexport default {\\n  title: 'Testing/Preview/Status Indicator',\\n  component: StatusIndicator,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const StatusIndicatorStates = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps({\\n        emphasis: [\\n          {value: 'low', label: 'Low Emphasis'},\\n          {value: 'high', label: 'High Emphasis'},\\n        ],\\n        icon: [\\n          {value: undefined, label: ''},\\n          {value: uploadCloudIcon, label: 'With Icon'},\\n        ],\\n      })}\\n      columnProps={permutateProps({\\n        variant: [\\n          {value: 'gray', label: 'Gray'},\\n          {value: 'blue', label: 'Blue'},\\n          {value: 'green', label: 'Green'},\\n          {value: 'orange', label: 'Orange'},\\n          {value: 'red', label: 'Red'},\\n          {value: 'transparent', label: 'Transparent'},\\n        ],\\n      })}\\n    >\\n      {props => {\\n        const {emphasis, icon, variant} = props;\\n        return (\\n          <StatusIndicator emphasis={emphasis} variant={variant}>\\n            <StatusIndicator.Icon icon={icon} />\\n            <StatusIndicator.Label>Lorem impsum dolor</StatusIndicator.Label>\\n          </StatusIndicator>\\n        );\\n      }}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"StatusIndicatorStates\": {\n    \"startLoc\": {\n      \"col\": 37,\n      \"line\": 22\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 57\n    },\n    \"startBody\": {\n      \"col\": 37,\n      \"line\": 22\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 57\n    }\n  }\n};\n    \nimport * as React from 'react';\n\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\n\nimport {StatusIndicator} from '../../index';\nimport {uploadCloudIcon} from '@workday/canvas-system-icons-web';\n\nexport default {\n  title: 'Testing/Preview/Status Indicator',\n  component: StatusIndicator,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import * as React from 'react';\\n\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\n\\nimport {StatusIndicator} from '../../index';\\nimport {uploadCloudIcon} from '@workday/canvas-system-icons-web';\\n\\nexport default {\\n  title: 'Testing/Preview/Status Indicator',\\n  component: StatusIndicator,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nexport const StatusIndicatorStates = () => (\\n  <StaticStates>\\n    <ComponentStatesTable\\n      rowProps={permutateProps({\\n        emphasis: [\\n          {value: 'low', label: 'Low Emphasis'},\\n          {value: 'high', label: 'High Emphasis'},\\n        ],\\n        icon: [\\n          {value: undefined, label: ''},\\n          {value: uploadCloudIcon, label: 'With Icon'},\\n        ],\\n      })}\\n      columnProps={permutateProps({\\n        variant: [\\n          {value: 'gray', label: 'Gray'},\\n          {value: 'blue', label: 'Blue'},\\n          {value: 'green', label: 'Green'},\\n          {value: 'orange', label: 'Orange'},\\n          {value: 'red', label: 'Red'},\\n          {value: 'transparent', label: 'Transparent'},\\n        ],\\n      })}\\n    >\\n      {props => {\\n        const {emphasis, icon, variant} = props;\\n        return (\\n          <StatusIndicator emphasis={emphasis} variant={variant}>\\n            <StatusIndicator.Icon icon={icon} />\\n            <StatusIndicator.Label>Lorem impsum dolor</StatusIndicator.Label>\\n          </StatusIndicator>\\n        );\\n      }}\\n    </ComponentStatesTable>\\n  </StaticStates>\\n);\\n\",\n    \"locationsMap\": {\n      \"status-indicator-states\": {\n        \"startLoc\": {\n          \"col\": 37,\n          \"line\": 22\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 57\n        },\n        \"startBody\": {\n          \"col\": 37,\n          \"line\": 22\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 57\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const StatusIndicatorStates = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps({\n        emphasis: [\n          {value: 'low', label: 'Low Emphasis'},\n          {value: 'high', label: 'High Emphasis'},\n        ],\n        icon: [\n          {value: undefined, label: ''},\n          {value: uploadCloudIcon, label: 'With Icon'},\n        ],\n      })}\n      columnProps={permutateProps({\n        variant: [\n          {value: 'gray', label: 'Gray'},\n          {value: 'blue', label: 'Blue'},\n          {value: 'green', label: 'Green'},\n          {value: 'orange', label: 'Orange'},\n          {value: 'red', label: 'Red'},\n          {value: 'transparent', label: 'Transparent'},\n        ],\n      })}\n    >\n      {props => {\n        const {emphasis, icon, variant} = props;\n        return (\n          <StatusIndicator emphasis={emphasis} variant={variant}>\n            <StatusIndicator.Icon icon={icon} />\n            <StatusIndicator.Label>Lorem impsum dolor</StatusIndicator.Label>\n          </StatusIndicator>\n        );\n      }}\n    </ComponentStatesTable>\n  </StaticStates>\n);\n",locationsMap:{"status-indicator-states":{startLoc:{col:37,line:73},endLoc:{col:1,line:108},startBody:{col:37,line:73},endBody:{col:1,line:108}}}},storySource:{source:"import * as React from 'react';\n\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\n\nimport {StatusIndicator} from '../../index';\nimport {uploadCloudIcon} from '@workday/canvas-system-icons-web';\n\nexport default {\n  title: 'Testing/Preview/Status Indicator',\n  component: StatusIndicator,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nexport const StatusIndicatorStates = () => (\n  <StaticStates>\n    <ComponentStatesTable\n      rowProps={permutateProps({\n        emphasis: [\n          {value: 'low', label: 'Low Emphasis'},\n          {value: 'high', label: 'High Emphasis'},\n        ],\n        icon: [\n          {value: undefined, label: ''},\n          {value: uploadCloudIcon, label: 'With Icon'},\n        ],\n      })}\n      columnProps={permutateProps({\n        variant: [\n          {value: 'gray', label: 'Gray'},\n          {value: 'blue', label: 'Blue'},\n          {value: 'green', label: 'Green'},\n          {value: 'orange', label: 'Orange'},\n          {value: 'red', label: 'Red'},\n          {value: 'transparent', label: 'Transparent'},\n        ],\n      })}\n    >\n      {props => {\n        const {emphasis, icon, variant} = props;\n        return (\n          <StatusIndicator emphasis={emphasis} variant={variant}>\n            <StatusIndicator.Icon icon={icon} />\n            <StatusIndicator.Label>Lorem impsum dolor</StatusIndicator.Label>\n          </StatusIndicator>\n        );\n      }}\n    </ComponentStatesTable>\n  </StaticStates>\n);\n",locationsMap:{"status-indicator-states":{startLoc:{col:37,line:22},endLoc:{col:1,line:57},startBody:{col:37,line:22},endBody:{col:1,line:57}}}},chromatic:{disable:!1}}};const StatusIndicatorStates=()=>React.createElement(_testing.StaticStates,null,React.createElement(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({emphasis:[{value:"low",label:"Low Emphasis"},{value:"high",label:"High Emphasis"}],icon:[{value:void 0,label:""},{value:_canvasSystemIconsWeb.uploadCloudIcon,label:"With Icon"}]}),columnProps:(0,_testing.permutateProps)({variant:[{value:"gray",label:"Gray"},{value:"blue",label:"Blue"},{value:"green",label:"Green"},{value:"orange",label:"Orange"},{value:"red",label:"Red"},{value:"transparent",label:"Transparent"}]})},(props=>{const{emphasis,icon,variant}=props;return React.createElement(_index.StatusIndicator,{emphasis,variant},React.createElement(_index.StatusIndicator.Icon,{icon}),React.createElement(_index.StatusIndicator.Label,null,"Lorem impsum dolor"))})));exports.StatusIndicatorStates=StatusIndicatorStates,StatusIndicatorStates.displayName="StatusIndicatorStates",module.exports.__namedExportsOrder=["StatusIndicatorStates"]}}]);