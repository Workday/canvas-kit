"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[3263],{"./modules/styling/stories/mdx/Stencils.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),_workday_canvas_kit_docs__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./modules/docs/index.ts"),_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./modules/preview-react/information-highlight/index.ts"),_workday_canvas_tokens_web__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@workday/canvas-tokens-web/dist/es6/system/index.js"),_examples_CreateStencil__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./modules/styling/stories/mdx/examples/CreateStencil.tsx");function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",code:"code",ul:"ul",li:"li",h2:"h2",h3:"h3",a:"a",pre:"pre",strong:"strong",h4:"h4",em:"em"},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__.RP)(),props.components);return _workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight||_missingMdxReference("InformationHighlight",!1),_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Body||_missingMdxReference("InformationHighlight.Body",!0),_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Heading||_missingMdxReference("InformationHighlight.Heading",!0),_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Icon||_missingMdxReference("InformationHighlight.Icon",!0),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_2__.W8,{title:"Styling/Getting Started/Create Stencils"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"stencils",children:"Stencils"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Stencils are a reusable function that returns ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"style"})," and ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"className"})," props in an object. A Stencil\nshould apply to a single element. If your component has nested elements, you can youse ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"parts"})," to\ntarger those elements in the Stencil. If your component is a compound component, a stencil should be\ncreated for each subcomponent. If your component is a config component, a stencil can have nested\nstyles."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"We created Stencils as the reusable primitive of components. Stencils provide:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"vars"}),": CSS variables for dynamic properties"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"base"}),": base styles to any component"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"modifier"}),": modifiers like “size = small,medium,large” or “color=red,blue,etc”"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"parts"}),": matching sub-elements that are part of a component"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"compound"}),": compound modifiers - styles that match multiple modifiers"]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"basic-example",children:"Basic Example"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"In the example below, Stencils allow you to dynamically style elements or components based on properties."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_docs__WEBPACK_IMPORTED_MODULE_3__.ExampleCodeBlock,{code:_examples_CreateStencil__WEBPACK_IMPORTED_MODULE_6__.v}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.h2,{id:"when-to-use-createstencil",children:["When to Use ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"createStencil"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"When you're styling parts of a component that rely on dynamic properties."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.li,{children:"When you want to create a reusable component with dynamic styles."}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Use a Stencil when building reusable components that have dynamic styles and properties."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"concepts",children:"Concepts"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"base-styles",children:"Base styles"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Base styles are always applied to a Stencil. All your default styles should go here. Base styles\nsupport psuedo selectors like ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:":focus-visible"})," or ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:":hover"})," as well as child selectors. Any selector\nsupported by ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"@emotion/css"})," is valid here. All styles must be static and statically analyzable by\nthe tranformer. If you need dynamic styling, look at Variables and Modifiers."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"variables",children:"Variables"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Variables allow some properties to be dynamic. They work by creating\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties",target:"_blank",rel:"nofollow noopener noreferrer",children:"CSS Variables"})," with\nunique names and are applied using the\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style",target:"_blank",rel:"nofollow noopener noreferrer",children:"style"})," property of an element\nto locally scope an override. Since we don't have access to those names, we need a function wrapper\naround our style objects. This includes ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"base"}),", ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"modifiers"}),", and ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"compound"})," modifiers."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Here's a simplified example:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"const myStencil = createStencil({\n  vars: {\n    defaultColor: 'red' // default value\n    nonDefaultedColor: '', // will allow for uninitialization\n  },\n  base: ({defaultColor}) => {\n    color: defaultColor // `defaultColor` is '--defaultColor-abc123', not 'red'\n  }\n})\n\nconst elemProps = myStencil({color: 'blue'}) // {style: {'--defaultColor-abc123': 'blue'}}\n\n<div {...elemProps} />\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"This will produce the following HTML:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-html",children:'<style>\n  .css-abc123 {\n    --defaultColor-abc123: red;\n    color: var(--defaultColor-abc123);\n  }\n</style>\n<div class="css-123abc" style="--defaultColor-abc123: blue;"></div>\n'})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The element will have a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"color"})," property of ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"'blue'"}),' because the element style is the highest\nspecificity and wins over a local class name. In the "Styles" tab of developer tools, it will look\nlike the following:']}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"element.style {\n  --defaultColor-abc123: blue;\n}\n\n.css-abc123 {\n  --defaultColor-abc123: red;\n  color: var(--defaultColor-abc123); // blue\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Variables are automatically added to the config of a Stencil. They share the same namespace as\nmodifiers, so ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"do not have a modifier with the same name as a variable"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight,{className:"sb-unstyled",cs:{marginBlock:_workday_canvas_tokens_web__WEBPACK_IMPORTED_MODULE_7__.space.x4},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Icon,{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Heading,{children:"Note"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Body,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Variables should be used sparingly. Style properties can be easily overridden without\nvariables. Variables are useful if you want to expose changing properties regardless of selectors.\nFor example, Buttons use variables for colors of all states (hover, active, focus, disabled, and\nnested icons). Without variables, overriding the focus color would require deeply nested selector\noverrides."})})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4,{id:"cascading-variables",children:"Cascading Variables"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Notice the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"nonDefaultedColor"})," is not included in the base styles like ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"defaultColor"}),' was. If a\nvariable has an empty string, it will can be uninitialized. Stencil variables with a default value\nwill create a "cascade barrier". A cascade barrier prevents the variable from "leaking" into the\ncomponent. For example, if a ',(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Card"})," component was rendered within another ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Card"})," component, the\nvariables from the parent ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Card"})," would not leak into the child ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Card"})," component. But there are times\nwhere a component expects a parent component to set a CSS variable and that it should cascade to the\ncomponent. An example of this is the relationship between ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"SystemIcon"})," and ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Button"}),". The ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Button"}),"\ncomponents set the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"SystemIcon"})," variables and they should cascade into the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"SystemIcon"})," component."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight,{className:"sb-unstyled",cs:{marginBlock:_workday_canvas_tokens_web__WEBPACK_IMPORTED_MODULE_7__.space.x4},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Icon,{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Heading,{children:"Note"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Body,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Non-cascade variables ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.em,{children:"could"})," be initialized. If you use uninitialized variables, be sure\nto use a fallback in your styles."]})})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"const myStencil = createStencil({\n  vars: {\n    color: '', // uninitialized\n  },\n  base({color}) {\n    return {\n      // provide a fallback. A uninitialized CSS variable will fall back to `initial`.\n      // for the `color` CSS property, that's most likely black (default text color)\n      color: cssVar(color, 'red'),\n    };\n  },\n});\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4,{id:"nested-variables",children:"Nested Variables"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Variables can be nested one level. This can be useful for colors with different psuedo selectors\nlike ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:":hover"})," or ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:":focus"}),". Here's an example:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"const myStencil = createStencil({\n  vars: {\n    default: {\n      color: 'red'\n    },\n    hover: {\n      color: 'blue'\n    },\n    focus: {\n      color: 'orange'\n    }\n  },\n  base: ({default, hover, focus}) => {\n    color: default.color,\n    '&:hover': {\n      color: hover.color\n    },\n    '&:focus': {\n      color: focus.color\n    }\n  }\n})\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"modifiers",children:"Modifiers"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:'Modifiers are modifications to base styles. It should be used to change the appearance of a base\nstyle. For example, a button may have a modifier for "primary" or "secondary" which may change the\nvisual emphasis of the button. Each modifier has its own CSS class name and the stencil will return\nthe correct CSS classes to apply to an element based on what modifiers are active.'}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"const buttonStencil = createStencil({\n  base: {\n    padding: 5\n    // base styles\n  },\n  modifiers: {\n    variant: { // modifier name\n      primary: {\n        background: 'blue'\n      },\n      secondary: {\n        background: 'gray'\n      }\n    }\n  },\n  defaultModifiers: {\n    variant: 'secondary'\n  }\n})\n\nconst elemProps = myStencil({variant: 'primary'}) // {className: \"css-a0 css-a1\"}\n\n<div {...elemProps} />\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"The HTML may look something like this:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-html",children:"<style>\n  .css-a0 {\n    padding: 5px;\n  }\n  .css-a1 {\n    background: 'blue';\n  }\n  .css-a2 {\n    background: 'gray';\n  }\n</style>\n<div class=\"css-a0 css-a1\"></div>\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The optional ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"defaultModifiers"})," config property will default modifiers to a value. If a modifier is\nnot passed to the stencil, the default will be used."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"myStencil(); // className will be `'css-a0 css-a2'`\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"compound-modifiers",children:"Compound Modifiers"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"A compound modifier creates a new CSS class for the intersection of two or more modifiers. Each\nmodifier can have its own separate CSS class while the intersection is a different CSS class."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"For example:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"const buttonStencil = createStencil({\n  base: {\n    padding: 10,\n    // base styles\n  },\n  modifiers: {\n    size: {\n      // modifier name\n      large: {\n        padding: 20,\n      },\n      small: {\n        padding: 5,\n      },\n    },\n    iconPosition: {\n      start: {\n        paddingInlineStart: 5,\n      },\n      end: {\n        paddingInlineEnd: 5,\n      },\n    },\n  },\n  compound: [\n    {\n      modifiers: {size: 'large', position: 'start'},\n      styles: {\n        paddingInlineStart: 15,\n      },\n    },\n    {\n      modifiers: {size: 'small', position: 'end'},\n      styles: {\n        paddingInlineEnd: 0,\n      },\n    },\n  ],\n});\n\n<div {...buttonStencil()} />\n<div {...buttonStencil({size: 'small'})} />\n<div {...buttonStencil({size: 'small', iconPosition: 'end'})} />\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"The HTML will look something like this:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-html",children:'<style>\n  .a0 {\n    padding: 10px;\n  }\n  .a1 {\n    padding: 20px;\n  }\n  .a2 {\n    padding: 5px;\n  }\n  .a3 {\n    padding-inline-start: 5px;\n  }\n  .a4 {\n    padding-inline-end: 5px;\n  }\n  .a5 {\n    padding-inline-start: 15px;\n  }\n  .a6 {\n    padding-inline-start: 0px;\n  }\n</style>\n<div class="a0"></div>\n<div class="a0 a2"></div>\n<div class="a0 a2 a4 a6"></div>\n'})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Notice the stencil adds all the class names that match the base, modifiers, and compound modifiers."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"variables-and-modifiers-with-same-keys",children:"Variables and Modifiers with same keys"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"It is possible to have a variable and modifier sharing the same key. The Stencil will accept either\nthe modifier option or a string. The value will be sent as a variable regardless while the modifer\nwill only match if it is a valid modifer key."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-tsx",children:"const buttonStencil = createStencil({\n  vars: {\n    width: '10px',\n  },\n  base({width}) {\n    return {\n      width: width,\n    };\n  },\n  modifiers: {\n    width: {\n      zero: {\n        width: '0', // overrides base styles\n      },\n    },\n  },\n});\n\n// `'zero'` is part of autocomplete\nmyStencil({width: 'zero'});\n// returns {className: 'css-button css-button--width-zero', styles: { '--button-width': 'zero'}}\n\n// width also accepts a string\nmyStencil({width: '10px'});\n// returns {className: 'css-button', styles: { '--button-width': '10px'}}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"styling-elements-via-component-parts",children:"Styling Elements via Component Parts"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["The goal of compound components is to expose one component per semantic element. Most of the time\nthis means a 1:1 relationship of a component and DOM element. Sometimes a semantic element contains\nnon-semantic elements for styling. An example might be a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<button>"})," with a icon for visual\nreinforcement, and a label for a semantic label. The semantic element is the ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"<button>"})," while the\nicon has no semantic value and the label automatically provides the semantic button with an\naccessible name. In order to style the icon and label elements, you have to know the DOM structure\nto target those specific elements in order to style it."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-jsx",children:"import {createStencil} from '@workday/canvas-kit-styling';\n\nconst myButtonStencil = createStencil({\n  base: {\n    background: 'transparent',\n    i: {\n      // ...icon styles\n    },\n    span: {\n      // ...label styles\n    },\n    ':hover': {\n      // ...hover button styles\n      i: {\n        // ...hover icon styles\n      },\n      span: {\n        // ...hover label styles\n      },\n    },\n  },\n});\n\nconst MyButton = ({children, ...elemProps}) => {\n  return (\n    <button {...handleCsProp(elemProps, myButtonStencil())}>\n      <i />\n      <span>{children}</span>\n    </button>\n  );\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"using-component-parts-to-style-elements",children:"Using Component Parts to Style Elements"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["To style elements in the render function, we'll need to choose what elements to add the parts to. In\nthe example below, we're able to spread the parts directly to elements. The Stencil will generate\nthe type and value most appropriate for the context the part is used. In the Stencil, the part is\nrepresented by a string that looks like ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:'[data-part="{partValue}"]'})," and in the render function, it\nis an object that looks like ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"{'data-part': partValue}"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{className:"language-jsx",children:"import {createStencil, handleCsProp} from '@workday/canvas-kit-styling';\n\nconst myButtonStencil = createStencil({\n  parts: {\n    icon: 'my-button-icon',\n    label: 'my-button-label',\n  },\n  base: ({iconPart, labelPart}) => ({\n    background: 'transparent',\n    [iconPart]: {\n      // `[data-part=\"my-button-icon\"]`\n      // ...icon styles\n    },\n    [labelPart]: {\n      // `[data-part=\"my-button-label\"]`\n      // ...label styles\n    },\n    '&:hover': {\n      // ...hover styles for button element\n      [iconPart]: {\n        // ...hover styles for icon part\n      },\n    },\n  }),\n});\n\nconst MyButton = ({children, ...elemProps}) => {\n  return (\n    <button {...handleCsProp(elemProps, myButtonStencil())}>\n      <i {...myButtonStencil.parts.icon} /> {/* data-part={my-button-icon} */}\n      <span {...myButtonStencil.parts.label}>{children}</span> {/* data-part={my-button-label} */}\n    </button>\n  );\n};\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"As a reusable component, you can use component parts to style elements that are not exposed in the\nAPI. Consumers can also use the type safe Stencil to target that element to style it as well. As a\ngeneral rule, a Stencil maps to a component. Multiple Stencils per component usually means nested\nelements that are not targets for style overrides."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight,{className:"sb-unstyled",cs:{marginBlock:_workday_canvas_tokens_web__WEBPACK_IMPORTED_MODULE_7__.space.x4},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Icon,{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Heading,{children:"Note"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_workday_canvas_kit_preview_react_information_highlight__WEBPACK_IMPORTED_MODULE_5__.InformationHighlight.Body,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"While component parts are a way to give access to elements in order to style, they\nshould be used sparingly. Using component parts increases CSS specificity. A component part should\nnot be used on a nested component that has its own Stencil. The result will be any style\nproperties defined with a component part will have a higher specificity than other styles."})})]})]})}const __WEBPACK_DEFAULT_EXPORT__=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,_home_runner_work_canvas_kit_canvas_kit_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__.RP)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,Object.assign({},props,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,props)})):_createMdxContent(props)};function _missingMdxReference(id,component){throw new Error("Expected "+(component?"component":"object")+" `"+id+"` to be defined: you likely forgot to import, pass, or provide it.")}},"./modules/styling/stories/mdx/examples/CreateStencil.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{exports.v=void 0;var React=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_canvasKitStyling=__webpack_require__("./modules/styling/index.ts"),_card=__webpack_require__("./modules/react/card/index.ts"),_canvasTokensWeb=__webpack_require__("./node_modules/@workday/canvas-tokens-web/dist/es6/index.js"),_switch=__webpack_require__("./modules/react/switch/index.ts"),_formField=__webpack_require__("./modules/react/form-field/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}const themedCardStencil=(0,_canvasKitStyling.createStencil)({vars:{headerColor:""},parts:{header:"themed-card-header",body:"themed-card-body"},base:({headerPart,headerColor})=>({padding:_canvasTokensWeb.system.space.x4,boxShadow:_canvasTokensWeb.system.depth[2],backgroundColor:_canvasTokensWeb.system.color.bg.default,color:_canvasTokensWeb.system.color.text.default,[headerPart]:{color:headerColor}}),modifiers:{isDarkTheme:{true:({headerPart,bodyPart})=>({backgroundColor:_canvasTokensWeb.system.color.bg.contrast.default,color:_canvasTokensWeb.system.color.text.inverse,[`${headerPart}, ${bodyPart}`]:{color:_canvasTokensWeb.system.color.text.inverse}})}}}),CreateStencil=({isDarkTheme,headerColor,elemProps})=>{const[darkTheme,setIsDarkTheme]=React.useState(!1);return(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsxs)(_formField.FormField,{children:[(0,_jsxRuntime.jsx)(_formField.FormField.Label,{children:"Toggle Dark Theme"}),(0,_jsxRuntime.jsx)(_formField.FormField.Input,{as:_switch.Switch,onChange:event=>{setIsDarkTheme(event.target.checked)},checked:darkTheme})]}),(0,_jsxRuntime.jsxs)(_card.Card,{cs:themedCardStencil({isDarkTheme:darkTheme,headerColor}),...elemProps,children:[(0,_jsxRuntime.jsx)(_card.Card.Heading,{...themedCardStencil.parts.header,children:"Canvas Supreme"}),(0,_jsxRuntime.jsx)(_card.Card.Body,{...themedCardStencil.parts.body,children:"Our house special supreme pizza includes pepperoni, sausage, bell peppers, mushrooms, onions, and oregano."})]})]})};exports.v=CreateStencil,CreateStencil.displayName="CreateStencil",CreateStencil.__RAW__="import * as React from 'react';\nimport {createStencil} from '@workday/canvas-kit-styling';\nimport {Card} from '@workday/canvas-kit-react/card';\nimport {system} from '@workday/canvas-tokens-web';\nimport {Switch} from '@workday/canvas-kit-react/switch';\nimport {FormField} from '@workday/canvas-kit-react/form-field';\n\nconst themedCardStencil = createStencil({\n  vars: {\n    // Create CSS variables for the color of the header\n    headerColor: '',\n  },\n  parts: {\n    // Allows for styling a sub element of the component that may not be exposed through the API\n    header: 'themed-card-header',\n    body: 'themed-card-body',\n  },\n  base: ({headerPart, headerColor}) => ({\n    padding: system.space.x4,\n    boxShadow: system.depth[2],\n    backgroundColor: system.color.bg.default,\n    color: system.color.text.default,\n    // Targets the header part via [data-part=\"themed-card-header\"]\"]\n    [headerPart]: {\n      color: headerColor,\n    },\n  }),\n  modifiers: {\n    isDarkTheme: {\n      // If the prop `isDarkTheme` is true, style the component and it's parts\n      true: ({headerPart, bodyPart}) => ({\n        backgroundColor: system.color.bg.contrast.default,\n        color: system.color.text.inverse,\n        [`${headerPart}, ${bodyPart}`]: {\n          color: system.color.text.inverse,\n        },\n      }),\n    },\n  },\n});\n\nexport const CreateStencil = ({isDarkTheme, headerColor, elemProps}) => {\n  const [darkTheme, setIsDarkTheme] = React.useState(false);\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsDarkTheme(event.target.checked);\n  };\n  return (\n    <div>\n      <FormField>\n        <FormField.Label>Toggle Dark Theme</FormField.Label>\n        <FormField.Input as={Switch} onChange={handleChange} checked={darkTheme} />\n      </FormField>\n\n      <Card cs={themedCardStencil({isDarkTheme: darkTheme, headerColor})} {...elemProps}>\n        <Card.Heading {...themedCardStencil.parts.header}>Canvas Supreme</Card.Heading>\n        <Card.Body {...themedCardStencil.parts.body}>\n          Our house special supreme pizza includes pepperoni, sausage, bell peppers, mushrooms,\n          onions, and oregano.\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n"}}]);