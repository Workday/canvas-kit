"use strict";(globalThis.webpackChunkcanvas_kit=globalThis.webpackChunkcanvas_kit||[]).push([[4215],{"./modules/preview-react/segmented-control/stories/testing.stories.tsx":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.TextOnlyStates=exports.TextAndIconStates=exports.IconOnlyVerticalStates=exports.IconOnlyHorizontalStates=void 0;(function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}})(__webpack_require__("./node_modules/react/index.js"));var _testing=__webpack_require__("./modules/react/testing/index.ts"),_segmentedControl=__webpack_require__("./modules/preview-react/segmented-control/index.ts"),_canvasSystemIconsWeb=__webpack_require__("./node_modules/@workday/canvas-system-icons-web/dist/es6/index.js"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");exports.default={title:"Testing/Preview/Segmented Control",component:_segmentedControl.SegmentedControl,parameters:{storySource:{source:"\n    \n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import React from 'react';\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {SegmentedControl} from '@workday/canvas-kit-preview-react/segmented-control';\\nimport {gridIcon, listViewIcon, listDetailIcon} from '@workday/canvas-system-icons-web';\\n\\nexport default {\\n  title: 'Testing/Preview/Segmented Control',\\n  component: SegmentedControl,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nconst stateTableColumnProps = [\\n  {label: 'Default ', props: {}},\\n  {label: 'Default Disabled', props: {disabled: true}},\\n  {label: 'Hover ', props: {itemProps: {className: 'hover'}}},\\n  {label: 'Hover Disabled', props: {disabled: true, itemProps: {className: 'hover'}}},\\n  {label: 'Focus ', props: {itemProps: {className: 'focus'}}},\\n  {label: 'Focus Hover ', props: {itemProps: {className: 'focus hover'}}},\\n  {label: 'Active/Pressed', props: {itemProps: {className: 'active'}}},\\n];\\n\\nexport const IconOnlyHorizontalStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          size: [\\n            {value: 'small', label: 'Small'},\\n            {value: 'medium', label: 'Medium'},\\n            {value: 'large', label: 'Large'},\\n          ],\\n          initialValue: [\\n            {value: 'table', label: ' with first item selected'},\\n            {value: 'list', label: ' with second item selected'},\\n            {value: 'detail', label: ' with third item selected'},\\n          ],\\n        })}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {({itemProps, ...props}) => (\\n          <SegmentedControl shouldSelect={() => false} {...props}>\\n            <SegmentedControl.List aria-label=\\\"View type\\\">\\n              <SegmentedControl.Item\\n                data-id=\\\"table\\\"\\n                icon={gridIcon}\\n                tooltipProps={{title: 'Table'}}\\n              />\\n              <SegmentedControl.Item\\n                data-id=\\\"list\\\"\\n                icon={listViewIcon}\\n                tooltipProps={{title: 'List'}}\\n                {...itemProps}\\n              />\\n              <SegmentedControl.Item\\n                data-id=\\\"detail\\\"\\n                icon={listDetailIcon}\\n                tooltipProps={{title: 'Detail'}}\\n              />\\n            </SegmentedControl.List>\\n          </SegmentedControl>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const IconOnlyVerticalStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          size: [\\n            {value: 'small', label: 'Small'},\\n            {value: 'medium', label: 'Medium'},\\n            {value: 'large', label: 'Large'},\\n          ],\\n          initialValue: [\\n            {value: 'table', label: ' with first item selected'},\\n            {value: 'list', label: ' with second item selected'},\\n            {value: 'detail', label: ' with third item selected'},\\n          ],\\n        })}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {({itemProps, ...props}) => (\\n          <SegmentedControl shouldSelect={() => false} orientation=\\\"vertical\\\" {...props}>\\n            <SegmentedControl.List aria-label=\\\"View type\\\">\\n              <SegmentedControl.Item\\n                data-id=\\\"table\\\"\\n                icon={gridIcon}\\n                tooltipProps={{title: 'Table'}}\\n              />\\n              <SegmentedControl.Item\\n                data-id=\\\"list\\\"\\n                icon={listViewIcon}\\n                tooltipProps={{title: 'List'}}\\n                {...itemProps}\\n              />\\n              <SegmentedControl.Item\\n                data-id=\\\"detail\\\"\\n                icon={listDetailIcon}\\n                tooltipProps={{title: 'Detail'}}\\n              />\\n            </SegmentedControl.List>\\n          </SegmentedControl>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const TextAndIconStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          size: [\\n            {value: 'small', label: 'Small'},\\n            {value: 'medium', label: 'Medium'},\\n            {value: 'large', label: 'Large'},\\n          ],\\n          initialValue: [\\n            {value: 'table', label: ' with first item selected'},\\n            {value: 'list', label: ' with second item selected'},\\n            {value: 'detail', label: ' with third item selected'},\\n          ],\\n        })}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {({itemProps, ...props}) => (\\n          <SegmentedControl shouldSelect={() => false} {...props}>\\n            <SegmentedControl.List aria-label=\\\"View type\\\">\\n              <SegmentedControl.Item data-id=\\\"table\\\" icon={gridIcon}>\\n                Table\\n              </SegmentedControl.Item>\\n              <SegmentedControl.Item data-id=\\\"list\\\" icon={listViewIcon} {...itemProps}>\\n                List\\n              </SegmentedControl.Item>\\n              <SegmentedControl.Item data-id=\\\"detail\\\" icon={listDetailIcon}>\\n                Detail\\n              </SegmentedControl.Item>\\n            </SegmentedControl.List>\\n          </SegmentedControl>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const TextOnlyStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          size: [\\n            {value: 'small', label: 'Small'},\\n            {value: 'medium', label: 'Medium'},\\n            {value: 'large', label: 'Large'},\\n          ],\\n          initialValue: [\\n            {value: 'table', label: ' with first item selected'},\\n            {value: 'list', label: ' with second item selected'},\\n            {value: 'detail', label: ' with third item selected'},\\n          ],\\n        })}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {({itemProps, ...props}) => (\\n          <SegmentedControl shouldSelect={() => false} {...props}>\\n            <SegmentedControl.List aria-label=\\\"View type\\\">\\n              <SegmentedControl.Item data-id=\\\"table\\\">Table</SegmentedControl.Item>\\n              <SegmentedControl.Item data-id=\\\"list\\\" {...itemProps}>\\n                List\\n              </SegmentedControl.Item>\\n              <SegmentedControl.Item data-id=\\\"detail\\\">Detail</SegmentedControl.Item>\\n            </SegmentedControl.List>\\n          </SegmentedControl>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"IconOnlyHorizontalStates\": {\n    \"startLoc\": {\n      \"col\": 40,\n      \"line\": 30\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 73\n    },\n    \"startBody\": {\n      \"col\": 40,\n      \"line\": 30\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 73\n    }\n  },\n  \"IconOnlyVerticalStates\": {\n    \"startLoc\": {\n      \"col\": 38,\n      \"line\": 75\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 118\n    },\n    \"startBody\": {\n      \"col\": 38,\n      \"line\": 75\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 118\n    }\n  },\n  \"TextAndIconStates\": {\n    \"startLoc\": {\n      \"col\": 33,\n      \"line\": 120\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 156\n    },\n    \"startBody\": {\n      \"col\": 33,\n      \"line\": 120\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 156\n    }\n  },\n  \"TextOnlyStates\": {\n    \"startLoc\": {\n      \"col\": 30,\n      \"line\": 158\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 190\n    },\n    \"startBody\": {\n      \"col\": 30,\n      \"line\": 158\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 190\n    }\n  }\n};\n    \nimport React from 'react';\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {SegmentedControl} from '@workday/canvas-kit-preview-react/segmented-control';\nimport {gridIcon, listViewIcon, listDetailIcon} from '@workday/canvas-system-icons-web';\n\nexport default {\n  title: 'Testing/Preview/Segmented Control',\n  component: SegmentedControl,\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import React from 'react';\\nimport {\\n  ComponentStatesTable,\\n  permutateProps,\\n  StaticStates,\\n} from '@workday/canvas-kit-react/testing';\\nimport {SegmentedControl} from '@workday/canvas-kit-preview-react/segmented-control';\\nimport {gridIcon, listViewIcon, listDetailIcon} from '@workday/canvas-system-icons-web';\\n\\nexport default {\\n  title: 'Testing/Preview/Segmented Control',\\n  component: SegmentedControl,\\n  parameters: {\\n    chromatic: {\\n      disable: false,\\n    },\\n  },\\n};\\n\\nconst stateTableColumnProps = [\\n  {label: 'Default ', props: {}},\\n  {label: 'Default Disabled', props: {disabled: true}},\\n  {label: 'Hover ', props: {itemProps: {className: 'hover'}}},\\n  {label: 'Hover Disabled', props: {disabled: true, itemProps: {className: 'hover'}}},\\n  {label: 'Focus ', props: {itemProps: {className: 'focus'}}},\\n  {label: 'Focus Hover ', props: {itemProps: {className: 'focus hover'}}},\\n  {label: 'Active/Pressed', props: {itemProps: {className: 'active'}}},\\n];\\n\\nexport const IconOnlyHorizontalStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          size: [\\n            {value: 'small', label: 'Small'},\\n            {value: 'medium', label: 'Medium'},\\n            {value: 'large', label: 'Large'},\\n          ],\\n          initialValue: [\\n            {value: 'table', label: ' with first item selected'},\\n            {value: 'list', label: ' with second item selected'},\\n            {value: 'detail', label: ' with third item selected'},\\n          ],\\n        })}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {({itemProps, ...props}) => (\\n          <SegmentedControl shouldSelect={() => false} {...props}>\\n            <SegmentedControl.List aria-label=\\\"View type\\\">\\n              <SegmentedControl.Item\\n                data-id=\\\"table\\\"\\n                icon={gridIcon}\\n                tooltipProps={{title: 'Table'}}\\n              />\\n              <SegmentedControl.Item\\n                data-id=\\\"list\\\"\\n                icon={listViewIcon}\\n                tooltipProps={{title: 'List'}}\\n                {...itemProps}\\n              />\\n              <SegmentedControl.Item\\n                data-id=\\\"detail\\\"\\n                icon={listDetailIcon}\\n                tooltipProps={{title: 'Detail'}}\\n              />\\n            </SegmentedControl.List>\\n          </SegmentedControl>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const IconOnlyVerticalStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          size: [\\n            {value: 'small', label: 'Small'},\\n            {value: 'medium', label: 'Medium'},\\n            {value: 'large', label: 'Large'},\\n          ],\\n          initialValue: [\\n            {value: 'table', label: ' with first item selected'},\\n            {value: 'list', label: ' with second item selected'},\\n            {value: 'detail', label: ' with third item selected'},\\n          ],\\n        })}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {({itemProps, ...props}) => (\\n          <SegmentedControl shouldSelect={() => false} orientation=\\\"vertical\\\" {...props}>\\n            <SegmentedControl.List aria-label=\\\"View type\\\">\\n              <SegmentedControl.Item\\n                data-id=\\\"table\\\"\\n                icon={gridIcon}\\n                tooltipProps={{title: 'Table'}}\\n              />\\n              <SegmentedControl.Item\\n                data-id=\\\"list\\\"\\n                icon={listViewIcon}\\n                tooltipProps={{title: 'List'}}\\n                {...itemProps}\\n              />\\n              <SegmentedControl.Item\\n                data-id=\\\"detail\\\"\\n                icon={listDetailIcon}\\n                tooltipProps={{title: 'Detail'}}\\n              />\\n            </SegmentedControl.List>\\n          </SegmentedControl>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const TextAndIconStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          size: [\\n            {value: 'small', label: 'Small'},\\n            {value: 'medium', label: 'Medium'},\\n            {value: 'large', label: 'Large'},\\n          ],\\n          initialValue: [\\n            {value: 'table', label: ' with first item selected'},\\n            {value: 'list', label: ' with second item selected'},\\n            {value: 'detail', label: ' with third item selected'},\\n          ],\\n        })}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {({itemProps, ...props}) => (\\n          <SegmentedControl shouldSelect={() => false} {...props}>\\n            <SegmentedControl.List aria-label=\\\"View type\\\">\\n              <SegmentedControl.Item data-id=\\\"table\\\" icon={gridIcon}>\\n                Table\\n              </SegmentedControl.Item>\\n              <SegmentedControl.Item data-id=\\\"list\\\" icon={listViewIcon} {...itemProps}>\\n                List\\n              </SegmentedControl.Item>\\n              <SegmentedControl.Item data-id=\\\"detail\\\" icon={listDetailIcon}>\\n                Detail\\n              </SegmentedControl.Item>\\n            </SegmentedControl.List>\\n          </SegmentedControl>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\\nexport const TextOnlyStates = {\\n  render: () => (\\n    <StaticStates>\\n      <ComponentStatesTable\\n        rowProps={permutateProps({\\n          size: [\\n            {value: 'small', label: 'Small'},\\n            {value: 'medium', label: 'Medium'},\\n            {value: 'large', label: 'Large'},\\n          ],\\n          initialValue: [\\n            {value: 'table', label: ' with first item selected'},\\n            {value: 'list', label: ' with second item selected'},\\n            {value: 'detail', label: ' with third item selected'},\\n          ],\\n        })}\\n        columnProps={stateTableColumnProps}\\n      >\\n        {({itemProps, ...props}) => (\\n          <SegmentedControl shouldSelect={() => false} {...props}>\\n            <SegmentedControl.List aria-label=\\\"View type\\\">\\n              <SegmentedControl.Item data-id=\\\"table\\\">Table</SegmentedControl.Item>\\n              <SegmentedControl.Item data-id=\\\"list\\\" {...itemProps}>\\n                List\\n              </SegmentedControl.Item>\\n              <SegmentedControl.Item data-id=\\\"detail\\\">Detail</SegmentedControl.Item>\\n            </SegmentedControl.List>\\n          </SegmentedControl>\\n        )}\\n      </ComponentStatesTable>\\n    </StaticStates>\\n  ),\\n};\\n\",\n    \"locationsMap\": {\n      \"icon-only-horizontal-states\": {\n        \"startLoc\": {\n          \"col\": 40,\n          \"line\": 30\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 73\n        },\n        \"startBody\": {\n          \"col\": 40,\n          \"line\": 30\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 73\n        }\n      },\n      \"icon-only-vertical-states\": {\n        \"startLoc\": {\n          \"col\": 38,\n          \"line\": 75\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 118\n        },\n        \"startBody\": {\n          \"col\": 38,\n          \"line\": 75\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 118\n        }\n      },\n      \"text-and-icon-states\": {\n        \"startLoc\": {\n          \"col\": 33,\n          \"line\": 120\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 156\n        },\n        \"startBody\": {\n          \"col\": 33,\n          \"line\": 120\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 156\n        }\n      },\n      \"text-only-states\": {\n        \"startLoc\": {\n          \"col\": 30,\n          \"line\": 158\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 190\n        },\n        \"startBody\": {\n          \"col\": 30,\n          \"line\": 158\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 190\n        }\n      }\n    }\n  }\n,\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nconst stateTableColumnProps = [\n  {label: 'Default ', props: {}},\n  {label: 'Default Disabled', props: {disabled: true}},\n  {label: 'Hover ', props: {itemProps: {className: 'hover'}}},\n  {label: 'Hover Disabled', props: {disabled: true, itemProps: {className: 'hover'}}},\n  {label: 'Focus ', props: {itemProps: {className: 'focus'}}},\n  {label: 'Focus Hover ', props: {itemProps: {className: 'focus hover'}}},\n  {label: 'Active/Pressed', props: {itemProps: {className: 'active'}}},\n];\n\nexport const IconOnlyHorizontalStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          size: [\n            {value: 'small', label: 'Small'},\n            {value: 'medium', label: 'Medium'},\n            {value: 'large', label: 'Large'},\n          ],\n          initialValue: [\n            {value: 'table', label: ' with first item selected'},\n            {value: 'list', label: ' with second item selected'},\n            {value: 'detail', label: ' with third item selected'},\n          ],\n        })}\n        columnProps={stateTableColumnProps}\n      >\n        {({itemProps, ...props}) => (\n          <SegmentedControl shouldSelect={() => false} {...props}>\n            <SegmentedControl.List aria-label=\"View type\">\n              <SegmentedControl.Item\n                data-id=\"table\"\n                icon={gridIcon}\n                tooltipProps={{title: 'Table'}}\n              />\n              <SegmentedControl.Item\n                data-id=\"list\"\n                icon={listViewIcon}\n                tooltipProps={{title: 'List'}}\n                {...itemProps}\n              />\n              <SegmentedControl.Item\n                data-id=\"detail\"\n                icon={listDetailIcon}\n                tooltipProps={{title: 'Detail'}}\n              />\n            </SegmentedControl.List>\n          </SegmentedControl>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};;\n\nexport const IconOnlyVerticalStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          size: [\n            {value: 'small', label: 'Small'},\n            {value: 'medium', label: 'Medium'},\n            {value: 'large', label: 'Large'},\n          ],\n          initialValue: [\n            {value: 'table', label: ' with first item selected'},\n            {value: 'list', label: ' with second item selected'},\n            {value: 'detail', label: ' with third item selected'},\n          ],\n        })}\n        columnProps={stateTableColumnProps}\n      >\n        {({itemProps, ...props}) => (\n          <SegmentedControl shouldSelect={() => false} orientation=\"vertical\" {...props}>\n            <SegmentedControl.List aria-label=\"View type\">\n              <SegmentedControl.Item\n                data-id=\"table\"\n                icon={gridIcon}\n                tooltipProps={{title: 'Table'}}\n              />\n              <SegmentedControl.Item\n                data-id=\"list\"\n                icon={listViewIcon}\n                tooltipProps={{title: 'List'}}\n                {...itemProps}\n              />\n              <SegmentedControl.Item\n                data-id=\"detail\"\n                icon={listDetailIcon}\n                tooltipProps={{title: 'Detail'}}\n              />\n            </SegmentedControl.List>\n          </SegmentedControl>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};;\n\nexport const TextAndIconStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          size: [\n            {value: 'small', label: 'Small'},\n            {value: 'medium', label: 'Medium'},\n            {value: 'large', label: 'Large'},\n          ],\n          initialValue: [\n            {value: 'table', label: ' with first item selected'},\n            {value: 'list', label: ' with second item selected'},\n            {value: 'detail', label: ' with third item selected'},\n          ],\n        })}\n        columnProps={stateTableColumnProps}\n      >\n        {({itemProps, ...props}) => (\n          <SegmentedControl shouldSelect={() => false} {...props}>\n            <SegmentedControl.List aria-label=\"View type\">\n              <SegmentedControl.Item data-id=\"table\" icon={gridIcon}>\n                Table\n              </SegmentedControl.Item>\n              <SegmentedControl.Item data-id=\"list\" icon={listViewIcon} {...itemProps}>\n                List\n              </SegmentedControl.Item>\n              <SegmentedControl.Item data-id=\"detail\" icon={listDetailIcon}>\n                Detail\n              </SegmentedControl.Item>\n            </SegmentedControl.List>\n          </SegmentedControl>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};;\n\nexport const TextOnlyStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          size: [\n            {value: 'small', label: 'Small'},\n            {value: 'medium', label: 'Medium'},\n            {value: 'large', label: 'Large'},\n          ],\n          initialValue: [\n            {value: 'table', label: ' with first item selected'},\n            {value: 'list', label: ' with second item selected'},\n            {value: 'detail', label: ' with third item selected'},\n          ],\n        })}\n        columnProps={stateTableColumnProps}\n      >\n        {({itemProps, ...props}) => (\n          <SegmentedControl shouldSelect={() => false} {...props}>\n            <SegmentedControl.List aria-label=\"View type\">\n              <SegmentedControl.Item data-id=\"table\">Table</SegmentedControl.Item>\n              <SegmentedControl.Item data-id=\"list\" {...itemProps}>\n                List\n              </SegmentedControl.Item>\n              <SegmentedControl.Item data-id=\"detail\">Detail</SegmentedControl.Item>\n            </SegmentedControl.List>\n          </SegmentedControl>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n",locationsMap:{"icon-only-horizontal-states":{startLoc:{col:40,line:189},endLoc:{col:1,line:232},startBody:{col:40,line:189},endBody:{col:1,line:232}},"icon-only-vertical-states":{startLoc:{col:38,line:234},endLoc:{col:1,line:277},startBody:{col:38,line:234},endBody:{col:1,line:277}},"text-and-icon-states":{startLoc:{col:33,line:279},endLoc:{col:1,line:315},startBody:{col:33,line:279},endBody:{col:1,line:315}},"text-only-states":{startLoc:{col:30,line:317},endLoc:{col:1,line:349},startBody:{col:30,line:317},endBody:{col:1,line:349}}}},storySource:{source:"import React from 'react';\nimport {\n  ComponentStatesTable,\n  permutateProps,\n  StaticStates,\n} from '@workday/canvas-kit-react/testing';\nimport {SegmentedControl} from '@workday/canvas-kit-preview-react/segmented-control';\nimport {gridIcon, listViewIcon, listDetailIcon} from '@workday/canvas-system-icons-web';\n\nexport default {\n  title: 'Testing/Preview/Segmented Control',\n  component: SegmentedControl,\n  parameters: {\n    chromatic: {\n      disable: false,\n    },\n  },\n};\n\nconst stateTableColumnProps = [\n  {label: 'Default ', props: {}},\n  {label: 'Default Disabled', props: {disabled: true}},\n  {label: 'Hover ', props: {itemProps: {className: 'hover'}}},\n  {label: 'Hover Disabled', props: {disabled: true, itemProps: {className: 'hover'}}},\n  {label: 'Focus ', props: {itemProps: {className: 'focus'}}},\n  {label: 'Focus Hover ', props: {itemProps: {className: 'focus hover'}}},\n  {label: 'Active/Pressed', props: {itemProps: {className: 'active'}}},\n];\n\nexport const IconOnlyHorizontalStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          size: [\n            {value: 'small', label: 'Small'},\n            {value: 'medium', label: 'Medium'},\n            {value: 'large', label: 'Large'},\n          ],\n          initialValue: [\n            {value: 'table', label: ' with first item selected'},\n            {value: 'list', label: ' with second item selected'},\n            {value: 'detail', label: ' with third item selected'},\n          ],\n        })}\n        columnProps={stateTableColumnProps}\n      >\n        {({itemProps, ...props}) => (\n          <SegmentedControl shouldSelect={() => false} {...props}>\n            <SegmentedControl.List aria-label=\"View type\">\n              <SegmentedControl.Item\n                data-id=\"table\"\n                icon={gridIcon}\n                tooltipProps={{title: 'Table'}}\n              />\n              <SegmentedControl.Item\n                data-id=\"list\"\n                icon={listViewIcon}\n                tooltipProps={{title: 'List'}}\n                {...itemProps}\n              />\n              <SegmentedControl.Item\n                data-id=\"detail\"\n                icon={listDetailIcon}\n                tooltipProps={{title: 'Detail'}}\n              />\n            </SegmentedControl.List>\n          </SegmentedControl>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n\nexport const IconOnlyVerticalStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          size: [\n            {value: 'small', label: 'Small'},\n            {value: 'medium', label: 'Medium'},\n            {value: 'large', label: 'Large'},\n          ],\n          initialValue: [\n            {value: 'table', label: ' with first item selected'},\n            {value: 'list', label: ' with second item selected'},\n            {value: 'detail', label: ' with third item selected'},\n          ],\n        })}\n        columnProps={stateTableColumnProps}\n      >\n        {({itemProps, ...props}) => (\n          <SegmentedControl shouldSelect={() => false} orientation=\"vertical\" {...props}>\n            <SegmentedControl.List aria-label=\"View type\">\n              <SegmentedControl.Item\n                data-id=\"table\"\n                icon={gridIcon}\n                tooltipProps={{title: 'Table'}}\n              />\n              <SegmentedControl.Item\n                data-id=\"list\"\n                icon={listViewIcon}\n                tooltipProps={{title: 'List'}}\n                {...itemProps}\n              />\n              <SegmentedControl.Item\n                data-id=\"detail\"\n                icon={listDetailIcon}\n                tooltipProps={{title: 'Detail'}}\n              />\n            </SegmentedControl.List>\n          </SegmentedControl>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n\nexport const TextAndIconStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          size: [\n            {value: 'small', label: 'Small'},\n            {value: 'medium', label: 'Medium'},\n            {value: 'large', label: 'Large'},\n          ],\n          initialValue: [\n            {value: 'table', label: ' with first item selected'},\n            {value: 'list', label: ' with second item selected'},\n            {value: 'detail', label: ' with third item selected'},\n          ],\n        })}\n        columnProps={stateTableColumnProps}\n      >\n        {({itemProps, ...props}) => (\n          <SegmentedControl shouldSelect={() => false} {...props}>\n            <SegmentedControl.List aria-label=\"View type\">\n              <SegmentedControl.Item data-id=\"table\" icon={gridIcon}>\n                Table\n              </SegmentedControl.Item>\n              <SegmentedControl.Item data-id=\"list\" icon={listViewIcon} {...itemProps}>\n                List\n              </SegmentedControl.Item>\n              <SegmentedControl.Item data-id=\"detail\" icon={listDetailIcon}>\n                Detail\n              </SegmentedControl.Item>\n            </SegmentedControl.List>\n          </SegmentedControl>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n\nexport const TextOnlyStates = {\n  render: () => (\n    <StaticStates>\n      <ComponentStatesTable\n        rowProps={permutateProps({\n          size: [\n            {value: 'small', label: 'Small'},\n            {value: 'medium', label: 'Medium'},\n            {value: 'large', label: 'Large'},\n          ],\n          initialValue: [\n            {value: 'table', label: ' with first item selected'},\n            {value: 'list', label: ' with second item selected'},\n            {value: 'detail', label: ' with third item selected'},\n          ],\n        })}\n        columnProps={stateTableColumnProps}\n      >\n        {({itemProps, ...props}) => (\n          <SegmentedControl shouldSelect={() => false} {...props}>\n            <SegmentedControl.List aria-label=\"View type\">\n              <SegmentedControl.Item data-id=\"table\">Table</SegmentedControl.Item>\n              <SegmentedControl.Item data-id=\"list\" {...itemProps}>\n                List\n              </SegmentedControl.Item>\n              <SegmentedControl.Item data-id=\"detail\">Detail</SegmentedControl.Item>\n            </SegmentedControl.List>\n          </SegmentedControl>\n        )}\n      </ComponentStatesTable>\n    </StaticStates>\n  ),\n};\n",locationsMap:{"icon-only-horizontal-states":{startLoc:{col:40,line:30},endLoc:{col:1,line:73},startBody:{col:40,line:30},endBody:{col:1,line:73}},"icon-only-vertical-states":{startLoc:{col:38,line:75},endLoc:{col:1,line:118},startBody:{col:38,line:75},endBody:{col:1,line:118}},"text-and-icon-states":{startLoc:{col:33,line:120},endLoc:{col:1,line:156},startBody:{col:33,line:120},endBody:{col:1,line:156}},"text-only-states":{startLoc:{col:30,line:158},endLoc:{col:1,line:190},startBody:{col:30,line:158},endBody:{col:1,line:190}}}},chromatic:{disable:!1}}};const stateTableColumnProps=[{label:"Default ",props:{}},{label:"Default Disabled",props:{disabled:!0}},{label:"Hover ",props:{itemProps:{className:"hover"}}},{label:"Hover Disabled",props:{disabled:!0,itemProps:{className:"hover"}}},{label:"Focus ",props:{itemProps:{className:"focus"}}},{label:"Focus Hover ",props:{itemProps:{className:"focus hover"}}},{label:"Active/Pressed",props:{itemProps:{className:"active"}}}];exports.IconOnlyHorizontalStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({size:[{value:"small",label:"Small"},{value:"medium",label:"Medium"},{value:"large",label:"Large"}],initialValue:[{value:"table",label:" with first item selected"},{value:"list",label:" with second item selected"},{value:"detail",label:" with third item selected"}]}),columnProps:stateTableColumnProps,children:({itemProps,...props})=>(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl,{shouldSelect:()=>!1,...props,children:(0,_jsxRuntime.jsxs)(_segmentedControl.SegmentedControl.List,{"aria-label":"View type",children:[(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl.Item,{"data-id":"table",icon:_canvasSystemIconsWeb.gridIcon,tooltipProps:{title:"Table"}}),(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl.Item,{"data-id":"list",icon:_canvasSystemIconsWeb.listViewIcon,tooltipProps:{title:"List"},...itemProps}),(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl.Item,{"data-id":"detail",icon:_canvasSystemIconsWeb.listDetailIcon,tooltipProps:{title:"Detail"}})]})})})})},exports.IconOnlyVerticalStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({size:[{value:"small",label:"Small"},{value:"medium",label:"Medium"},{value:"large",label:"Large"}],initialValue:[{value:"table",label:" with first item selected"},{value:"list",label:" with second item selected"},{value:"detail",label:" with third item selected"}]}),columnProps:stateTableColumnProps,children:({itemProps,...props})=>(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl,{shouldSelect:()=>!1,orientation:"vertical",...props,children:(0,_jsxRuntime.jsxs)(_segmentedControl.SegmentedControl.List,{"aria-label":"View type",children:[(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl.Item,{"data-id":"table",icon:_canvasSystemIconsWeb.gridIcon,tooltipProps:{title:"Table"}}),(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl.Item,{"data-id":"list",icon:_canvasSystemIconsWeb.listViewIcon,tooltipProps:{title:"List"},...itemProps}),(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl.Item,{"data-id":"detail",icon:_canvasSystemIconsWeb.listDetailIcon,tooltipProps:{title:"Detail"}})]})})})})},exports.TextAndIconStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({size:[{value:"small",label:"Small"},{value:"medium",label:"Medium"},{value:"large",label:"Large"}],initialValue:[{value:"table",label:" with first item selected"},{value:"list",label:" with second item selected"},{value:"detail",label:" with third item selected"}]}),columnProps:stateTableColumnProps,children:({itemProps,...props})=>(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl,{shouldSelect:()=>!1,...props,children:(0,_jsxRuntime.jsxs)(_segmentedControl.SegmentedControl.List,{"aria-label":"View type",children:[(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl.Item,{"data-id":"table",icon:_canvasSystemIconsWeb.gridIcon,children:"Table"}),(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl.Item,{"data-id":"list",icon:_canvasSystemIconsWeb.listViewIcon,...itemProps,children:"List"}),(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl.Item,{"data-id":"detail",icon:_canvasSystemIconsWeb.listDetailIcon,children:"Detail"})]})})})})},exports.TextOnlyStates={render:()=>(0,_jsxRuntime.jsx)(_testing.StaticStates,{children:(0,_jsxRuntime.jsx)(_testing.ComponentStatesTable,{rowProps:(0,_testing.permutateProps)({size:[{value:"small",label:"Small"},{value:"medium",label:"Medium"},{value:"large",label:"Large"}],initialValue:[{value:"table",label:" with first item selected"},{value:"list",label:" with second item selected"},{value:"detail",label:" with third item selected"}]}),columnProps:stateTableColumnProps,children:({itemProps,...props})=>(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl,{shouldSelect:()=>!1,...props,children:(0,_jsxRuntime.jsxs)(_segmentedControl.SegmentedControl.List,{"aria-label":"View type",children:[(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl.Item,{"data-id":"table",children:"Table"}),(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl.Item,{"data-id":"list",...itemProps,children:"List"}),(0,_jsxRuntime.jsx)(_segmentedControl.SegmentedControl.Item,{"data-id":"detail",children:"Detail"})]})})})})};module.exports.__namedExportsOrder=["TextOnlyStates","TextAndIconStates","IconOnlyVerticalStates","IconOnlyHorizontalStates"]}}]);